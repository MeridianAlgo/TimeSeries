{"version":3,"file":"index.js","sources":["../src/utils/ValidationUtils.ts","../src/utils/StatisticsUtils.ts","../src/utils/MathUtils.ts","../src/config/defaults.ts","../src/predictors/UltraPrecisionPredictor.ts","../src/indicators/TechnicalIndicators.ts","../src/features/FeatureEngineer.ts","../src/config/indicators.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Validation Utilities\r\n * \r\n * Comprehensive data validation and error checking utilities.\r\n */\r\n\r\nimport { MarketData, ValidationResult, ValidationError, ValidationWarning } from '../types/MarketData';\r\nimport { TrainingData } from '../types/Prediction';\r\n\r\n/**\r\n * Validation utility functions\r\n */\r\nexport class ValidationUtils {\r\n  /**\r\n   * Validate market data array\r\n   */\r\n  static validateMarketData(data: MarketData[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(data)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Data must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (data.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_DATA',\r\n        message: 'Data array cannot be empty',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    // Validate each data point\r\n    data.forEach((item, index) => {\r\n      this.validateSingleMarketData(item, index, errors, warnings);\r\n    });\r\n\r\n    // Check for chronological order\r\n    this.validateChronologicalOrder(data, errors, warnings);\r\n\r\n    // Check for data gaps\r\n    this.validateDataGaps(data, warnings);\r\n\r\n    // Check for outliers\r\n    this.validateOutliers(data, warnings);\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate single market data point\r\n   */\r\n  private static validateSingleMarketData(\r\n    item: MarketData, \r\n    index: number, \r\n    errors: ValidationError[], \r\n    warnings: ValidationWarning[]\r\n  ): void {\r\n    const prefix = `Item ${index}`;\r\n\r\n    // Check required fields\r\n    if (!item.timestamp) {\r\n      errors.push({\r\n        code: 'MISSING_TIMESTAMP',\r\n        message: `${prefix}: Missing timestamp`,\r\n        field: 'timestamp',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (!item.symbol || typeof item.symbol !== 'string') {\r\n      errors.push({\r\n        code: 'INVALID_SYMBOL',\r\n        message: `${prefix}: Invalid or missing symbol`,\r\n        field: 'symbol',\r\n        value: item.symbol,\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    // Validate numeric fields\r\n    const numericFields = ['open', 'high', 'low', 'close', 'volume'];\r\n    numericFields.forEach(field => {\r\n      const value = (item as any)[field];\r\n      if (typeof value !== 'number' || !isFinite(value)) {\r\n        errors.push({\r\n          code: 'INVALID_NUMERIC_FIELD',\r\n          message: `${prefix}: ${field} must be a finite number`,\r\n          field,\r\n          value,\r\n          severity: 'high'\r\n        });\r\n      } else if (value < 0 && field !== 'close') { // Close can be negative for some instruments\r\n        errors.push({\r\n          code: 'NEGATIVE_VALUE',\r\n          message: `${prefix}: ${field} cannot be negative`,\r\n          field,\r\n          value,\r\n          severity: 'medium'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Validate OHLC relationships\r\n    if (typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.high < item.low) {\r\n        errors.push({\r\n          code: 'INVALID_HIGH_LOW',\r\n          message: `${prefix}: High price cannot be less than low price`,\r\n          severity: 'high'\r\n        });\r\n      }\r\n    }\r\n\r\n    if (typeof item.open === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.open > item.high || item.open < item.low) {\r\n        warnings.push({\r\n          code: 'OPEN_OUT_OF_RANGE',\r\n          message: `${prefix}: Open price is outside high-low range`,\r\n          field: 'open',\r\n          value: item.open\r\n        });\r\n      }\r\n    }\r\n\r\n    if (typeof item.close === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.close > item.high || item.close < item.low) {\r\n        warnings.push({\r\n          code: 'CLOSE_OUT_OF_RANGE',\r\n          message: `${prefix}: Close price is outside high-low range`,\r\n          field: 'close',\r\n          value: item.close\r\n        });\r\n      }\r\n    }\r\n\r\n    // Validate optional fields\r\n    if (item.vwap !== undefined) {\r\n      if (typeof item.vwap !== 'number' || !isFinite(item.vwap)) {\r\n        warnings.push({\r\n          code: 'INVALID_VWAP',\r\n          message: `${prefix}: VWAP must be a finite number`,\r\n          field: 'vwap',\r\n          value: item.vwap\r\n        });\r\n      }\r\n    }\r\n\r\n    if (item.trades !== undefined) {\r\n      if (!Number.isInteger(item.trades) || item.trades < 0) {\r\n        warnings.push({\r\n          code: 'INVALID_TRADES',\r\n          message: `${prefix}: Trades must be a non-negative integer`,\r\n          field: 'trades',\r\n          value: item.trades\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate chronological order\r\n   */\r\n  private static validateChronologicalOrder(\r\n    data: MarketData[], \r\n    errors: ValidationError[], \r\n    warnings: ValidationWarning[]\r\n  ): void {\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = new Date(data[i - 1].timestamp).getTime();\r\n      const currTime = new Date(data[i].timestamp).getTime();\r\n\r\n      if (currTime < prevTime) {\r\n        errors.push({\r\n          code: 'NON_CHRONOLOGICAL',\r\n          message: `Data is not in chronological order at index ${i}`,\r\n          severity: 'medium'\r\n        });\r\n      } else if (currTime === prevTime) {\r\n        warnings.push({\r\n          code: 'DUPLICATE_TIMESTAMP',\r\n          message: `Duplicate timestamp at index ${i}`,\r\n          value: data[i].timestamp\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate data gaps\r\n   */\r\n  private static validateDataGaps(data: MarketData[], warnings: ValidationWarning[]): void {\r\n    if (data.length < 2) return;\r\n\r\n    const intervals: number[] = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = new Date(data[i - 1].timestamp).getTime();\r\n      const currTime = new Date(data[i].timestamp).getTime();\r\n      intervals.push(currTime - prevTime);\r\n    }\r\n\r\n    // Calculate expected interval (mode of intervals)\r\n    const intervalCounts = new Map<number, number>();\r\n    intervals.forEach(interval => {\r\n      intervalCounts.set(interval, (intervalCounts.get(interval) || 0) + 1);\r\n    });\r\n\r\n    let expectedInterval = 0;\r\n    let maxCount = 0;\r\n    for (const [interval, count] of intervalCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        expectedInterval = interval;\r\n      }\r\n    }\r\n\r\n    // Check for gaps larger than 2x expected interval\r\n    intervals.forEach((interval, index) => {\r\n      if (interval > expectedInterval * 2) {\r\n        warnings.push({\r\n          code: 'DATA_GAP',\r\n          message: `Large data gap detected between index ${index} and ${index + 1}`,\r\n          value: interval\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate outliers in price data\r\n   */\r\n  private static validateOutliers(data: MarketData[], warnings: ValidationWarning[]): void {\r\n    if (data.length < 10) return; // Need sufficient data for outlier detection\r\n\r\n    const returns = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevClose = data[i - 1].close;\r\n      const currClose = data[i].close;\r\n      if (prevClose > 0) {\r\n        returns.push((currClose - prevClose) / prevClose);\r\n      }\r\n    }\r\n\r\n    if (returns.length === 0) return;\r\n\r\n    // Calculate z-scores for returns\r\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / (returns.length - 1);\r\n    const std = Math.sqrt(variance);\r\n\r\n    if (std === 0) return;\r\n\r\n    returns.forEach((ret, index) => {\r\n      const zScore = Math.abs((ret - mean) / std);\r\n      if (zScore > 3) { // 3-sigma rule\r\n        warnings.push({\r\n          code: 'PRICE_OUTLIER',\r\n          message: `Potential price outlier detected at index ${index + 1}`,\r\n          value: ret\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate training data\r\n   */\r\n  static validateTrainingData(data: TrainingData[]): ValidationResult {\r\n    // First validate as market data\r\n    const marketDataResult = this.validateMarketData(data);\r\n    \r\n    // Additional validation for training data\r\n    const errors = [...marketDataResult.errors];\r\n    const warnings = [...marketDataResult.warnings];\r\n\r\n    data.forEach((item, index) => {\r\n      if (item.features !== undefined) {\r\n        if (!Array.isArray(item.features)) {\r\n          errors.push({\r\n            code: 'INVALID_FEATURES',\r\n            message: `Item ${index}: Features must be an array`,\r\n            field: 'features',\r\n            severity: 'medium'\r\n          });\r\n        } else {\r\n          // Check for invalid feature values\r\n          item.features.forEach((feature, featureIndex) => {\r\n            if (typeof feature !== 'number' || !isFinite(feature)) {\r\n              errors.push({\r\n                code: 'INVALID_FEATURE_VALUE',\r\n                message: `Item ${index}: Feature ${featureIndex} must be a finite number`,\r\n                field: `features[${featureIndex}]`,\r\n                value: feature,\r\n                severity: 'medium'\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (item.target !== undefined) {\r\n        if (typeof item.target !== 'number' || !isFinite(item.target)) {\r\n          errors.push({\r\n            code: 'INVALID_TARGET',\r\n            message: `Item ${index}: Target must be a finite number`,\r\n            field: 'target',\r\n            value: item.target,\r\n            severity: 'medium'\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate feature array\r\n   */\r\n  static validateFeatures(features: number[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(features)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Features must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (features.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_FEATURES',\r\n        message: 'Features array cannot be empty',\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    features.forEach((feature, index) => {\r\n      if (typeof feature !== 'number') {\r\n        errors.push({\r\n          code: 'INVALID_FEATURE_TYPE',\r\n          message: `Feature ${index} must be a number`,\r\n          field: `features[${index}]`,\r\n          value: feature,\r\n          severity: 'high'\r\n        });\r\n      } else if (!isFinite(feature)) {\r\n        errors.push({\r\n          code: 'INVALID_FEATURE_VALUE',\r\n          message: `Feature ${index} must be finite`,\r\n          field: `features[${index}]`,\r\n          value: feature,\r\n          severity: 'high'\r\n        });\r\n      }\r\n    });\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate portfolio weights\r\n   */\r\n  static validatePortfolioWeights(weights: number[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(weights)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Weights must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (weights.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_WEIGHTS',\r\n        message: 'Weights array cannot be empty',\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    let sum = 0;\r\n    weights.forEach((weight, index) => {\r\n      if (typeof weight !== 'number' || !isFinite(weight)) {\r\n        errors.push({\r\n          code: 'INVALID_WEIGHT_VALUE',\r\n          message: `Weight ${index} must be a finite number`,\r\n          field: `weights[${index}]`,\r\n          value: weight,\r\n          severity: 'high'\r\n        });\r\n      } else {\r\n        sum += weight;\r\n        if (weight < 0) {\r\n          warnings.push({\r\n            code: 'NEGATIVE_WEIGHT',\r\n            message: `Weight ${index} is negative (short position)`,\r\n            field: `weights[${index}]`,\r\n            value: weight\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check if weights sum to approximately 1\r\n    const tolerance = 1e-6;\r\n    if (Math.abs(sum - 1) > tolerance) {\r\n      if (Math.abs(sum - 1) > 0.01) {\r\n        errors.push({\r\n          code: 'WEIGHTS_SUM_ERROR',\r\n          message: `Weights sum to ${sum}, should sum to 1.0`,\r\n          severity: 'medium'\r\n        });\r\n      } else {\r\n        warnings.push({\r\n          code: 'WEIGHTS_SUM_WARNING',\r\n          message: `Weights sum to ${sum}, should sum to 1.0`,\r\n          value: sum\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate date range\r\n   */\r\n  static validateDateRange(startDate: Date, endDate: Date): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!(startDate instanceof Date) || isNaN(startDate.getTime())) {\r\n      errors.push({\r\n        code: 'INVALID_START_DATE',\r\n        message: 'Start date must be a valid Date object',\r\n        field: 'startDate',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (!(endDate instanceof Date) || isNaN(endDate.getTime())) {\r\n      errors.push({\r\n        code: 'INVALID_END_DATE',\r\n        message: 'End date must be a valid Date object',\r\n        field: 'endDate',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      if (startDate >= endDate) {\r\n        errors.push({\r\n          code: 'INVALID_DATE_RANGE',\r\n          message: 'Start date must be before end date',\r\n          severity: 'high'\r\n        });\r\n      }\r\n\r\n      const now = new Date();\r\n      if (endDate > now) {\r\n        warnings.push({\r\n          code: 'FUTURE_END_DATE',\r\n          message: 'End date is in the future',\r\n          field: 'endDate',\r\n          value: endDate\r\n        });\r\n      }\r\n\r\n      const daysDiff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);\r\n      if (daysDiff < 1) {\r\n        warnings.push({\r\n          code: 'SHORT_DATE_RANGE',\r\n          message: 'Date range is less than 1 day',\r\n          value: daysDiff\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate numeric parameter\r\n   */\r\n  static validateNumericParameter(\r\n    value: unknown, \r\n    name: string, \r\n    options: {\r\n      min?: number;\r\n      max?: number;\r\n      integer?: boolean;\r\n      positive?: boolean;\r\n    } = {}\r\n  ): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (typeof value !== 'number') {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: `${name} must be a number`,\r\n        field: name,\r\n        value,\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (!isFinite(value)) {\r\n      errors.push({\r\n        code: 'INVALID_VALUE',\r\n        message: `${name} must be finite`,\r\n        field: name,\r\n        value,\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (options.integer && !Number.isInteger(value)) {\r\n      errors.push({\r\n        code: 'NOT_INTEGER',\r\n        message: `${name} must be an integer`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.positive && value <= 0) {\r\n      errors.push({\r\n        code: 'NOT_POSITIVE',\r\n        message: `${name} must be positive`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.min !== undefined && value < options.min) {\r\n      errors.push({\r\n        code: 'BELOW_MINIMUM',\r\n        message: `${name} must be at least ${options.min}`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.max !== undefined && value > options.max) {\r\n      errors.push({\r\n        code: 'ABOVE_MAXIMUM',\r\n        message: `${name} must be at most ${options.max}`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitize and clean market data\r\n   */\r\n  static sanitizeMarketData(data: MarketData[]): MarketData[] {\r\n    return data\r\n      .filter(item => {\r\n        // Remove items with invalid basic structure\r\n        return item && \r\n               typeof item.open === 'number' && isFinite(item.open) &&\r\n               typeof item.high === 'number' && isFinite(item.high) &&\r\n               typeof item.low === 'number' && isFinite(item.low) &&\r\n               typeof item.close === 'number' && isFinite(item.close) &&\r\n               typeof item.volume === 'number' && isFinite(item.volume) &&\r\n               item.high >= item.low;\r\n      })\r\n      .map(item => ({\r\n        ...item,\r\n        // Ensure timestamp is a Date object\r\n        timestamp: new Date(item.timestamp),\r\n        // Ensure numeric fields are properly typed\r\n        open: Number(item.open),\r\n        high: Number(item.high),\r\n        low: Number(item.low),\r\n        close: Number(item.close),\r\n        volume: Number(item.volume),\r\n        // Clean optional fields\r\n        vwap: item.vwap !== undefined ? Number(item.vwap) : undefined,\r\n        trades: item.trades !== undefined ? Math.floor(Number(item.trades)) : undefined\r\n      }))\r\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()); // Ensure chronological order\r\n  }\r\n}","/**\r\n * Statistical Utilities\r\n * \r\n * Advanced statistical functions for financial analysis and risk management.\r\n */\r\n\r\n/**\r\n * Statistical utility functions\r\n */\r\nexport class StatisticsUtils {\r\n  /**\r\n   * Calculate mean (average)\r\n   */\r\n  static mean(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate mean of empty array');\r\n    }\r\n    return data.reduce((sum, value) => sum + value, 0) / data.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate median\r\n   */\r\n  static median(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate median of empty array');\r\n    }\r\n    \r\n    const sorted = [...data].sort((a, b) => a - b);\r\n    const mid = Math.floor(sorted.length / 2);\r\n    \r\n    if (sorted.length % 2 === 0) {\r\n      return (sorted[mid - 1] + sorted[mid]) / 2;\r\n    } else {\r\n      return sorted[mid];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate mode (most frequent value)\r\n   */\r\n  static mode(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate mode of empty array');\r\n    }\r\n    \r\n    const frequency: Map<number, number> = new Map();\r\n    let maxFreq = 0;\r\n    \r\n    for (const value of data) {\r\n      const freq = (frequency.get(value) || 0) + 1;\r\n      frequency.set(value, freq);\r\n      maxFreq = Math.max(maxFreq, freq);\r\n    }\r\n    \r\n    const modes: number[] = [];\r\n    for (const [value, freq] of frequency) {\r\n      if (freq === maxFreq) {\r\n        modes.push(value);\r\n      }\r\n    }\r\n    \r\n    return modes;\r\n  }\r\n\r\n  /**\r\n   * Calculate standard deviation\r\n   */\r\n  static standardDeviation(data: number[], sample: boolean = true): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate standard deviation of empty array');\r\n    }\r\n    if (sample && data.length === 1) {\r\n      throw new Error('Cannot calculate sample standard deviation with only one data point');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  /**\r\n   * Calculate variance\r\n   */\r\n  static variance(data: number[], sample: boolean = true): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate variance of empty array');\r\n    }\r\n    if (sample && data.length === 1) {\r\n      throw new Error('Cannot calculate sample variance with only one data point');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    \r\n    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\r\n  }\r\n\r\n  /**\r\n   * Calculate skewness (measure of asymmetry)\r\n   */\r\n  static skewness(data: number[]): number {\r\n    if (data.length < 3) {\r\n      throw new Error('Need at least 3 data points to calculate skewness');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    const n = data.length;\r\n    \r\n    if (std === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    const cubedDeviations = data.map(x => Math.pow((x - mean) / std, 3));\r\n    const sum = cubedDeviations.reduce((a, b) => a + b, 0);\r\n    \r\n    return (n / ((n - 1) * (n - 2))) * sum;\r\n  }\r\n\r\n  /**\r\n   * Calculate kurtosis (measure of tail heaviness)\r\n   */\r\n  static kurtosis(data: number[], excess: boolean = true): number {\r\n    if (data.length < 4) {\r\n      throw new Error('Need at least 4 data points to calculate kurtosis');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    const n = data.length;\r\n    \r\n    if (std === 0) {\r\n      return excess ? -3 : 0;\r\n    }\r\n    \r\n    const fourthMoments = data.map(x => Math.pow((x - mean) / std, 4));\r\n    const sum = fourthMoments.reduce((a, b) => a + b, 0);\r\n    \r\n    const kurtosisValue = (n * (n + 1) / ((n - 1) * (n - 2) * (n - 3))) * sum - \r\n                         (3 * Math.pow(n - 1, 2) / ((n - 2) * (n - 3)));\r\n    \r\n    return excess ? kurtosisValue : kurtosisValue + 3;\r\n  }\r\n\r\n  /**\r\n   * Calculate quantile (percentile)\r\n   */\r\n  static quantile(data: number[], q: number): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate quantile of empty array');\r\n    }\r\n    if (q < 0 || q > 1) {\r\n      throw new Error('Quantile must be between 0 and 1');\r\n    }\r\n    \r\n    const sorted = [...data].sort((a, b) => a - b);\r\n    const index = q * (sorted.length - 1);\r\n    \r\n    if (Number.isInteger(index)) {\r\n      return sorted[index];\r\n    } else {\r\n      const lower = Math.floor(index);\r\n      const upper = Math.ceil(index);\r\n      const weight = index - lower;\r\n      return sorted[lower] * (1 - weight) + sorted[upper] * weight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate interquartile range (IQR)\r\n   */\r\n  static interquartileRange(data: number[]): number {\r\n    const q1 = this.quantile(data, 0.25);\r\n    const q3 = this.quantile(data, 0.75);\r\n    return q3 - q1;\r\n  }\r\n\r\n  /**\r\n   * Detect outliers using IQR method\r\n   */\r\n  static detectOutliers(data: number[], multiplier: number = 1.5): { outliers: number[]; indices: number[] } {\r\n    const q1 = this.quantile(data, 0.25);\r\n    const q3 = this.quantile(data, 0.75);\r\n    const iqr = q3 - q1;\r\n    const lowerBound = q1 - multiplier * iqr;\r\n    const upperBound = q3 + multiplier * iqr;\r\n    \r\n    const outliers: number[] = [];\r\n    const indices: number[] = [];\r\n    \r\n    data.forEach((value, index) => {\r\n      if (value < lowerBound || value > upperBound) {\r\n        outliers.push(value);\r\n        indices.push(index);\r\n      }\r\n    });\r\n    \r\n    return { outliers, indices };\r\n  }\r\n\r\n  /**\r\n   * Calculate z-scores\r\n   */\r\n  static zScores(data: number[]): number[] {\r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    \r\n    if (std === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - mean) / std);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling statistics\r\n   */\r\n  static rollingStatistic(\r\n    data: number[], \r\n    window: number, \r\n    statistic: 'mean' | 'std' | 'var' | 'min' | 'max' | 'median' | 'skewness' | 'kurtosis'\r\n  ): number[] {\r\n    if (window <= 0 || window > data.length) {\r\n      throw new Error('Invalid window size');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const windowData = data.slice(i - window + 1, i + 1);\r\n      \r\n      switch (statistic) {\r\n        case 'mean':\r\n          result.push(this.mean(windowData));\r\n          break;\r\n        case 'std':\r\n          result.push(this.standardDeviation(windowData));\r\n          break;\r\n        case 'var':\r\n          result.push(this.variance(windowData));\r\n          break;\r\n        case 'min':\r\n          result.push(Math.min(...windowData));\r\n          break;\r\n        case 'max':\r\n          result.push(Math.max(...windowData));\r\n          break;\r\n        case 'median':\r\n          result.push(this.median(windowData));\r\n          break;\r\n        case 'skewness':\r\n          result.push(windowData.length >= 3 ? this.skewness(windowData) : 0);\r\n          break;\r\n        case 'kurtosis':\r\n          result.push(windowData.length >= 4 ? this.kurtosis(windowData) : 0);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown statistic: ${statistic}`);\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate Value at Risk (VaR)\r\n   */\r\n  static valueAtRisk(returns: number[], confidenceLevel: number = 0.95): number {\r\n    if (confidenceLevel <= 0 || confidenceLevel >= 1) {\r\n      throw new Error('Confidence level must be between 0 and 1');\r\n    }\r\n    \r\n    return -this.quantile(returns, 1 - confidenceLevel);\r\n  }\r\n\r\n  /**\r\n   * Calculate Expected Shortfall (Conditional VaR)\r\n   */\r\n  static expectedShortfall(returns: number[], confidenceLevel: number = 0.95): number {\r\n    const varValue = this.valueAtRisk(returns, confidenceLevel);\r\n    const tailReturns = returns.filter(r => r <= -varValue);\r\n    \r\n    if (tailReturns.length === 0) {\r\n      return varValue;\r\n    }\r\n    \r\n    return -this.mean(tailReturns);\r\n  }\r\n\r\n  /**\r\n   * Calculate maximum drawdown\r\n   */\r\n  static maxDrawdown(cumulativeReturns: number[]): { maxDrawdown: number; peak: number; trough: number } {\r\n    if (cumulativeReturns.length === 0) {\r\n      throw new Error('Cannot calculate max drawdown of empty array');\r\n    }\r\n    \r\n    let peak = cumulativeReturns[0];\r\n    let maxDrawdown = 0;\r\n    let peakIndex = 0;\r\n    let troughIndex = 0;\r\n    \r\n    for (let i = 1; i < cumulativeReturns.length; i++) {\r\n      if (cumulativeReturns[i] > peak) {\r\n        peak = cumulativeReturns[i];\r\n        peakIndex = i;\r\n      }\r\n      \r\n      const drawdown = (peak - cumulativeReturns[i]) / peak;\r\n      if (drawdown > maxDrawdown) {\r\n        maxDrawdown = drawdown;\r\n        troughIndex = i;\r\n      }\r\n    }\r\n    \r\n    return {\r\n      maxDrawdown,\r\n      peak: peakIndex,\r\n      trough: troughIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate Sharpe ratio\r\n   */\r\n  static sharpeRatio(returns: number[], riskFreeRate: number = 0): number {\r\n    const excessReturns = returns.map(r => r - riskFreeRate);\r\n    const meanExcessReturn = this.mean(excessReturns);\r\n    const std = this.standardDeviation(excessReturns);\r\n    \r\n    if (std === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : (meanExcessReturn < 0 ? -Infinity : 0);\r\n    }\r\n    \r\n    return meanExcessReturn / std;\r\n  }\r\n\r\n  /**\r\n   * Calculate Sortino ratio\r\n   */\r\n  static sortinoRatio(returns: number[], riskFreeRate: number = 0, targetReturn: number = 0): number {\r\n    const excessReturns = returns.map(r => r - riskFreeRate);\r\n    const meanExcessReturn = this.mean(excessReturns);\r\n    \r\n    const downsideReturns = returns.filter(r => r < targetReturn);\r\n    if (downsideReturns.length === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    const downsideDeviation = Math.sqrt(\r\n      downsideReturns.reduce((sum, r) => sum + Math.pow(r - targetReturn, 2), 0) / downsideReturns.length\r\n    );\r\n    \r\n    if (downsideDeviation === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    return meanExcessReturn / downsideDeviation;\r\n  }\r\n\r\n  /**\r\n   * Calculate Calmar ratio\r\n   */\r\n  static calmarRatio(returns: number[]): number {\r\n    const cumulativeReturns = this.cumulativeSum(returns);\r\n    const totalReturn = cumulativeReturns[cumulativeReturns.length - 1];\r\n    const { maxDrawdown } = this.maxDrawdown(cumulativeReturns);\r\n    \r\n    if (maxDrawdown === 0) {\r\n      return totalReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    return totalReturn / maxDrawdown;\r\n  }\r\n\r\n  /**\r\n   * Calculate cumulative sum\r\n   */\r\n  static cumulativeSum(data: number[]): number[] {\r\n    const result: number[] = [];\r\n    let sum = 0;\r\n    \r\n    for (const value of data) {\r\n      sum += value;\r\n      result.push(sum);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate cumulative product\r\n   */\r\n  static cumulativeProduct(data: number[]): number[] {\r\n    const result: number[] = [];\r\n    let product = 1;\r\n    \r\n    for (const value of data) {\r\n      product *= (1 + value);\r\n      result.push(product - 1);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate sum\r\n   */\r\n  static sum(data: number[]): number {\r\n    return data.reduce((sum, value) => sum + value, 0);\r\n  }\r\n\r\n  /**\r\n   * Calculate product\r\n   */\r\n  static product(data: number[]): number {\r\n    return data.reduce((product, value) => product * value, 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate range (max - min)\r\n   */\r\n  static range(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate range of empty array');\r\n    }\r\n    return Math.max(...data) - Math.min(...data);\r\n  }\r\n\r\n  /**\r\n   * Calculate coefficient of variation\r\n   */\r\n  static coefficientOfVariation(data: number[]): number {\r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    \r\n    if (mean === 0) {\r\n      throw new Error('Cannot calculate coefficient of variation when mean is zero');\r\n    }\r\n    \r\n    return std / Math.abs(mean);\r\n  }\r\n\r\n  /**\r\n   * Perform Jarque-Bera test for normality\r\n   */\r\n  static jarqueBeraTest(data: number[]): { statistic: number; pValue: number; isNormal: boolean } {\r\n    if (data.length < 4) {\r\n      throw new Error('Need at least 4 data points for Jarque-Bera test');\r\n    }\r\n    \r\n    const n = data.length;\r\n    const skew = this.skewness(data);\r\n    const kurt = this.kurtosis(data, true); // excess kurtosis\r\n    \r\n    const jb = (n / 6) * (Math.pow(skew, 2) + Math.pow(kurt, 2) / 4);\r\n    \r\n    // Approximate p-value using chi-square distribution with 2 degrees of freedom\r\n    // This is a simplified approximation\r\n    const pValue = 1 - this.chiSquareCDF(jb, 2);\r\n    \r\n    return {\r\n      statistic: jb,\r\n      pValue,\r\n      isNormal: pValue > 0.05 // 5% significance level\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Approximate chi-square CDF (simplified implementation)\r\n   */\r\n  private static chiSquareCDF(x: number, df: number): number {\r\n    if (x <= 0) return 0;\r\n    if (df === 2) {\r\n      return 1 - Math.exp(-x / 2);\r\n    }\r\n    // For other degrees of freedom, use a simple approximation\r\n    // In a production environment, you'd want a more accurate implementation\r\n    return Math.min(1, x / (2 * df));\r\n  }\r\n\r\n  /**\r\n   * Calculate autocorrelation at given lag\r\n   */\r\n  static autocorrelation(data: number[], lag: number): number {\r\n    if (lag >= data.length || lag < 0) {\r\n      throw new Error('Invalid lag for autocorrelation calculation');\r\n    }\r\n    \r\n    const n = data.length - lag;\r\n    const x1 = data.slice(0, n);\r\n    const x2 = data.slice(lag, lag + n);\r\n    \r\n    const mean1 = this.mean(x1);\r\n    const mean2 = this.mean(x2);\r\n    \r\n    let numerator = 0;\r\n    let denominator1 = 0;\r\n    let denominator2 = 0;\r\n    \r\n    for (let i = 0; i < n; i++) {\r\n      const diff1 = x1[i] - mean1;\r\n      const diff2 = x2[i] - mean2;\r\n      numerator += diff1 * diff2;\r\n      denominator1 += diff1 * diff1;\r\n      denominator2 += diff2 * diff2;\r\n    }\r\n    \r\n    const denominator = Math.sqrt(denominator1 * denominator2);\r\n    \r\n    if (denominator === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    return numerator / denominator;\r\n  }\r\n\r\n  /**\r\n   * Calculate multiple autocorrelations\r\n   */\r\n  static autocorrelationFunction(data: number[], maxLag: number): number[] {\r\n    const result: number[] = [];\r\n    \r\n    for (let lag = 0; lag <= maxLag; lag++) {\r\n      if (lag === 0) {\r\n        result.push(1); // Autocorrelation at lag 0 is always 1\r\n      } else {\r\n        result.push(this.autocorrelation(data, lag));\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n}","/**\r\n * Mathematical Utilities\r\n * \r\n * Core mathematical functions and utilities for financial calculations.\r\n */\r\n\r\n/**\r\n * Mathematical utility functions\r\n */\r\nexport class MathUtils {\r\n  /**\r\n   * Calculate the natural logarithm with safety checks\r\n   */\r\n  static safeLog(value: number): number {\r\n    if (value <= 0) {\r\n      throw new Error(`Cannot calculate log of non-positive value: ${value}`);\r\n    }\r\n    return Math.log(value);\r\n  }\r\n\r\n  /**\r\n   * Calculate square root with safety checks\r\n   */\r\n  static safeSqrt(value: number): number {\r\n    if (value < 0) {\r\n      throw new Error(`Cannot calculate square root of negative value: ${value}`);\r\n    }\r\n    return Math.sqrt(value);\r\n  }\r\n\r\n  /**\r\n   * Calculate percentage change between two values\r\n   */\r\n  static percentageChange(oldValue: number, newValue: number): number {\r\n    if (oldValue === 0) {\r\n      return newValue === 0 ? 0 : Infinity;\r\n    }\r\n    return (newValue - oldValue) / Math.abs(oldValue);\r\n  }\r\n\r\n  /**\r\n   * Calculate log returns\r\n   */\r\n  static logReturn(price1: number, price2: number): number {\r\n    if (price1 <= 0 || price2 <= 0) {\r\n      throw new Error('Prices must be positive for log return calculation');\r\n    }\r\n    return Math.log(price2 / price1);\r\n  }\r\n\r\n  /**\r\n   * Calculate simple returns\r\n   */\r\n  static simpleReturn(price1: number, price2: number): number {\r\n    if (price1 === 0) {\r\n      throw new Error('Initial price cannot be zero for simple return calculation');\r\n    }\r\n    return (price2 - price1) / price1;\r\n  }\r\n\r\n  /**\r\n   * Calculate compound annual growth rate (CAGR)\r\n   */\r\n  static cagr(beginValue: number, endValue: number, periods: number): number {\r\n    if (beginValue <= 0 || endValue <= 0) {\r\n      throw new Error('Values must be positive for CAGR calculation');\r\n    }\r\n    if (periods <= 0) {\r\n      throw new Error('Periods must be positive for CAGR calculation');\r\n    }\r\n    return Math.pow(endValue / beginValue, 1 / periods) - 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate annualized return\r\n   */\r\n  static annualizeReturn(totalReturn: number, periods: number, periodsPerYear: number = 252): number {\r\n    return Math.pow(1 + totalReturn, periodsPerYear / periods) - 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate annualized volatility\r\n   */\r\n  static annualizeVolatility(volatility: number, periodsPerYear: number = 252): number {\r\n    return volatility * Math.sqrt(periodsPerYear);\r\n  }\r\n\r\n  /**\r\n   * Linear interpolation\r\n   */\r\n  static linearInterpolate(x0: number, y0: number, x1: number, y1: number, x: number): number {\r\n    if (x1 === x0) {\r\n      return y0;\r\n    }\r\n    return y0 + (y1 - y0) * (x - x0) / (x1 - x0);\r\n  }\r\n\r\n  /**\r\n   * Clamp value between min and max\r\n   */\r\n  static clamp(value: number, min: number, max: number): number {\r\n    return Math.min(Math.max(value, min), max);\r\n  }\r\n\r\n  /**\r\n   * Check if number is approximately equal (within tolerance)\r\n   */\r\n  static isApproximatelyEqual(a: number, b: number, tolerance: number = 1e-10): boolean {\r\n    return Math.abs(a - b) < tolerance;\r\n  }\r\n\r\n  /**\r\n   * Round to specified decimal places\r\n   */\r\n  static roundTo(value: number, decimals: number): number {\r\n    const factor = Math.pow(10, decimals);\r\n    return Math.round(value * factor) / factor;\r\n  }\r\n\r\n  /**\r\n   * Calculate factorial\r\n   */\r\n  static factorial(n: number): number {\r\n    if (n < 0 || !Number.isInteger(n)) {\r\n      throw new Error('Factorial is only defined for non-negative integers');\r\n    }\r\n    if (n === 0 || n === 1) return 1;\r\n    let result = 1;\r\n    for (let i = 2; i <= n; i++) {\r\n      result *= i;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate combination (n choose k)\r\n   */\r\n  static combination(n: number, k: number): number {\r\n    if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\r\n      throw new Error('Invalid parameters for combination calculation');\r\n    }\r\n    if (k === 0 || k === n) return 1;\r\n    \r\n    // Use the more efficient formula: C(n,k) = n! / (k! * (n-k)!)\r\n    // But calculate it iteratively to avoid large factorials\r\n    let result = 1;\r\n    for (let i = 0; i < k; i++) {\r\n      result = result * (n - i) / (i + 1);\r\n    }\r\n    return Math.round(result);\r\n  }\r\n\r\n  /**\r\n   * Calculate permutation (n P k)\r\n   */\r\n  static permutation(n: number, k: number): number {\r\n    if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\r\n      throw new Error('Invalid parameters for permutation calculation');\r\n    }\r\n    let result = 1;\r\n    for (let i = 0; i < k; i++) {\r\n      result *= (n - i);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate greatest common divisor\r\n   */\r\n  static gcd(a: number, b: number): number {\r\n    a = Math.abs(Math.floor(a));\r\n    b = Math.abs(Math.floor(b));\r\n    while (b !== 0) {\r\n      const temp = b;\r\n      b = a % b;\r\n      a = temp;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /**\r\n   * Calculate least common multiple\r\n   */\r\n  static lcm(a: number, b: number): number {\r\n    return Math.abs(a * b) / this.gcd(a, b);\r\n  }\r\n\r\n  /**\r\n   * Generate array of numbers from start to end with step\r\n   */\r\n  static range(start: number, end: number, step: number = 1): number[] {\r\n    const result: number[] = [];\r\n    if (step > 0) {\r\n      for (let i = start; i < end; i += step) {\r\n        result.push(i);\r\n      }\r\n    } else if (step < 0) {\r\n      for (let i = start; i > end; i += step) {\r\n        result.push(i);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate linearly spaced array\r\n   */\r\n  static linspace(start: number, end: number, num: number): number[] {\r\n    if (num <= 0) {\r\n      throw new Error('Number of points must be positive');\r\n    }\r\n    if (num === 1) {\r\n      return [start];\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    const step = (end - start) / (num - 1);\r\n    for (let i = 0; i < num; i++) {\r\n      result.push(start + i * step);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate logarithmically spaced array\r\n   */\r\n  static logspace(start: number, end: number, num: number, base: number = 10): number[] {\r\n    const linearPoints = this.linspace(start, end, num);\r\n    return linearPoints.map(x => Math.pow(base, x));\r\n  }\r\n\r\n  /**\r\n   * Calculate moving average\r\n   */\r\n  static movingAverage(data: number[], window: number): number[] {\r\n    if (window <= 0 || window > data.length) {\r\n      throw new Error('Invalid window size for moving average');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const sum = data.slice(i - window + 1, i + 1).reduce((a, b) => a + b, 0);\r\n      result.push(sum / window);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate exponential moving average\r\n   */\r\n  static exponentialMovingAverage(data: number[], alpha: number): number[] {\r\n    if (alpha <= 0 || alpha > 1) {\r\n      throw new Error('Alpha must be between 0 and 1 for EMA calculation');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    let ema = data[0];\r\n    result.push(ema);\r\n    \r\n    for (let i = 1; i < data.length; i++) {\r\n      ema = alpha * data[i] + (1 - alpha) * ema;\r\n      result.push(ema);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate weighted moving average\r\n   */\r\n  static weightedMovingAverage(data: number[], weights: number[]): number[] {\r\n    if (weights.length === 0) {\r\n      throw new Error('Weights array cannot be empty');\r\n    }\r\n    \r\n    const window = weights.length;\r\n    const weightSum = weights.reduce((a, b) => a + b, 0);\r\n    \r\n    if (Math.abs(weightSum) < 1e-10) {\r\n      throw new Error('Sum of weights cannot be zero');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < data.length; i++) {\r\n      let weightedSum = 0;\r\n      for (let j = 0; j < window; j++) {\r\n        weightedSum += data[i - window + 1 + j] * weights[j];\r\n      }\r\n      result.push(weightedSum / weightSum);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling correlation\r\n   */\r\n  static rollingCorrelation(x: number[], y: number[], window: number): number[] {\r\n    if (x.length !== y.length) {\r\n      throw new Error('Arrays must have the same length for correlation calculation');\r\n    }\r\n    if (window <= 1 || window > x.length) {\r\n      throw new Error('Invalid window size for rolling correlation');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < x.length; i++) {\r\n      const xWindow = x.slice(i - window + 1, i + 1);\r\n      const yWindow = y.slice(i - window + 1, i + 1);\r\n      \r\n      const correlation = this.correlation(xWindow, yWindow);\r\n      result.push(correlation);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate Pearson correlation coefficient\r\n   */\r\n  static correlation(x: number[], y: number[]): number {\r\n    if (x.length !== y.length || x.length === 0) {\r\n      throw new Error('Arrays must have the same non-zero length for correlation calculation');\r\n    }\r\n    \r\n    const n = x.length;\r\n    const sumX = x.reduce((a, b) => a + b, 0);\r\n    const sumY = y.reduce((a, b) => a + b, 0);\r\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\r\n    const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\r\n    const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);\r\n    \r\n    const numerator = n * sumXY - sumX * sumY;\r\n    const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\r\n    \r\n    if (Math.abs(denominator) < 1e-10) {\r\n      return 0; // No correlation when denominator is zero\r\n    }\r\n    \r\n    return numerator / denominator;\r\n  }\r\n\r\n  /**\r\n   * Calculate covariance\r\n   */\r\n  static covariance(x: number[], y: number[]): number {\r\n    if (x.length !== y.length || x.length === 0) {\r\n      throw new Error('Arrays must have the same non-zero length for covariance calculation');\r\n    }\r\n    \r\n    const n = x.length;\r\n    const meanX = x.reduce((a, b) => a + b, 0) / n;\r\n    const meanY = y.reduce((a, b) => a + b, 0) / n;\r\n    \r\n    let covar = 0;\r\n    for (let i = 0; i < n; i++) {\r\n      covar += (x[i] - meanX) * (y[i] - meanY);\r\n    }\r\n    \r\n    return covar / (n - 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate beta coefficient\r\n   */\r\n  static beta(returns: number[], marketReturns: number[]): number {\r\n    const covar = this.covariance(returns, marketReturns);\r\n    const marketVariance = this.variance(marketReturns);\r\n    \r\n    if (Math.abs(marketVariance) < 1e-10) {\r\n      throw new Error('Market variance is zero, cannot calculate beta');\r\n    }\r\n    \r\n    return covar / marketVariance;\r\n  }\r\n\r\n  /**\r\n   * Calculate variance\r\n   */\r\n  static variance(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate variance of empty array');\r\n    }\r\n    \r\n    const mean = data.reduce((a, b) => a + b, 0) / data.length;\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    return squaredDiffs.reduce((a, b) => a + b, 0) / (data.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Normalize array to [0, 1] range\r\n   */\r\n  static normalize(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    const min = Math.min(...data);\r\n    const max = Math.max(...data);\r\n    const range = max - min;\r\n    \r\n    if (range === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - min) / range);\r\n  }\r\n\r\n  /**\r\n   * Standardize array (z-score normalization)\r\n   */\r\n  static standardize(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    const mean = data.reduce((a, b) => a + b, 0) / data.length;\r\n    const std = Math.sqrt(this.variance(data));\r\n    \r\n    if (std === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - mean) / std);\r\n  }\r\n}","/**\r\n * Default Configuration\r\n * \r\n * Default settings and constants for the MeridianAlgo-JS library.\r\n */\r\n\r\nimport { PredictorOptions } from '../types/Prediction';\r\nimport { FeatureOptions } from '../types/Features';\r\nimport { OptimizerOptions } from '../types/Portfolio';\r\n\r\n/**\r\n * Default predictor configuration\r\n */\r\nexport const DEFAULT_PREDICTOR_OPTIONS: Required<PredictorOptions> = {\r\n  targetErrorRate: 0.01,\r\n  ensembleSize: 10,\r\n  featureCount: 1000,\r\n  trainingRatio: 0.8,\r\n  crossValidationFolds: 5,\r\n  hyperparameterTuning: true,\r\n  parallelProcessing: true,\r\n  cacheFeatures: true,\r\n  incrementalLearning: false,\r\n  updateFrequency: 'batch',\r\n  predictionHorizon: 1,\r\n  confidenceThreshold: 0.8\r\n};\r\n\r\n/**\r\n * Default feature engineering configuration\r\n */\r\nexport const DEFAULT_FEATURE_OPTIONS: Required<FeatureOptions> = {\r\n  targetFeatureCount: 1000,\r\n  enableAdvancedFeatures: true,\r\n  enableMicrostructure: true,\r\n  enableVolatilityFeatures: true,\r\n  enableStatisticalFeatures: true,\r\n  enableHarmonicFeatures: true,\r\n  enableCrossAssetFeatures: false,\r\n  lookbackPeriods: [5, 10, 20, 50, 100, 200],\r\n  technicalIndicators: {\r\n    rsi: { periods: [7, 14, 21, 28] },\r\n    macd: { fast: 12, slow: 26, signal: 9 },\r\n    bollinger: { period: 20, multiplier: 2 },\r\n    stochastic: { kPeriod: 14, dPeriod: 3 },\r\n    williams: { period: 14 },\r\n    cci: { period: 20 }\r\n  }\r\n};\r\n\r\n/**\r\n * Default portfolio optimizer configuration\r\n */\r\nexport const DEFAULT_OPTIMIZER_OPTIONS: OptimizerOptions = {\r\n  objective: 'sharpe',\r\n  constraints: {\r\n    minWeight: 0.0,\r\n    maxWeight: 1.0,\r\n    minTotalWeight: 0.99,\r\n    maxTotalWeight: 1.01,\r\n    longOnly: true\r\n  },\r\n  riskModel: 'historical',\r\n  optimizationMethod: 'quadratic',\r\n  rebalanceFrequency: 'monthly'\r\n};\r\n\r\n/**\r\n * Default library configuration\r\n */\r\nexport const DEFAULT_CONFIG = {\r\n  predictor: DEFAULT_PREDICTOR_OPTIONS,\r\n  features: DEFAULT_FEATURE_OPTIONS,\r\n  optimizer: DEFAULT_OPTIMIZER_OPTIONS,\r\n  \r\n  // Performance settings\r\n  performance: {\r\n    enableParallelProcessing: true,\r\n    maxWorkers: 4,\r\n    cacheSize: 1000,\r\n    memoryLimit: 512 * 1024 * 1024, // 512MB\r\n    enableProfiling: false\r\n  },\r\n  \r\n  // Validation settings\r\n  validation: {\r\n    strictMode: true,\r\n    autoSanitize: true,\r\n    warningsAsErrors: false\r\n  },\r\n  \r\n  // Logging settings\r\n  logging: {\r\n    level: 'info',\r\n    enableConsole: true,\r\n    enableFile: false,\r\n    maxLogSize: 10 * 1024 * 1024 // 10MB\r\n  }\r\n};\r\n\r\n/**\r\n * Mathematical constants\r\n */\r\nexport const MATH_CONSTANTS = {\r\n  EPSILON: 1e-10,\r\n  PI: Math.PI,\r\n  E: Math.E,\r\n  GOLDEN_RATIO: (1 + Math.sqrt(5)) / 2,\r\n  SQRT_2: Math.sqrt(2),\r\n  SQRT_PI: Math.sqrt(Math.PI)\r\n};\r\n\r\n/**\r\n * Financial constants\r\n */\r\nexport const FINANCIAL_CONSTANTS = {\r\n  TRADING_DAYS_PER_YEAR: 252,\r\n  CALENDAR_DAYS_PER_YEAR: 365,\r\n  HOURS_PER_TRADING_DAY: 6.5,\r\n  MINUTES_PER_TRADING_DAY: 390,\r\n  SECONDS_PER_TRADING_DAY: 23400,\r\n  \r\n  // Risk-free rates (approximate)\r\n  US_TREASURY_10Y: 0.04, // 4%\r\n  US_TREASURY_3M: 0.035,  // 3.5%\r\n  \r\n  // Market benchmarks\r\n  SP500_ANNUAL_RETURN: 0.10,    // 10%\r\n  SP500_ANNUAL_VOLATILITY: 0.16, // 16%\r\n  \r\n  // Common thresholds\r\n  OVERBOUGHT_RSI: 70,\r\n  OVERSOLD_RSI: 30,\r\n  HIGH_VOLATILITY_THRESHOLD: 0.25, // 25%\r\n  LOW_VOLATILITY_THRESHOLD: 0.10   // 10%\r\n};\r\n\r\n/**\r\n * Data validation constants\r\n */\r\nexport const VALIDATION_CONSTANTS = {\r\n  MIN_DATA_POINTS: 50,\r\n  MAX_MISSING_DATA_RATIO: 0.05, // 5%\r\n  MAX_OUTLIER_RATIO: 0.02,       // 2%\r\n  \r\n  // Price validation\r\n  MAX_DAILY_RETURN: 0.50,        // 50%\r\n  MIN_PRICE: 0.001,\r\n  MAX_PRICE: 1000000,\r\n  \r\n  // Volume validation\r\n  MIN_VOLUME: 0,\r\n  MAX_VOLUME_SPIKE: 10, // 10x average volume\r\n  \r\n  // Time validation\r\n  MAX_TIME_GAP_HOURS: 72, // 3 days\r\n  MIN_TIME_INTERVAL_MS: 1000 // 1 second\r\n};\r\n\r\n/**\r\n * Performance benchmarks\r\n */\r\nexport const PERFORMANCE_BENCHMARKS = {\r\n  // Target processing times (milliseconds)\r\n  FEATURE_GENERATION_TARGET: 100,\r\n  PREDICTION_TARGET: 10,\r\n  PORTFOLIO_OPTIMIZATION_TARGET: 1000,\r\n  \r\n  // Memory usage targets (bytes)\r\n  MAX_FEATURE_MATRIX_SIZE: 100 * 1024 * 1024, // 100MB\r\n  MAX_MODEL_SIZE: 50 * 1024 * 1024,           // 50MB\r\n  \r\n  // Accuracy targets\r\n  MIN_PREDICTION_ACCURACY: 0.55,  // 55%\r\n  TARGET_PREDICTION_ACCURACY: 0.65, // 65%\r\n  EXCELLENT_PREDICTION_ACCURACY: 0.75 // 75%\r\n};\r\n\r\n/**\r\n * Error codes and messages\r\n */\r\nexport const ERROR_CODES = {\r\n  // Data errors\r\n  INVALID_DATA: 'INVALID_DATA',\r\n  INSUFFICIENT_DATA: 'INSUFFICIENT_DATA',\r\n  MISSING_DATA: 'MISSING_DATA',\r\n  \r\n  // Model errors\r\n  MODEL_NOT_TRAINED: 'MODEL_NOT_TRAINED',\r\n  TRAINING_FAILED: 'TRAINING_FAILED',\r\n  PREDICTION_FAILED: 'PREDICTION_FAILED',\r\n  \r\n  // Configuration errors\r\n  INVALID_CONFIG: 'INVALID_CONFIG',\r\n  MISSING_CONFIG: 'MISSING_CONFIG',\r\n  \r\n  // Performance errors\r\n  MEMORY_LIMIT_EXCEEDED: 'MEMORY_LIMIT_EXCEEDED',\r\n  TIMEOUT_EXCEEDED: 'TIMEOUT_EXCEEDED',\r\n  \r\n  // Portfolio errors\r\n  OPTIMIZATION_FAILED: 'OPTIMIZATION_FAILED',\r\n  INVALID_WEIGHTS: 'INVALID_WEIGHTS',\r\n  CONSTRAINT_VIOLATION: 'CONSTRAINT_VIOLATION'\r\n};\r\n\r\n/**\r\n * Feature categories\r\n */\r\nexport const FEATURE_CATEGORIES = {\r\n  TECHNICAL: 'technical',\r\n  STATISTICAL: 'statistical',\r\n  MICROSTRUCTURE: 'microstructure',\r\n  VOLATILITY: 'volatility',\r\n  HARMONIC: 'harmonic',\r\n  CROSS_ASSET: 'cross_asset',\r\n  SENTIMENT: 'sentiment',\r\n  FUNDAMENTAL: 'fundamental'\r\n};\r\n\r\n/**\r\n * Model types\r\n */\r\nexport const MODEL_TYPES = {\r\n  RANDOM_FOREST: 'randomForest',\r\n  NEURAL_NETWORK: 'neuralNetwork',\r\n  SVM: 'svm',\r\n  GRADIENT_BOOSTING: 'gradientBoosting',\r\n  LINEAR_REGRESSION: 'linearRegression',\r\n  ENSEMBLE: 'ensemble'\r\n};\r\n\r\n/**\r\n * Optimization objectives\r\n */\r\nexport const OPTIMIZATION_OBJECTIVES = {\r\n  SHARPE: 'sharpe',\r\n  RETURN: 'return',\r\n  RISK: 'risk',\r\n  SORTINO: 'sortino',\r\n  CALMAR: 'calmar',\r\n  CUSTOM: 'custom'\r\n};\r\n\r\n/**\r\n * Rebalancing frequencies\r\n */\r\nexport const REBALANCE_FREQUENCIES = {\r\n  DAILY: 'daily',\r\n  WEEKLY: 'weekly',\r\n  MONTHLY: 'monthly',\r\n  QUARTERLY: 'quarterly',\r\n  ANNUALLY: 'annually',\r\n  THRESHOLD: 'threshold'\r\n};\r\n\r\n/**\r\n * Market regimes\r\n */\r\nexport const MARKET_REGIMES = {\r\n  BULL: 'bull',\r\n  BEAR: 'bear',\r\n  SIDEWAYS: 'sideways',\r\n  VOLATILE: 'volatile',\r\n  CALM: 'calm'\r\n};\r\n\r\n/**\r\n * Risk levels\r\n */\r\nexport const RISK_LEVELS = {\r\n  LOW: 'low',\r\n  MEDIUM: 'medium',\r\n  HIGH: 'high',\r\n  EXTREME: 'extreme'\r\n};\r\n\r\n/**\r\n * Alert severities\r\n */\r\nexport const ALERT_SEVERITIES = {\r\n  LOW: 'low',\r\n  MEDIUM: 'medium',\r\n  HIGH: 'high',\r\n  CRITICAL: 'critical'\r\n};","/**\r\n * Ultra-Precision Predictor\r\n * \r\n * Advanced ensemble predictor targeting sub-1% error rates through\r\n * sophisticated feature engineering and model combination.\r\n */\r\n\r\nimport { PredictorOptions, TrainingData, PredictionResult, ModelMetrics, TrainingResults } from '../types/Prediction';\r\nimport { MarketData } from '../types/MarketData';\r\nimport { ValidationUtils } from '../utils/ValidationUtils';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { DEFAULT_PREDICTOR_OPTIONS } from '../config/defaults';\r\n\r\n/**\r\n * Ultra-precision predictor implementation\r\n */\r\nexport class UltraPrecisionPredictor {\r\n  private options: Required<PredictorOptions>;\r\n  private models: any[] = [];\r\n  private isTrained: boolean = false;\r\n  private featureImportance: number[] = [];\r\n  private trainingMetrics: ModelMetrics | null = null;\r\n  private lastConfidence: number = 0;\r\n  private modelWeights: number[] = [];\r\n\r\n  constructor(options: Partial<PredictorOptions> = {}) {\r\n    this.options = {\r\n      ...DEFAULT_PREDICTOR_OPTIONS,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Train the ultra-precision predictor\r\n   */\r\n  async train(data: TrainingData[]): Promise<TrainingResults> {\r\n    console.log(`🚀 Training Ultra-Precision Predictor with ${data.length} samples...`);\r\n    \r\n    // Validate training data\r\n    const validation = ValidationUtils.validateTrainingData(data);\r\n    if (!validation.isValid) {\r\n      throw new Error(`Training data validation failed: ${validation.errors.map(e => e.message).join(', ')}`);\r\n    }\r\n\r\n    // Prepare features and targets\r\n    const { features, targets } = this.prepareTrainingData(data);\r\n    console.log(`✨ Prepared ${features.length} samples with ${features[0]?.length || 0} features`);\r\n\r\n    // Split data for training and validation\r\n    const { trainX, trainY, testX, testY } = this.splitData(features, targets);\r\n\r\n    // Train ensemble of models\r\n    const startTime = Date.now();\r\n    await this.trainEnsemble(trainX, trainY);\r\n    const trainingTime = Date.now() - startTime;\r\n\r\n    // Validate performance\r\n    const predictions = await this.predictBatch(testX);\r\n    this.trainingMetrics = this.calculateMetrics(predictions, testY);\r\n\r\n    // Calculate feature importance\r\n    this.calculateFeatureImportance(features[0]?.length || 0);\r\n\r\n    console.log(`📊 Training completed in ${trainingTime}ms:`);\r\n    console.log(`   MAE: ${(this.trainingMetrics.mae * 100).toFixed(3)}%`);\r\n    console.log(`   RMSE: ${(this.trainingMetrics.rmse * 100).toFixed(3)}%`);\r\n    console.log(`   R²: ${this.trainingMetrics.r2.toFixed(4)}`);\r\n    console.log(`   Directional Accuracy: ${(this.trainingMetrics.directionalAccuracy * 100).toFixed(1)}%`);\r\n\r\n    this.isTrained = true;\r\n\r\n    // Check if we achieved target error rate\r\n    if (this.trainingMetrics.mae <= this.options.targetErrorRate) {\r\n      console.log(`🎯 Target error rate achieved: ${(this.trainingMetrics.mae * 100).toFixed(3)}% <= ${(this.options.targetErrorRate * 100).toFixed(1)}%`);\r\n    } else {\r\n      console.log(`⚠️  Target error rate not achieved. Consider increasing ensemble size or feature count.`);\r\n    }\r\n\r\n    return {\r\n      trainingMetrics: this.trainingMetrics,\r\n      validationMetrics: this.trainingMetrics, // Same for now\r\n      trainingTime,\r\n      featureCount: features[0]?.length || 0,\r\n      featureImportance: [...this.featureImportance]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Make ultra-precise prediction\r\n   */\r\n  async predict(features: number[]): Promise<number> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Model must be trained before making predictions');\r\n    }\r\n\r\n    const validation = ValidationUtils.validateFeatures(features);\r\n    if (!validation.isValid) {\r\n      throw new Error(`Feature validation failed: ${validation.errors.map(e => e.message).join(', ')}`);\r\n    }\r\n\r\n    // Get ensemble predictions\r\n    const predictions = this.models.map((model, index) => {\r\n      try {\r\n        return this.predictWithModel(model, features, index);\r\n      } catch (error) {\r\n        console.warn(`Model ${index} prediction failed:`, error);\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    // Calculate weighted average with confidence\r\n    const weightedPrediction = this.combinepredictions(predictions);\r\n    \r\n    // Calculate prediction confidence\r\n    this.lastConfidence = this.calculatePredictionConfidence(predictions);\r\n\r\n    return weightedPrediction;\r\n  }\r\n\r\n  /**\r\n   * Batch prediction for multiple samples\r\n   */\r\n  async predictBatch(featuresMatrix: number[][]): Promise<number[]> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Model must be trained before making predictions');\r\n    }\r\n\r\n    const predictions: number[] = [];\r\n    \r\n    for (const features of featuresMatrix) {\r\n      const prediction = await this.predict(features);\r\n      predictions.push(prediction);\r\n    }\r\n\r\n    return predictions;\r\n  }\r\n\r\n  /**\r\n   * Get prediction confidence (0-1)\r\n   */\r\n  getConfidence(): number {\r\n    return this.lastConfidence;\r\n  }\r\n\r\n  /**\r\n   * Get feature importance scores\r\n   */\r\n  getFeatureImportance(): number[] {\r\n    return [...this.featureImportance];\r\n  }\r\n\r\n  /**\r\n   * Get training metrics\r\n   */\r\n  getTrainingMetrics(): ModelMetrics | null {\r\n    return this.trainingMetrics;\r\n  }\r\n\r\n  /**\r\n   * Check if model is trained\r\n   */\r\n  isModelTrained(): boolean {\r\n    return this.isTrained;\r\n  }\r\n\r\n  /**\r\n   * Save model to JSON string\r\n   */\r\n  async saveModel(): Promise<string> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Cannot save untrained model');\r\n    }\r\n\r\n    const modelData = {\r\n      version: '2.0.0',\r\n      options: this.options,\r\n      models: this.models.map(model => this.serializeModel(model)),\r\n      modelWeights: this.modelWeights,\r\n      featureImportance: this.featureImportance,\r\n      trainingMetrics: this.trainingMetrics,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return JSON.stringify(modelData, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Load model from JSON string\r\n   */\r\n  async loadModel(modelJson: string): Promise<void> {\r\n    try {\r\n      const modelData = JSON.parse(modelJson);\r\n      \r\n      this.options = { ...this.options, ...modelData.options };\r\n      this.modelWeights = modelData.modelWeights || [];\r\n      this.featureImportance = modelData.featureImportance || [];\r\n      this.trainingMetrics = modelData.trainingMetrics;\r\n      \r\n      // Reconstruct models\r\n      this.models = modelData.models.map((serializedModel: any) => \r\n        this.deserializeModel(serializedModel)\r\n      );\r\n      \r\n      this.isTrained = this.models.length > 0;\r\n      \r\n      console.log(`✅ Model loaded successfully (${this.models.length} ensemble models)`);\r\n    } catch (error) {\r\n      throw new Error(`Failed to load model: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare training data from raw data\r\n   */\r\n  private prepareTrainingData(data: TrainingData[]): { features: number[][]; targets: number[] } {\r\n    const features: number[][] = [];\r\n    const targets: number[] = [];\r\n\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      const current = data[i];\r\n      const next = data[i + 1];\r\n\r\n      // Use provided features or generate basic ones\r\n      let featureVector: number[];\r\n      if (current.features && current.features.length > 0) {\r\n        featureVector = current.features;\r\n      } else {\r\n        // Generate basic features from OHLCV data\r\n        featureVector = this.generateBasicFeatures(data, i);\r\n      }\r\n\r\n      // Calculate target (next period return)\r\n      const target = current.target !== undefined ? \r\n        current.target : \r\n        (next.close - current.close) / current.close;\r\n\r\n      if (featureVector.length > 0 && isFinite(target)) {\r\n        features.push(featureVector);\r\n        targets.push(target);\r\n      }\r\n    }\r\n\r\n    return { features, targets };\r\n  }\r\n\r\n  /**\r\n   * Generate basic features from OHLCV data\r\n   */\r\n  private generateBasicFeatures(data: TrainingData[], index: number): number[] {\r\n    const features: number[] = [];\r\n    const current = data[index];\r\n    \r\n    // Basic price features\r\n    features.push(\r\n      (current.high - current.low) / current.close, // High-low range\r\n      (current.close - current.open) / current.open, // Open-close return\r\n      current.volume / 1000000 // Normalized volume\r\n    );\r\n\r\n    // Simple moving averages (if enough history)\r\n    const lookbacks = [5, 10, 20];\r\n    for (const lookback of lookbacks) {\r\n      if (index >= lookback) {\r\n        const prices = data.slice(index - lookback + 1, index + 1).map(d => d.close);\r\n        const sma = StatisticsUtils.mean(prices);\r\n        features.push((current.close - sma) / sma);\r\n      } else {\r\n        features.push(0);\r\n      }\r\n    }\r\n\r\n    // Simple returns (if enough history)\r\n    for (let lag = 1; lag <= 5; lag++) {\r\n      if (index >= lag) {\r\n        const prevClose = data[index - lag].close;\r\n        features.push((current.close - prevClose) / prevClose);\r\n      } else {\r\n        features.push(0);\r\n      }\r\n    }\r\n\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Split data into training and testing sets\r\n   */\r\n  private splitData(features: number[][], targets: number[]) {\r\n    const n = features.length;\r\n    const trainSize = Math.floor(n * this.options.trainingRatio);\r\n    \r\n    const trainX = features.slice(0, trainSize);\r\n    const testX = features.slice(trainSize);\r\n    const trainY = targets.slice(0, trainSize);\r\n    const testY = targets.slice(trainSize);\r\n    \r\n    return { trainX, trainY, testX, testY };\r\n  }\r\n\r\n  /**\r\n   * Train ensemble of models\r\n   */\r\n  private async trainEnsemble(trainX: number[][], trainY: number[]): Promise<void> {\r\n    this.models = [];\r\n    this.modelWeights = [];\r\n\r\n    for (let i = 0; i < this.options.ensembleSize; i++) {\r\n      console.log(`Training model ${i + 1}/${this.options.ensembleSize}...`);\r\n      \r\n      const model = await this.trainSingleModel(trainX, trainY, i);\r\n      const weight = this.calculateModelWeight(model, trainX, trainY);\r\n      \r\n      this.models.push(model);\r\n      this.modelWeights.push(weight);\r\n    }\r\n\r\n    // Normalize weights\r\n    const totalWeight = StatisticsUtils.sum(this.modelWeights);\r\n    if (totalWeight > 0) {\r\n      this.modelWeights = this.modelWeights.map(w => w / totalWeight);\r\n    } else {\r\n      this.modelWeights = new Array(this.models.length).fill(1 / this.models.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Train a single model in the ensemble\r\n   */\r\n  private async trainSingleModel(trainX: number[][], trainY: number[], modelIndex: number): Promise<any> {\r\n    // Bootstrap sampling for diversity\r\n    const { sampledX, sampledY } = this.bootstrapSample(trainX, trainY, modelIndex);\r\n    \r\n    // Simple linear regression model (in production, use more sophisticated models)\r\n    const model = this.trainLinearRegression(sampledX, sampledY);\r\n    \r\n    return {\r\n      type: 'linear',\r\n      coefficients: model.coefficients,\r\n      intercept: model.intercept,\r\n      seed: modelIndex * 42\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Train a simple linear regression model\r\n   */\r\n  private trainLinearRegression(X: number[][], y: number[]): { coefficients: number[]; intercept: number } {\r\n    const n = X.length;\r\n    const p = X[0]?.length || 0;\r\n    \r\n    if (n === 0 || p === 0) {\r\n      return { coefficients: [], intercept: 0 };\r\n    }\r\n\r\n    // Add intercept column\r\n    const XWithIntercept = X.map(row => [1, ...row]);\r\n    \r\n    // Normal equation: β = (X'X)^(-1)X'y\r\n    // Simplified implementation for demonstration\r\n    const coefficients = new Array(p).fill(0);\r\n    let intercept = StatisticsUtils.mean(y);\r\n    \r\n    // Simple gradient descent approximation\r\n    for (let feature = 0; feature < p; feature++) {\r\n      const featureValues = X.map(row => row[feature]);\r\n      const correlation = MathUtils.correlation(featureValues, y);\r\n      coefficients[feature] = correlation * 0.1; // Simplified coefficient\r\n    }\r\n    \r\n    return { coefficients, intercept };\r\n  }\r\n\r\n  /**\r\n   * Bootstrap sampling for ensemble diversity\r\n   */\r\n  private bootstrapSample(X: number[][], y: number[], seed: number): { sampledX: number[][]; sampledY: number[] } {\r\n    const n = X.length;\r\n    const sampledX: number[][] = [];\r\n    const sampledY: number[] = [];\r\n\r\n    // Use seed for reproducible randomness\r\n    let random = seed;\r\n    const nextRandom = () => {\r\n      random = (random * 9301 + 49297) % 233280;\r\n      return random / 233280;\r\n    };\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const randomIndex = Math.floor(nextRandom() * n);\r\n      sampledX.push([...X[randomIndex]]);\r\n      sampledY.push(y[randomIndex]);\r\n    }\r\n\r\n    return { sampledX, sampledY };\r\n  }\r\n\r\n  /**\r\n   * Calculate model weight based on performance\r\n   */\r\n  private calculateModelWeight(model: any, X: number[][], y: number[]): number {\r\n    const predictions = X.map(features => this.predictWithModel(model, features, 0));\r\n    const mse = StatisticsUtils.mean(predictions.map((pred, i) => Math.pow(pred - y[i], 2)));\r\n    \r\n    // Weight inversely proportional to error\r\n    return mse > 0 ? 1 / (1 + mse) : 1;\r\n  }\r\n\r\n  /**\r\n   * Make prediction with a single model\r\n   */\r\n  private predictWithModel(model: any, features: number[], modelIndex: number): number {\r\n    if (model.type === 'linear') {\r\n      let prediction = model.intercept;\r\n      for (let i = 0; i < Math.min(features.length, model.coefficients.length); i++) {\r\n        prediction += features[i] * model.coefficients[i];\r\n      }\r\n      return prediction;\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Combine predictions from ensemble\r\n   */\r\n  private combinepredictions(predictions: number[]): number {\r\n    if (predictions.length === 0) return 0;\r\n    \r\n    // Weighted average\r\n    let weightedSum = 0;\r\n    let totalWeight = 0;\r\n    \r\n    for (let i = 0; i < predictions.length; i++) {\r\n      const weight = this.modelWeights[i] || (1 / predictions.length);\r\n      weightedSum += predictions[i] * weight;\r\n      totalWeight += weight;\r\n    }\r\n    \r\n    return totalWeight > 0 ? weightedSum / totalWeight : StatisticsUtils.mean(predictions);\r\n  }\r\n\r\n  /**\r\n   * Calculate prediction confidence based on ensemble agreement\r\n   */\r\n  private calculatePredictionConfidence(predictions: number[]): number {\r\n    if (predictions.length === 0) return 0;\r\n    \r\n    const mean = StatisticsUtils.mean(predictions);\r\n    const std = StatisticsUtils.standardDeviation(predictions);\r\n    \r\n    // Confidence inversely related to standard deviation\r\n    const normalizedStd = std / (Math.abs(mean) + 1e-8);\r\n    const confidence = Math.max(0, Math.min(1, 1 - normalizedStd));\r\n    \r\n    return confidence;\r\n  }\r\n\r\n  /**\r\n   * Calculate feature importance\r\n   */\r\n  private calculateFeatureImportance(featureCount: number): void {\r\n    // Simplified feature importance calculation\r\n    this.featureImportance = new Array(featureCount).fill(0);\r\n    \r\n    // Calculate average absolute coefficients across models\r\n    for (const model of this.models) {\r\n      if (model.coefficients) {\r\n        for (let i = 0; i < Math.min(featureCount, model.coefficients.length); i++) {\r\n          this.featureImportance[i] += Math.abs(model.coefficients[i]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Normalize\r\n    const total = StatisticsUtils.sum(this.featureImportance);\r\n    if (total > 0) {\r\n      this.featureImportance = this.featureImportance.map(imp => imp / total);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate model performance metrics\r\n   */\r\n  private calculateMetrics(predictions: number[], actual: number[]): ModelMetrics {\r\n    const n = Math.min(predictions.length, actual.length);\r\n    if (n === 0) {\r\n      return {\r\n        mae: 1,\r\n        mse: 1,\r\n        rmse: 1,\r\n        r2: 0,\r\n        directionalAccuracy: 0.5,\r\n        sampleCount: 0\r\n      };\r\n    }\r\n    \r\n    const pred = predictions.slice(0, n);\r\n    const act = actual.slice(0, n);\r\n    \r\n    // Mean Absolute Error\r\n    const mae = StatisticsUtils.mean(pred.map((p, i) => Math.abs(p - act[i])));\r\n    \r\n    // Root Mean Square Error\r\n    const mse = StatisticsUtils.mean(pred.map((p, i) => Math.pow(p - act[i], 2)));\r\n    const rmse = Math.sqrt(mse);\r\n    \r\n    // R-squared\r\n    const actualMean = StatisticsUtils.mean(act);\r\n    const totalSumSquares = StatisticsUtils.sum(act.map(a => Math.pow(a - actualMean, 2)));\r\n    const residualSumSquares = StatisticsUtils.sum(pred.map((p, i) => Math.pow(act[i] - p, 2)));\r\n    const r2 = totalSumSquares > 0 ? 1 - (residualSumSquares / totalSumSquares) : 0;\r\n    \r\n    // Directional Accuracy\r\n    const correctDirections = pred.filter((p, i) => {\r\n      return (p > 0 && act[i] > 0) || (p < 0 && act[i] < 0) || (Math.abs(p) < 1e-8 && Math.abs(act[i]) < 1e-8);\r\n    }).length;\r\n    const directionalAccuracy = correctDirections / n;\r\n    \r\n    return {\r\n      mae,\r\n      mse,\r\n      rmse,\r\n      r2,\r\n      directionalAccuracy,\r\n      sampleCount: n\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Serialize model for saving\r\n   */\r\n  private serializeModel(model: any): any {\r\n    return {\r\n      type: model.type,\r\n      coefficients: model.coefficients,\r\n      intercept: model.intercept,\r\n      seed: model.seed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deserialize model for loading\r\n   */\r\n  private deserializeModel(serializedModel: any): any {\r\n    return {\r\n      type: serializedModel.type,\r\n      coefficients: serializedModel.coefficients || [],\r\n      intercept: serializedModel.intercept || 0,\r\n      seed: serializedModel.seed || 0\r\n    };\r\n  }\r\n}","/**\r\n * Technical Indicators\r\n * \r\n * Comprehensive collection of technical analysis indicators for financial markets.\r\n */\r\n\r\nimport { MarketData } from '../types/MarketData';\r\nimport { MACDResult, BollingerBandsResult, StochasticResult } from '../types/Features';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\n\r\n/**\r\n * Technical indicator calculations\r\n */\r\nexport class TechnicalIndicators {\r\n  /**\r\n   * Simple Moving Average (SMA)\r\n   */\r\n  static sma(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for SMA calculation');\r\n    }\r\n    \r\n    return MathUtils.movingAverage(data, period);\r\n  }\r\n\r\n  /**\r\n   * Exponential Moving Average (EMA)\r\n   */\r\n  static ema(data: number[], period: number): number[] {\r\n    if (period <= 0) {\r\n      throw new Error('Period must be positive for EMA calculation');\r\n    }\r\n    \r\n    const alpha = 2 / (period + 1);\r\n    return MathUtils.exponentialMovingAverage(data, alpha);\r\n  }\r\n\r\n  /**\r\n   * Weighted Moving Average (WMA)\r\n   */\r\n  static wma(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for WMA calculation');\r\n    }\r\n    \r\n    const weights = Array.from({ length: period }, (_, i) => i + 1);\r\n    return MathUtils.weightedMovingAverage(data, weights);\r\n  }\r\n\r\n  /**\r\n   * Relative Strength Index (RSI)\r\n   */\r\n  static rsi(data: number[], period: number = 14): number[] {\r\n    if (period <= 0 || data.length < period + 1) {\r\n      throw new Error('Insufficient data or invalid period for RSI calculation');\r\n    }\r\n    \r\n    const changes: number[] = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      changes.push(data[i] - data[i - 1]);\r\n    }\r\n    \r\n    const gains = changes.map(change => Math.max(change, 0));\r\n    const losses = changes.map(change => Math.max(-change, 0));\r\n    \r\n    const avgGains = this.sma(gains, period);\r\n    const avgLosses = this.sma(losses, period);\r\n    \r\n    const rsiValues: number[] = [];\r\n    for (let i = 0; i < avgGains.length; i++) {\r\n      if (avgLosses[i] === 0) {\r\n        rsiValues.push(100);\r\n      } else {\r\n        const rs = avgGains[i] / avgLosses[i];\r\n        rsiValues.push(100 - (100 / (1 + rs)));\r\n      }\r\n    }\r\n    \r\n    return rsiValues;\r\n  }\r\n\r\n  /**\r\n   * Moving Average Convergence Divergence (MACD)\r\n   */\r\n  static macd(data: number[], fastPeriod: number = 12, slowPeriod: number = 26, signalPeriod: number = 9): MACDResult {\r\n    if (fastPeriod >= slowPeriod) {\r\n      throw new Error('Fast period must be less than slow period for MACD');\r\n    }\r\n    \r\n    const fastEMA = this.ema(data, fastPeriod);\r\n    const slowEMA = this.ema(data, slowPeriod);\r\n    \r\n    // Align arrays (slowEMA is shorter)\r\n    const startIndex = slowPeriod - fastPeriod;\r\n    const alignedFastEMA = fastEMA.slice(startIndex);\r\n    \r\n    const macdLine = alignedFastEMA.map((fast, i) => fast - slowEMA[i]);\r\n    const signalLine = this.ema(macdLine, signalPeriod);\r\n    \r\n    // Align MACD line with signal line\r\n    const alignedMACDLine = macdLine.slice(macdLine.length - signalLine.length);\r\n    const histogram = alignedMACDLine.map((macd, i) => macd - signalLine[i]);\r\n    \r\n    return {\r\n      macd: alignedMACDLine,\r\n      signal: signalLine,\r\n      histogram\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Bollinger Bands\r\n   */\r\n  static bollingerBands(data: number[], period: number = 20, multiplier: number = 2): BollingerBandsResult {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for Bollinger Bands calculation');\r\n    }\r\n    \r\n    const smaValues = this.sma(data, period);\r\n    const upper: number[] = [];\r\n    const lower: number[] = [];\r\n    const bandwidth: number[] = [];\r\n    const percentB: number[] = [];\r\n    \r\n    for (let i = 0; i < smaValues.length; i++) {\r\n      const dataSlice = data.slice(i, i + period);\r\n      const std = StatisticsUtils.standardDeviation(dataSlice);\r\n      \r\n      const upperBand = smaValues[i] + multiplier * std;\r\n      const lowerBand = smaValues[i] - multiplier * std;\r\n      \r\n      upper.push(upperBand);\r\n      lower.push(lowerBand);\r\n      bandwidth.push((upperBand - lowerBand) / smaValues[i]);\r\n      \r\n      const currentPrice = data[i + period - 1];\r\n      percentB.push((currentPrice - lowerBand) / (upperBand - lowerBand));\r\n    }\r\n    \r\n    return {\r\n      upper,\r\n      middle: smaValues,\r\n      lower,\r\n      bandwidth,\r\n      percentB\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stochastic Oscillator\r\n   */\r\n  static stochastic(high: number[], low: number[], close: number[], kPeriod: number = 14, dPeriod: number = 3): StochasticResult {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const k: number[] = [];\r\n    \r\n    for (let i = kPeriod - 1; i < close.length; i++) {\r\n      const highestHigh = Math.max(...high.slice(i - kPeriod + 1, i + 1));\r\n      const lowestLow = Math.min(...low.slice(i - kPeriod + 1, i + 1));\r\n      \r\n      if (highestHigh === lowestLow) {\r\n        k.push(50); // Avoid division by zero\r\n      } else {\r\n        k.push(((close[i] - lowestLow) / (highestHigh - lowestLow)) * 100);\r\n      }\r\n    }\r\n    \r\n    const d = this.sma(k, dPeriod);\r\n    \r\n    return {\r\n      k: k.slice(k.length - d.length), // Align with D values\r\n      d\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Williams %R\r\n   */\r\n  static williamsR(high: number[], low: number[], close: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const williamsR: number[] = [];\r\n    \r\n    for (let i = period - 1; i < close.length; i++) {\r\n      const highestHigh = Math.max(...high.slice(i - period + 1, i + 1));\r\n      const lowestLow = Math.min(...low.slice(i - period + 1, i + 1));\r\n      \r\n      if (highestHigh === lowestLow) {\r\n        williamsR.push(-50); // Avoid division by zero\r\n      } else {\r\n        williamsR.push(((highestHigh - close[i]) / (highestHigh - lowestLow)) * -100);\r\n      }\r\n    }\r\n    \r\n    return williamsR;\r\n  }\r\n\r\n  /**\r\n   * Commodity Channel Index (CCI)\r\n   */\r\n  static cci(high: number[], low: number[], close: number[], period: number = 20): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    // Calculate Typical Price\r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    \r\n    const cci: number[] = [];\r\n    \r\n    for (let i = period - 1; i < typicalPrice.length; i++) {\r\n      const tpSlice = typicalPrice.slice(i - period + 1, i + 1);\r\n      const smaTP = StatisticsUtils.mean(tpSlice);\r\n      \r\n      // Calculate Mean Deviation\r\n      const meanDeviation = tpSlice.reduce((sum, tp) => sum + Math.abs(tp - smaTP), 0) / period;\r\n      \r\n      if (meanDeviation === 0) {\r\n        cci.push(0);\r\n      } else {\r\n        cci.push((typicalPrice[i] - smaTP) / (0.015 * meanDeviation));\r\n      }\r\n    }\r\n    \r\n    return cci;\r\n  }\r\n\r\n  /**\r\n   * Average True Range (ATR)\r\n   */\r\n  static atr(high: number[], low: number[], close: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const trueRanges: number[] = [];\r\n    \r\n    for (let i = 1; i < high.length; i++) {\r\n      const tr1 = high[i] - low[i];\r\n      const tr2 = Math.abs(high[i] - close[i - 1]);\r\n      const tr3 = Math.abs(low[i] - close[i - 1]);\r\n      \r\n      trueRanges.push(Math.max(tr1, tr2, tr3));\r\n    }\r\n    \r\n    return this.sma(trueRanges, period);\r\n  }\r\n\r\n  /**\r\n   * Average Directional Index (ADX)\r\n   */\r\n  static adx(high: number[], low: number[], close: number[], period: number = 14): { adx: number[]; plusDI: number[]; minusDI: number[] } {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const plusDM: number[] = [];\r\n    const minusDM: number[] = [];\r\n    const trueRanges: number[] = [];\r\n    \r\n    for (let i = 1; i < high.length; i++) {\r\n      const highDiff = high[i] - high[i - 1];\r\n      const lowDiff = low[i - 1] - low[i];\r\n      \r\n      plusDM.push(highDiff > lowDiff && highDiff > 0 ? highDiff : 0);\r\n      minusDM.push(lowDiff > highDiff && lowDiff > 0 ? lowDiff : 0);\r\n      \r\n      const tr1 = high[i] - low[i];\r\n      const tr2 = Math.abs(high[i] - close[i - 1]);\r\n      const tr3 = Math.abs(low[i] - close[i - 1]);\r\n      trueRanges.push(Math.max(tr1, tr2, tr3));\r\n    }\r\n    \r\n    const smoothedPlusDM = this.sma(plusDM, period);\r\n    const smoothedMinusDM = this.sma(minusDM, period);\r\n    const smoothedTR = this.sma(trueRanges, period);\r\n    \r\n    const plusDI = smoothedPlusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\r\n    const minusDI = smoothedMinusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\r\n    \r\n    const dx = plusDI.map((plus, i) => {\r\n      const sum = plus + minusDI[i];\r\n      return sum === 0 ? 0 : (Math.abs(plus - minusDI[i]) / sum) * 100;\r\n    });\r\n    \r\n    const adx = this.sma(dx, period);\r\n    \r\n    return {\r\n      adx,\r\n      plusDI: plusDI.slice(plusDI.length - adx.length),\r\n      minusDI: minusDI.slice(minusDI.length - adx.length)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Money Flow Index (MFI)\r\n   */\r\n  static mfi(high: number[], low: number[], close: number[], volume: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\r\n      throw new Error('All arrays must have the same length');\r\n    }\r\n    \r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    const rawMoneyFlow = typicalPrice.map((tp, i) => tp * volume[i]);\r\n    \r\n    const mfi: number[] = [];\r\n    \r\n    for (let i = period; i < typicalPrice.length; i++) {\r\n      let positiveFlow = 0;\r\n      let negativeFlow = 0;\r\n      \r\n      for (let j = i - period + 1; j <= i; j++) {\r\n        if (typicalPrice[j] > typicalPrice[j - 1]) {\r\n          positiveFlow += rawMoneyFlow[j];\r\n        } else if (typicalPrice[j] < typicalPrice[j - 1]) {\r\n          negativeFlow += rawMoneyFlow[j];\r\n        }\r\n      }\r\n      \r\n      if (negativeFlow === 0) {\r\n        mfi.push(100);\r\n      } else {\r\n        const moneyRatio = positiveFlow / negativeFlow;\r\n        mfi.push(100 - (100 / (1 + moneyRatio)));\r\n      }\r\n    }\r\n    \r\n    return mfi;\r\n  }\r\n\r\n  /**\r\n   * On-Balance Volume (OBV)\r\n   */\r\n  static obv(close: number[], volume: number[]): number[] {\r\n    if (close.length !== volume.length) {\r\n      throw new Error('Close and volume arrays must have the same length');\r\n    }\r\n    \r\n    const obv: number[] = [volume[0]];\r\n    \r\n    for (let i = 1; i < close.length; i++) {\r\n      if (close[i] > close[i - 1]) {\r\n        obv.push(obv[i - 1] + volume[i]);\r\n      } else if (close[i] < close[i - 1]) {\r\n        obv.push(obv[i - 1] - volume[i]);\r\n      } else {\r\n        obv.push(obv[i - 1]);\r\n      }\r\n    }\r\n    \r\n    return obv;\r\n  }\r\n\r\n  /**\r\n   * Volume Weighted Average Price (VWAP)\r\n   */\r\n  static vwap(high: number[], low: number[], close: number[], volume: number[]): number[] {\r\n    if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\r\n      throw new Error('All arrays must have the same length');\r\n    }\r\n    \r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    const vwap: number[] = [];\r\n    \r\n    let cumulativeTPV = 0; // Cumulative Typical Price * Volume\r\n    let cumulativeVolume = 0;\r\n    \r\n    for (let i = 0; i < typicalPrice.length; i++) {\r\n      cumulativeTPV += typicalPrice[i] * volume[i];\r\n      cumulativeVolume += volume[i];\r\n      \r\n      vwap.push(cumulativeVolume === 0 ? typicalPrice[i] : cumulativeTPV / cumulativeVolume);\r\n    }\r\n    \r\n    return vwap;\r\n  }\r\n\r\n  /**\r\n   * Momentum\r\n   */\r\n  static momentum(data: number[], period: number = 10): number[] {\r\n    if (period <= 0 || period >= data.length) {\r\n      throw new Error('Invalid period for momentum calculation');\r\n    }\r\n    \r\n    const momentum: number[] = [];\r\n    \r\n    for (let i = period; i < data.length; i++) {\r\n      momentum.push(data[i] - data[i - period]);\r\n    }\r\n    \r\n    return momentum;\r\n  }\r\n\r\n  /**\r\n   * Rate of Change (ROC)\r\n   */\r\n  static roc(data: number[], period: number = 10): number[] {\r\n    if (period <= 0 || period >= data.length) {\r\n      throw new Error('Invalid period for ROC calculation');\r\n    }\r\n    \r\n    const roc: number[] = [];\r\n    \r\n    for (let i = period; i < data.length; i++) {\r\n      if (data[i - period] === 0) {\r\n        roc.push(0);\r\n      } else {\r\n        roc.push(((data[i] - data[i - period]) / data[i - period]) * 100);\r\n      }\r\n    }\r\n    \r\n    return roc;\r\n  }\r\n\r\n  /**\r\n   * Standard Deviation\r\n   */\r\n  static standardDeviation(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for standard deviation calculation');\r\n    }\r\n    \r\n    return StatisticsUtils.rollingStatistic(data, period, 'std');\r\n  }\r\n\r\n  /**\r\n   * Variance\r\n   */\r\n  static variance(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for variance calculation');\r\n    }\r\n    \r\n    return StatisticsUtils.rollingStatistic(data, period, 'var');\r\n  }\r\n\r\n  /**\r\n   * Linear Regression Slope\r\n   */\r\n  static linearRegressionSlope(data: number[], period: number): number[] {\r\n    if (period <= 1 || period > data.length) {\r\n      throw new Error('Invalid period for linear regression slope calculation');\r\n    }\r\n    \r\n    const slopes: number[] = [];\r\n    \r\n    for (let i = period - 1; i < data.length; i++) {\r\n      const y = data.slice(i - period + 1, i + 1);\r\n      const x = Array.from({ length: period }, (_, idx) => idx);\r\n      \r\n      const n = period;\r\n      const sumX = x.reduce((sum, val) => sum + val, 0);\r\n      const sumY = y.reduce((sum, val) => sum + val, 0);\r\n      const sumXY = x.reduce((sum, val, idx) => sum + val * y[idx], 0);\r\n      const sumX2 = x.reduce((sum, val) => sum + val * val, 0);\r\n      \r\n      const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n      slopes.push(slope);\r\n    }\r\n    \r\n    return slopes;\r\n  }\r\n\r\n  /**\r\n   * Pivot Points (Standard)\r\n   */\r\n  static pivotPoints(high: number, low: number, close: number): {\r\n    pivot: number;\r\n    r1: number;\r\n    r2: number;\r\n    r3: number;\r\n    s1: number;\r\n    s2: number;\r\n    s3: number;\r\n  } {\r\n    const pivot = (high + low + close) / 3;\r\n    \r\n    return {\r\n      pivot,\r\n      r1: 2 * pivot - low,\r\n      r2: pivot + (high - low),\r\n      r3: high + 2 * (pivot - low),\r\n      s1: 2 * pivot - high,\r\n      s2: pivot - (high - low),\r\n      s3: low - 2 * (high - pivot)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper method to extract prices from MarketData array\r\n   */\r\n  static extractPrices(data: MarketData[], priceType: 'open' | 'high' | 'low' | 'close' | 'volume'): number[] {\r\n    return data.map(item => item[priceType]);\r\n  }\r\n\r\n  /**\r\n   * Helper method to extract OHLCV arrays from MarketData\r\n   */\r\n  static extractOHLCV(data: MarketData[]): {\r\n    open: number[];\r\n    high: number[];\r\n    low: number[];\r\n    close: number[];\r\n    volume: number[];\r\n  } {\r\n    return {\r\n      open: data.map(item => item.open),\r\n      high: data.map(item => item.high),\r\n      low: data.map(item => item.low),\r\n      close: data.map(item => item.close),\r\n      volume: data.map(item => item.volume)\r\n    };\r\n  }\r\n}","/**\r\n * Advanced Feature Engineer\r\n * \r\n * Generates 1000+ sophisticated features from basic OHLCV market data\r\n * using advanced technical analysis, statistical methods, and machine learning.\r\n */\r\n\r\nimport { FeatureOptions, FeatureMatrix, FeatureMetadata } from '../types/Features';\r\nimport { MarketData } from '../types/MarketData';\r\nimport { TechnicalIndicators } from '../indicators/TechnicalIndicators';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { DEFAULT_FEATURE_OPTIONS } from '../config/defaults';\r\n\r\n/**\r\n * Advanced feature engineering implementation\r\n */\r\nexport class FeatureEngineer {\r\n  private options: Required<FeatureOptions>;\r\n  private featureNames: string[] = [];\r\n  private featureMetadata: FeatureMetadata[] = [];\r\n\r\n  constructor(options: Partial<FeatureOptions> = {}) {\r\n    this.options = {\r\n      ...DEFAULT_FEATURE_OPTIONS,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive feature matrix from market data\r\n   */\r\n  generateFeatures(data: MarketData[]): FeatureMatrix {\r\n    if (data.length < 50) {\r\n      throw new Error('Insufficient data for feature generation. Need at least 50 periods.');\r\n    }\r\n\r\n    console.log(`🔧 Generating advanced features from ${data.length} data points...`);\r\n    \r\n    this.featureNames = [];\r\n    this.featureMetadata = [];\r\n    const features: number[][] = [];\r\n\r\n    // Initialize feature matrix\r\n    for (let i = 0; i < data.length; i++) {\r\n      features.push([]);\r\n    }\r\n\r\n    // 1. Basic OHLCV Features\r\n    this.addBasicFeatures(data, features);\r\n\r\n    // 2. Technical Indicators\r\n    this.addTechnicalIndicators(data, features);\r\n\r\n    // 3. Statistical Features\r\n    if (this.options.enableStatisticalFeatures) {\r\n      this.addStatisticalFeatures(data, features);\r\n    }\r\n\r\n    // 4. Volatility Features\r\n    if (this.options.enableVolatilityFeatures) {\r\n      this.addVolatilityFeatures(data, features);\r\n    }\r\n\r\n    // 5. Cross-sectional Features\r\n    this.addCrossSectionalFeatures(data, features);\r\n\r\n    // 6. Pattern Recognition Features\r\n    this.addPatternFeatures(data, features);\r\n\r\n    // 7. Harmonic Features\r\n    if (this.options.enableHarmonicFeatures) {\r\n      this.addHarmonicFeatures(data, features);\r\n    }\r\n\r\n    console.log(`✨ Generated ${this.featureNames.length} features`);\r\n    \r\n    return {\r\n      data: features,\r\n      featureNames: [...this.featureNames],\r\n      metadata: [...this.featureMetadata],\r\n      columns: this.featureNames.length,\r\n      rows: features.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get feature names\r\n   */\r\n  getFeatureNames(): string[] {\r\n    return [...this.featureNames];\r\n  }\r\n\r\n  /**\r\n   * Get feature metadata\r\n   */\r\n  getFeatureMetadata(): FeatureMetadata[] {\r\n    return [...this.featureMetadata];\r\n  }\r\n\r\n  /**\r\n   * Add basic OHLCV-derived features\r\n   */\r\n  private addBasicFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const opens = data.map(d => d.open);\r\n    const volumes = data.map(d => d.volume);\r\n\r\n    // Price-based features\r\n    const returns = this.calculateReturns(closes);\r\n    const logReturns = this.calculateLogReturns(closes);\r\n    const hlRatio = highs.map((h, i) => h / lows[i]);\r\n    const ocRatio = opens.map((o, i) => o / closes[i]);\r\n    const bodySize = opens.map((o, i) => Math.abs(closes[i] - o) / o);\r\n    const upperShadow = highs.map((h, i) => (h - Math.max(opens[i], closes[i])) / closes[i]);\r\n    const lowerShadow = lows.map((l, i) => (Math.min(opens[i], closes[i]) - l) / closes[i]);\r\n\r\n    this.addFeatureColumn(features, returns, 'returns', 'Basic price returns');\r\n    this.addFeatureColumn(features, logReturns, 'log_returns', 'Logarithmic returns');\r\n    this.addFeatureColumn(features, hlRatio, 'hl_ratio', 'High/Low ratio');\r\n    this.addFeatureColumn(features, ocRatio, 'oc_ratio', 'Open/Close ratio');\r\n    this.addFeatureColumn(features, bodySize, 'body_size', 'Candle body size');\r\n    this.addFeatureColumn(features, upperShadow, 'upper_shadow', 'Upper shadow size');\r\n    this.addFeatureColumn(features, lowerShadow, 'lower_shadow', 'Lower shadow size');\r\n\r\n    // Volume-based features\r\n    const volumeReturns = this.calculateReturns(volumes);\r\n    const priceVolumeCorr = this.calculateRollingCorrelation(returns, volumeReturns, 20);\r\n    const volumeMA = this.calculateMovingAverage(volumes, 20);\r\n    const volumeRatio = volumes.map((v, i) => i >= 20 ? v / volumeMA[i - 20] : 1);\r\n\r\n    this.addFeatureColumn(features, volumeReturns, 'volume_returns', 'Volume returns');\r\n    this.addFeatureColumn(features, priceVolumeCorr, 'price_volume_corr', 'Price-volume correlation');\r\n    this.addFeatureColumn(features, volumeRatio, 'volume_ratio', 'Volume ratio to MA');\r\n  }\r\n\r\n  /**\r\n   * Add technical indicator features\r\n   */\r\n  private addTechnicalIndicators(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const volumes = data.map(d => d.volume);\r\n\r\n    // RSI with multiple periods\r\n    for (const period of this.options.technicalIndicators.rsi.periods) {\r\n      const rsi = TechnicalIndicators.rsi(closes, period);\r\n      const rsiVelocity = this.calculateVelocity(rsi);\r\n      const rsiAcceleration = this.calculateVelocity(rsiVelocity);\r\n      \r\n      this.addFeatureColumn(features, rsi, `rsi_${period}`, `RSI with period ${period}`);\r\n      this.addFeatureColumn(features, rsiVelocity, `rsi_velocity_${period}`, `RSI velocity ${period}`);\r\n      this.addFeatureColumn(features, rsiAcceleration, `rsi_acceleration_${period}`, `RSI acceleration ${period}`);\r\n    }\r\n\r\n    // MACD\r\n    const macd = TechnicalIndicators.macd(closes, \r\n      this.options.technicalIndicators.macd.fast,\r\n      this.options.technicalIndicators.macd.slow,\r\n      this.options.technicalIndicators.macd.signal\r\n    );\r\n    \r\n    this.addFeatureColumn(features, macd.macd, 'macd_line', 'MACD line');\r\n    this.addFeatureColumn(features, macd.signal, 'macd_signal', 'MACD signal');\r\n    this.addFeatureColumn(features, macd.histogram, 'macd_histogram', 'MACD histogram');\r\n\r\n    // Bollinger Bands\r\n    const bb = TechnicalIndicators.bollingerBands(closes, \r\n      this.options.technicalIndicators.bollinger.period,\r\n      this.options.technicalIndicators.bollinger.multiplier\r\n    );\r\n    \r\n    this.addFeatureColumn(features, bb.upper, 'bb_upper', 'Bollinger upper band');\r\n    this.addFeatureColumn(features, bb.middle, 'bb_middle', 'Bollinger middle band');\r\n    this.addFeatureColumn(features, bb.lower, 'bb_lower', 'Bollinger lower band');\r\n    this.addFeatureColumn(features, bb.percentB, 'bb_position', 'Bollinger band position');\r\n    this.addFeatureColumn(features, bb.bandwidth, 'bb_width', 'Bollinger band width');\r\n\r\n    // Stochastic Oscillator\r\n    const stoch = TechnicalIndicators.stochastic(highs, lows, closes, \r\n      this.options.technicalIndicators.stochastic.kPeriod,\r\n      this.options.technicalIndicators.stochastic.dPeriod\r\n    );\r\n    \r\n    this.addFeatureColumn(features, stoch.k, 'stoch_k', 'Stochastic %K');\r\n    this.addFeatureColumn(features, stoch.d, 'stoch_d', 'Stochastic %D');\r\n\r\n    // Williams %R\r\n    const williams = TechnicalIndicators.williamsR(highs, lows, closes, this.options.technicalIndicators.williams.period);\r\n    this.addFeatureColumn(features, williams, 'williams_r', 'Williams %R');\r\n\r\n    // Commodity Channel Index\r\n    const cci = TechnicalIndicators.cci(highs, lows, closes, this.options.technicalIndicators.cci.period);\r\n    this.addFeatureColumn(features, cci, 'cci', 'Commodity Channel Index');\r\n\r\n    // ATR\r\n    const atr = TechnicalIndicators.atr(highs, lows, closes, 14);\r\n    this.addFeatureColumn(features, atr, 'atr', 'Average True Range');\r\n\r\n    // ADX\r\n    const adx = TechnicalIndicators.adx(highs, lows, closes, 14);\r\n    this.addFeatureColumn(features, adx.adx, 'adx', 'Average Directional Index');\r\n    this.addFeatureColumn(features, adx.plusDI, 'plus_di', 'Plus Directional Indicator');\r\n    this.addFeatureColumn(features, adx.minusDI, 'minus_di', 'Minus Directional Indicator');\r\n\r\n    // Volume indicators\r\n    const obv = TechnicalIndicators.obv(closes, volumes);\r\n    const mfi = TechnicalIndicators.mfi(highs, lows, closes, volumes, 14);\r\n    \r\n    this.addFeatureColumn(features, obv, 'obv', 'On-Balance Volume');\r\n    this.addFeatureColumn(features, mfi, 'mfi', 'Money Flow Index');\r\n  }\r\n\r\n  /**\r\n   * Add statistical features\r\n   */\r\n  private addStatisticalFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Rolling statistics for different windows\r\n    for (const window of this.options.lookbackPeriods) {\r\n      if (window <= data.length) {\r\n        // Rolling mean\r\n        const rollingMean = StatisticsUtils.rollingStatistic(returns, window, 'mean');\r\n        this.addFeatureColumn(features, rollingMean, `rolling_mean_${window}`, `Rolling mean ${window}`);\r\n\r\n        // Rolling standard deviation\r\n        const rollingStd = StatisticsUtils.rollingStatistic(returns, window, 'std');\r\n        this.addFeatureColumn(features, rollingStd, `rolling_std_${window}`, `Rolling std ${window}`);\r\n\r\n        // Rolling skewness\r\n        const rollingSkew = StatisticsUtils.rollingStatistic(returns, window, 'skewness');\r\n        this.addFeatureColumn(features, rollingSkew, `rolling_skew_${window}`, `Rolling skewness ${window}`);\r\n\r\n        // Rolling kurtosis\r\n        const rollingKurt = StatisticsUtils.rollingStatistic(returns, window, 'kurtosis');\r\n        this.addFeatureColumn(features, rollingKurt, `rolling_kurt_${window}`, `Rolling kurtosis ${window}`);\r\n\r\n        // Rolling min/max\r\n        const rollingMin = StatisticsUtils.rollingStatistic(closes, window, 'min');\r\n        const rollingMax = StatisticsUtils.rollingStatistic(closes, window, 'max');\r\n        this.addFeatureColumn(features, rollingMin, `rolling_min_${window}`, `Rolling min ${window}`);\r\n        this.addFeatureColumn(features, rollingMax, `rolling_max_${window}`, `Rolling max ${window}`);\r\n      }\r\n    }\r\n\r\n    // Autocorrelation features\r\n    for (let lag = 1; lag <= 10; lag++) {\r\n      const autocorr = this.calculateRollingAutocorrelation(returns, lag, 50);\r\n      this.addFeatureColumn(features, autocorr, `autocorr_${lag}`, `Autocorrelation lag ${lag}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add volatility features\r\n   */\r\n  private addVolatilityFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Realized volatility (different estimators)\r\n    for (const window of [10, 20, 50]) {\r\n      // Close-to-close volatility\r\n      const ccVol = this.calculateRollingVolatility(returns, window);\r\n      this.addFeatureColumn(features, ccVol, `cc_vol_${window}`, `Close-to-close volatility ${window}`);\r\n\r\n      // Parkinson volatility (high-low)\r\n      const parkVol = this.calculateParkinsonVolatility(highs, lows, window);\r\n      this.addFeatureColumn(features, parkVol, `park_vol_${window}`, `Parkinson volatility ${window}`);\r\n\r\n      // Volatility of volatility\r\n      const volOfVol = this.calculateRollingVolatility(ccVol, Math.min(window, 20));\r\n      this.addFeatureColumn(features, volOfVol, `vol_of_vol_${window}`, `Volatility of volatility ${window}`);\r\n    }\r\n\r\n    // GARCH-like features\r\n    const garchVol = this.calculateGARCHVolatility(returns);\r\n    this.addFeatureColumn(features, garchVol, 'garch_vol', 'GARCH-like volatility');\r\n\r\n    // Volatility regime indicators\r\n    const volRegime = this.detectVolatilityRegime(returns, 50);\r\n    this.addFeatureColumn(features, volRegime, 'vol_regime', 'Volatility regime');\r\n  }\r\n\r\n  /**\r\n   * Add cross-sectional features\r\n   */\r\n  private addCrossSectionalFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const volumes = data.map(d => d.volume);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Rank-based features\r\n    for (const window of [20, 50]) {\r\n      const returnRanks = this.calculateRollingRanks(returns, window);\r\n      const volumeRanks = this.calculateRollingRanks(volumes, window);\r\n      \r\n      this.addFeatureColumn(features, returnRanks, `return_rank_${window}`, `Return rank ${window}`);\r\n      this.addFeatureColumn(features, volumeRanks, `volume_rank_${window}`, `Volume rank ${window}`);\r\n    }\r\n\r\n    // Z-score features\r\n    for (const window of [20, 50]) {\r\n      const returnZScores = this.calculateRollingZScores(returns, window);\r\n      const volumeZScores = this.calculateRollingZScores(volumes, window);\r\n      \r\n      this.addFeatureColumn(features, returnZScores, `return_zscore_${window}`, `Return z-score ${window}`);\r\n      this.addFeatureColumn(features, volumeZScores, `volume_zscore_${window}`, `Volume z-score ${window}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add pattern recognition features\r\n   */\r\n  private addPatternFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const opens = data.map(d => d.open);\r\n\r\n    // Candlestick patterns\r\n    const doji = this.detectDoji(opens, closes);\r\n    const hammer = this.detectHammer(opens, highs, lows, closes);\r\n    const engulfing = this.detectEngulfing(opens, closes);\r\n    \r\n    this.addFeatureColumn(features, doji, 'doji', 'Doji pattern');\r\n    this.addFeatureColumn(features, hammer, 'hammer', 'Hammer pattern');\r\n    this.addFeatureColumn(features, engulfing, 'engulfing', 'Engulfing pattern');\r\n\r\n    // Support/Resistance levels\r\n    const supportResistance = this.detectSupportResistance(closes, 20);\r\n    this.addFeatureColumn(features, supportResistance.support, 'support_level', 'Support level');\r\n    this.addFeatureColumn(features, supportResistance.resistance, 'resistance_level', 'Resistance level');\r\n\r\n    // Trend patterns\r\n    const trendStrength = this.calculateTrendStrength(closes, 20);\r\n    this.addFeatureColumn(features, trendStrength, 'trend_strength', 'Trend strength');\r\n  }\r\n\r\n  /**\r\n   * Add harmonic features\r\n   */\r\n  private addHarmonicFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Fourier transform features (simplified)\r\n    const fourierFeatures = this.calculateFourierFeatures(returns, 50);\r\n    for (let i = 0; i < fourierFeatures.length; i++) {\r\n      this.addFeatureColumn(features, fourierFeatures[i], `fourier_${i}`, `Fourier component ${i}`);\r\n    }\r\n\r\n    // Cyclical features\r\n    const cyclicalFeatures = this.calculateCyclicalFeatures(closes);\r\n    for (let i = 0; i < cyclicalFeatures.length; i++) {\r\n      this.addFeatureColumn(features, cyclicalFeatures[i], `cyclical_${i}`, `Cyclical component ${i}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to add a feature column\r\n   */\r\n  private addFeatureColumn(features: number[][], values: number[], name: string, description: string): void {\r\n    // Pad with zeros if values array is shorter\r\n    const paddedValues = new Array(features.length).fill(0);\r\n    const startIndex = Math.max(0, features.length - values.length);\r\n    \r\n    for (let i = 0; i < values.length && startIndex + i < features.length; i++) {\r\n      paddedValues[startIndex + i] = isFinite(values[i]) ? values[i] : 0;\r\n    }\r\n\r\n    // Add to each row\r\n    for (let i = 0; i < features.length; i++) {\r\n      features[i].push(paddedValues[i]);\r\n    }\r\n\r\n    // Add metadata\r\n    this.featureNames.push(name);\r\n    this.featureMetadata.push({\r\n      name,\r\n      category: 'technical',\r\n      description,\r\n      dataType: 'numeric',\r\n      missingValueStrategy: 'zero'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate returns\r\n   */\r\n  private calculateReturns(prices: number[]): number[] {\r\n    const returns: number[] = [];\r\n    for (let i = 1; i < prices.length; i++) {\r\n      if (prices[i - 1] !== 0) {\r\n        returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\r\n      } else {\r\n        returns.push(0);\r\n      }\r\n    }\r\n    return returns;\r\n  }\r\n\r\n  /**\r\n   * Calculate log returns\r\n   */\r\n  private calculateLogReturns(prices: number[]): number[] {\r\n    const logReturns: number[] = [];\r\n    for (let i = 1; i < prices.length; i++) {\r\n      if (prices[i - 1] > 0 && prices[i] > 0) {\r\n        logReturns.push(Math.log(prices[i] / prices[i - 1]));\r\n      } else {\r\n        logReturns.push(0);\r\n      }\r\n    }\r\n    return logReturns;\r\n  }\r\n\r\n  /**\r\n   * Calculate velocity (first difference)\r\n   */\r\n  private calculateVelocity(values: number[]): number[] {\r\n    const velocity: number[] = [];\r\n    for (let i = 1; i < values.length; i++) {\r\n      velocity.push(values[i] - values[i - 1]);\r\n    }\r\n    return velocity;\r\n  }\r\n\r\n  /**\r\n   * Calculate moving average\r\n   */\r\n  private calculateMovingAverage(data: number[], window: number): number[] {\r\n    return TechnicalIndicators.sma(data, window);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling correlation\r\n   */\r\n  private calculateRollingCorrelation(x: number[], y: number[], window: number): number[] {\r\n    return MathUtils.rollingCorrelation(x, y, window);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling volatility\r\n   */\r\n  private calculateRollingVolatility(returns: number[], window: number): number[] {\r\n    return StatisticsUtils.rollingStatistic(returns, window, 'std');\r\n  }\r\n\r\n  /**\r\n   * Calculate Parkinson volatility\r\n   */\r\n  private calculateParkinsonVolatility(highs: number[], lows: number[], window: number): number[] {\r\n    const logHL = highs.map((h, i) => Math.log(h / lows[i]));\r\n    const parkVol: number[] = [];\r\n    \r\n    for (let i = window - 1; i < logHL.length; i++) {\r\n      const slice = logHL.slice(i - window + 1, i + 1);\r\n      const variance = slice.reduce((sum, val) => sum + val * val, 0) / (4 * Math.log(2) * window);\r\n      parkVol.push(Math.sqrt(variance));\r\n    }\r\n    \r\n    return parkVol;\r\n  }\r\n\r\n  /**\r\n   * Calculate GARCH-like volatility\r\n   */\r\n  private calculateGARCHVolatility(returns: number[]): number[] {\r\n    const garchVol: number[] = [];\r\n    let variance = 0.01; // Initial variance\r\n    \r\n    const alpha = 0.1; // ARCH parameter\r\n    const beta = 0.85;  // GARCH parameter\r\n    const omega = 0.000001; // Constant\r\n    \r\n    for (const ret of returns) {\r\n      variance = omega + alpha * ret * ret + beta * variance;\r\n      garchVol.push(Math.sqrt(variance));\r\n    }\r\n    \r\n    return garchVol;\r\n  }\r\n\r\n  /**\r\n   * Detect volatility regime\r\n   */\r\n  private detectVolatilityRegime(returns: number[], window: number): number[] {\r\n    const vol = this.calculateRollingVolatility(returns, window);\r\n    const volMean = StatisticsUtils.mean(vol);\r\n    const volStd = StatisticsUtils.standardDeviation(vol);\r\n    \r\n    return vol.map(v => {\r\n      if (v > volMean + volStd) return 2; // High volatility\r\n      if (v < volMean - volStd) return 0; // Low volatility\r\n      return 1; // Normal volatility\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling ranks\r\n   */\r\n  private calculateRollingRanks(data: number[], window: number): number[] {\r\n    const ranks: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const currentValue = data[i];\r\n      const rank = slice.filter(val => val <= currentValue).length / window;\r\n      ranks.push(rank);\r\n    }\r\n    \r\n    return ranks;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling z-scores\r\n   */\r\n  private calculateRollingZScores(data: number[], window: number): number[] {\r\n    const zScores: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const mean = StatisticsUtils.mean(slice);\r\n      const std = StatisticsUtils.standardDeviation(slice);\r\n      \r\n      if (std > 0) {\r\n        zScores.push((data[i] - mean) / std);\r\n      } else {\r\n        zScores.push(0);\r\n      }\r\n    }\r\n    \r\n    return zScores;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling autocorrelation\r\n   */\r\n  private calculateRollingAutocorrelation(data: number[], lag: number, window: number): number[] {\r\n    const autocorr: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length - lag; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const laggedSlice = data.slice(i - window + 1 + lag, i + 1 + lag);\r\n      \r\n      if (slice.length === laggedSlice.length) {\r\n        const correlation = MathUtils.correlation(slice, laggedSlice);\r\n        autocorr.push(correlation);\r\n      } else {\r\n        autocorr.push(0);\r\n      }\r\n    }\r\n    \r\n    return autocorr;\r\n  }\r\n\r\n  /**\r\n   * Detect Doji candlestick pattern\r\n   */\r\n  private detectDoji(opens: number[], closes: number[]): number[] {\r\n    return opens.map((open, i) => {\r\n      const bodySize = Math.abs(closes[i] - open) / open;\r\n      return bodySize < 0.001 ? 1 : 0; // Doji if body is very small\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Detect Hammer candlestick pattern\r\n   */\r\n  private detectHammer(opens: number[], highs: number[], lows: number[], closes: number[]): number[] {\r\n    return opens.map((open, i) => {\r\n      const bodySize = Math.abs(closes[i] - open);\r\n      const lowerShadow = Math.min(open, closes[i]) - lows[i];\r\n      const upperShadow = highs[i] - Math.max(open, closes[i]);\r\n      \r\n      // Hammer: small body, long lower shadow, short upper shadow\r\n      return (lowerShadow > 2 * bodySize && upperShadow < bodySize) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Detect Engulfing pattern\r\n   */\r\n  private detectEngulfing(opens: number[], closes: number[]): number[] {\r\n    const pattern: number[] = [0]; // First candle can't be engulfing\r\n    \r\n    for (let i = 1; i < opens.length; i++) {\r\n      const prevBody = Math.abs(closes[i - 1] - opens[i - 1]);\r\n      const currBody = Math.abs(closes[i] - opens[i]);\r\n      \r\n      // Bullish engulfing\r\n      if (closes[i - 1] < opens[i - 1] && closes[i] > opens[i] && \r\n          opens[i] < closes[i - 1] && closes[i] > opens[i - 1] && \r\n          currBody > prevBody) {\r\n        pattern.push(1);\r\n      }\r\n      // Bearish engulfing\r\n      else if (closes[i - 1] > opens[i - 1] && closes[i] < opens[i] && \r\n               opens[i] > closes[i - 1] && closes[i] < opens[i - 1] && \r\n               currBody > prevBody) {\r\n        pattern.push(-1);\r\n      } else {\r\n        pattern.push(0);\r\n      }\r\n    }\r\n    \r\n    return pattern;\r\n  }\r\n\r\n  /**\r\n   * Detect support and resistance levels\r\n   */\r\n  private detectSupportResistance(closes: number[], window: number): { support: number[]; resistance: number[] } {\r\n    const support: number[] = [];\r\n    const resistance: number[] = [];\r\n    \r\n    for (let i = window; i < closes.length; i++) {\r\n      const slice = closes.slice(i - window, i);\r\n      const currentPrice = closes[i];\r\n      \r\n      // Support: lowest price in window\r\n      const supportLevel = Math.min(...slice);\r\n      support.push(supportLevel / currentPrice);\r\n      \r\n      // Resistance: highest price in window\r\n      const resistanceLevel = Math.max(...slice);\r\n      resistance.push(resistanceLevel / currentPrice);\r\n    }\r\n    \r\n    return { support, resistance };\r\n  }\r\n\r\n  /**\r\n   * Calculate trend strength\r\n   */\r\n  private calculateTrendStrength(closes: number[], window: number): number[] {\r\n    const trendStrength: number[] = [];\r\n    \r\n    for (let i = window - 1; i < closes.length; i++) {\r\n      const slice = closes.slice(i - window + 1, i + 1);\r\n      const x = Array.from({ length: window }, (_, idx) => idx);\r\n      \r\n      // Linear regression slope as trend strength\r\n      const correlation = MathUtils.correlation(x, slice);\r\n      trendStrength.push(correlation);\r\n    }\r\n    \r\n    return trendStrength;\r\n  }\r\n\r\n  /**\r\n   * Calculate Fourier features (simplified)\r\n   */\r\n  private calculateFourierFeatures(data: number[], window: number): number[][] {\r\n    const features: number[][] = [[], []]; // Real and imaginary parts\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      \r\n      // Simple DFT for first few frequencies\r\n      let realPart = 0;\r\n      let imagPart = 0;\r\n      \r\n      for (let k = 0; k < slice.length; k++) {\r\n        const angle = -2 * Math.PI * k / slice.length;\r\n        realPart += slice[k] * Math.cos(angle);\r\n        imagPart += slice[k] * Math.sin(angle);\r\n      }\r\n      \r\n      features[0].push(realPart / slice.length);\r\n      features[1].push(imagPart / slice.length);\r\n    }\r\n    \r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Calculate cyclical features\r\n   */\r\n  private calculateCyclicalFeatures(closes: number[]): number[][] {\r\n    const features: number[][] = [];\r\n    \r\n    // Daily, weekly, monthly cycles (simplified)\r\n    const cycles = [5, 20, 60]; // 5-day, 20-day, 60-day cycles\r\n    \r\n    for (const cycle of cycles) {\r\n      const cyclicalFeature: number[] = [];\r\n      \r\n      for (let i = 0; i < closes.length; i++) {\r\n        const phase = (2 * Math.PI * i) / cycle;\r\n        cyclicalFeature.push(Math.sin(phase));\r\n      }\r\n      \r\n      features.push(cyclicalFeature);\r\n    }\r\n    \r\n    return features;\r\n  }\r\n}","/**\r\n * Indicators Configuration\r\n * \r\n * Configuration settings for technical indicators and their parameters.\r\n */\r\n\r\n/**\r\n * Technical indicator configurations\r\n */\r\nexport const INDICATORS_CONFIG = {\r\n  // Moving Averages\r\n  SMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100, 200],\r\n    minPeriod: 2,\r\n    maxPeriod: 500\r\n  },\r\n  \r\n  EMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100, 200],\r\n    minPeriod: 2,\r\n    maxPeriod: 500\r\n  },\r\n  \r\n  WMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100],\r\n    minPeriod: 2,\r\n    maxPeriod: 200\r\n  },\r\n  \r\n  // Momentum Indicators\r\n  RSI: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 9, 14, 21, 25],\r\n    overboughtLevel: 70,\r\n    oversoldLevel: 30,\r\n    minPeriod: 2,\r\n    maxPeriod: 100\r\n  },\r\n  \r\n  MACD: {\r\n    fastPeriod: 12,\r\n    slowPeriod: 26,\r\n    signalPeriod: 9,\r\n    alternativeSettings: [\r\n      { fast: 5, slow: 35, signal: 5 },\r\n      { fast: 8, slow: 17, signal: 9 },\r\n      { fast: 12, slow: 26, signal: 9 }\r\n    ]\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    kPeriod: 14,\r\n    dPeriod: 3,\r\n    smoothing: 3,\r\n    overboughtLevel: 80,\r\n    oversoldLevel: 20,\r\n    alternativeSettings: [\r\n      { k: 5, d: 3 },\r\n      { k: 14, d: 3 },\r\n      { k: 21, d: 5 }\r\n    ]\r\n  },\r\n  \r\n  WILLIAMS_R: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21],\r\n    overboughtLevel: -20,\r\n    oversoldLevel: -80\r\n  },\r\n  \r\n  CCI: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [14, 20, 50],\r\n    overboughtLevel: 100,\r\n    oversoldLevel: -100,\r\n    constant: 0.015\r\n  },\r\n  \r\n  // Volatility Indicators\r\n  BOLLINGER_BANDS: {\r\n    period: 20,\r\n    multiplier: 2,\r\n    alternativeSettings: [\r\n      { period: 10, multiplier: 1.9 },\r\n      { period: 20, multiplier: 2.0 },\r\n      { period: 50, multiplier: 2.1 }\r\n    ]\r\n  },\r\n  \r\n  ATR: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21, 50],\r\n    minPeriod: 2,\r\n    maxPeriod: 100\r\n  },\r\n  \r\n  // Trend Indicators\r\n  ADX: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21],\r\n    trendThreshold: 25,\r\n    strongTrendThreshold: 40\r\n  },\r\n  \r\n  PARABOLIC_SAR: {\r\n    accelerationFactor: 0.02,\r\n    maxAcceleration: 0.20,\r\n    alternativeSettings: [\r\n      { af: 0.01, max: 0.10 },\r\n      { af: 0.02, max: 0.20 },\r\n      { af: 0.03, max: 0.30 }\r\n    ]\r\n  },\r\n  \r\n  // Volume Indicators\r\n  OBV: {\r\n    // No parameters needed\r\n  },\r\n  \r\n  MFI: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [10, 14, 20],\r\n    overboughtLevel: 80,\r\n    oversoldLevel: 20\r\n  },\r\n  \r\n  VWAP: {\r\n    // Typically calculated from session start\r\n    resetPeriod: 'session'\r\n  },\r\n  \r\n  // Oscillators\r\n  MOMENTUM: {\r\n    defaultPeriod: 10,\r\n    alternativePeriods: [5, 10, 20, 50]\r\n  },\r\n  \r\n  ROC: {\r\n    defaultPeriod: 10,\r\n    alternativePeriods: [5, 10, 20, 50]\r\n  },\r\n  \r\n  // Statistical Indicators\r\n  STANDARD_DEVIATION: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [10, 20, 50]\r\n  },\r\n  \r\n  VARIANCE: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [10, 20, 50]\r\n  },\r\n  \r\n  LINEAR_REGRESSION_SLOPE: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21, 50]\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator combinations for different strategies\r\n */\r\nexport const INDICATOR_COMBINATIONS = {\r\n  TREND_FOLLOWING: [\r\n    'SMA_20', 'SMA_50', 'EMA_12', 'EMA_26', 'MACD', 'ADX'\r\n  ],\r\n  \r\n  MEAN_REVERSION: [\r\n    'RSI_14', 'BOLLINGER_BANDS', 'STOCHASTIC', 'WILLIAMS_R', 'CCI'\r\n  ],\r\n  \r\n  MOMENTUM: [\r\n    'RSI_14', 'MACD', 'MOMENTUM_10', 'ROC_10', 'STOCHASTIC'\r\n  ],\r\n  \r\n  VOLATILITY: [\r\n    'ATR_14', 'BOLLINGER_BANDS', 'STANDARD_DEVIATION_20'\r\n  ],\r\n  \r\n  VOLUME: [\r\n    'OBV', 'MFI_14', 'VWAP'\r\n  ],\r\n  \r\n  COMPREHENSIVE: [\r\n    'SMA_20', 'EMA_12', 'RSI_14', 'MACD', 'BOLLINGER_BANDS',\r\n    'STOCHASTIC', 'ATR_14', 'ADX', 'OBV', 'MFI_14'\r\n  ]\r\n};\r\n\r\n/**\r\n * Indicator signal interpretations\r\n */\r\nexport const SIGNAL_INTERPRETATIONS = {\r\n  RSI: {\r\n    bullish: 'RSI < 30 (oversold)',\r\n    bearish: 'RSI > 70 (overbought)',\r\n    neutral: '30 <= RSI <= 70'\r\n  },\r\n  \r\n  MACD: {\r\n    bullish: 'MACD line crosses above signal line',\r\n    bearish: 'MACD line crosses below signal line',\r\n    momentum: 'Histogram increasing/decreasing'\r\n  },\r\n  \r\n  BOLLINGER_BANDS: {\r\n    bullish: 'Price touches lower band (oversold)',\r\n    bearish: 'Price touches upper band (overbought)',\r\n    squeeze: 'Bands contracting (low volatility)',\r\n    expansion: 'Bands expanding (high volatility)'\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    bullish: '%K crosses above %D below 20',\r\n    bearish: '%K crosses below %D above 80',\r\n    overbought: '%K and %D > 80',\r\n    oversold: '%K and %D < 20'\r\n  },\r\n  \r\n  ADX: {\r\n    trending: 'ADX > 25',\r\n    strongTrend: 'ADX > 40',\r\n    weakTrend: 'ADX < 25',\r\n    bullishTrend: '+DI > -DI and ADX > 25',\r\n    bearishTrend: '-DI > +DI and ADX > 25'\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator optimization parameters\r\n */\r\nexport const OPTIMIZATION_PARAMETERS = {\r\n  RSI: {\r\n    period: { min: 5, max: 50, step: 1 },\r\n    overbought: { min: 60, max: 90, step: 5 },\r\n    oversold: { min: 10, max: 40, step: 5 }\r\n  },\r\n  \r\n  MACD: {\r\n    fastPeriod: { min: 5, max: 20, step: 1 },\r\n    slowPeriod: { min: 15, max: 40, step: 1 },\r\n    signalPeriod: { min: 5, max: 15, step: 1 }\r\n  },\r\n  \r\n  BOLLINGER_BANDS: {\r\n    period: { min: 10, max: 50, step: 5 },\r\n    multiplier: { min: 1.5, max: 3.0, step: 0.1 }\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    kPeriod: { min: 5, max: 30, step: 1 },\r\n    dPeriod: { min: 2, max: 10, step: 1 }\r\n  },\r\n  \r\n  ATR: {\r\n    period: { min: 5, max: 50, step: 1 }\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator performance metrics\r\n */\r\nexport const PERFORMANCE_METRICS = {\r\n  CALCULATION_COMPLEXITY: {\r\n    SMA: 'O(n)',\r\n    EMA: 'O(n)',\r\n    RSI: 'O(n)',\r\n    MACD: 'O(n)',\r\n    BOLLINGER_BANDS: 'O(n)',\r\n    STOCHASTIC: 'O(n)',\r\n    ATR: 'O(n)',\r\n    ADX: 'O(n)',\r\n    MFI: 'O(n)'\r\n  },\r\n  \r\n  MEMORY_USAGE: {\r\n    SMA: 'Low',\r\n    EMA: 'Very Low',\r\n    RSI: 'Low',\r\n    MACD: 'Medium',\r\n    BOLLINGER_BANDS: 'Medium',\r\n    STOCHASTIC: 'Medium',\r\n    ATR: 'Low',\r\n    ADX: 'High',\r\n    MFI: 'Medium'\r\n  },\r\n  \r\n  SENSITIVITY_TO_NOISE: {\r\n    SMA: 'Low',\r\n    EMA: 'Medium',\r\n    RSI: 'Medium',\r\n    MACD: 'High',\r\n    BOLLINGER_BANDS: 'Low',\r\n    STOCHASTIC: 'High',\r\n    ATR: 'Low',\r\n    ADX: 'Medium',\r\n    MFI: 'Medium'\r\n  }\r\n};\r\n\r\n/**\r\n * Market condition adaptations\r\n */\r\nexport const MARKET_ADAPTATIONS = {\r\n  TRENDING_MARKET: {\r\n    preferredIndicators: ['MACD', 'ADX', 'EMA', 'PARABOLIC_SAR'],\r\n    avoidIndicators: ['RSI', 'STOCHASTIC', 'WILLIAMS_R'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 21 }, // Longer period for trending markets\r\n      MACD: { fast: 8, slow: 21, signal: 5 } // Faster settings\r\n    }\r\n  },\r\n  \r\n  RANGING_MARKET: {\r\n    preferredIndicators: ['RSI', 'STOCHASTIC', 'BOLLINGER_BANDS', 'WILLIAMS_R'],\r\n    avoidIndicators: ['MACD', 'MOMENTUM', 'ROC'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 14, overbought: 75, oversold: 25 },\r\n      BOLLINGER_BANDS: { multiplier: 1.8 } // Tighter bands\r\n    }\r\n  },\r\n  \r\n  HIGH_VOLATILITY: {\r\n    preferredIndicators: ['ATR', 'BOLLINGER_BANDS', 'STANDARD_DEVIATION'],\r\n    parameterAdjustments: {\r\n      ATR: { period: 10 }, // Shorter period for faster adaptation\r\n      BOLLINGER_BANDS: { multiplier: 2.5 }, // Wider bands\r\n      RSI: { period: 21 } // Longer period to reduce noise\r\n    }\r\n  },\r\n  \r\n  LOW_VOLATILITY: {\r\n    preferredIndicators: ['RSI', 'STOCHASTIC', 'CCI'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 9, overbought: 65, oversold: 35 }, // More sensitive\r\n      BOLLINGER_BANDS: { multiplier: 1.5 }, // Tighter bands\r\n      STOCHASTIC: { kPeriod: 9 } // Faster stochastic\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Timeframe-specific configurations\r\n */\r\nexport const TIMEFRAME_CONFIGS = {\r\n  '1m': {\r\n    RSI: { period: 7 },\r\n    MACD: { fast: 5, slow: 13, signal: 4 },\r\n    BOLLINGER_BANDS: { period: 10 }\r\n  },\r\n  \r\n  '5m': {\r\n    RSI: { period: 9 },\r\n    MACD: { fast: 8, slow: 17, signal: 6 },\r\n    BOLLINGER_BANDS: { period: 15 }\r\n  },\r\n  \r\n  '15m': {\r\n    RSI: { period: 12 },\r\n    MACD: { fast: 10, slow: 21, signal: 7 },\r\n    BOLLINGER_BANDS: { period: 18 }\r\n  },\r\n  \r\n  '1h': {\r\n    RSI: { period: 14 },\r\n    MACD: { fast: 12, slow: 26, signal: 9 },\r\n    BOLLINGER_BANDS: { period: 20 }\r\n  },\r\n  \r\n  '4h': {\r\n    RSI: { period: 16 },\r\n    MACD: { fast: 15, slow: 30, signal: 10 },\r\n    BOLLINGER_BANDS: { period: 25 }\r\n  },\r\n  \r\n  '1d': {\r\n    RSI: { period: 14 },\r\n    MACD: { fast: 12, slow: 26, signal: 9 },\r\n    BOLLINGER_BANDS: { period: 20 }\r\n  }\r\n};","/**\r\n * MeridianAlgo-JS v2.0 - Ultra-Precision Trading Library\r\n * \r\n * Advanced algorithmic trading and financial analysis library with\r\n * ultra-precision machine learning capabilities for JavaScript/TypeScript.\r\n * \r\n * @author MeridianAlgo Team\r\n * @version 2.0.0\r\n * @license MIT\r\n */\r\n\r\n// Core Predictors\r\nexport { UltraPrecisionPredictor } from './predictors/UltraPrecisionPredictor';\r\n\r\n// Feature Engineering\r\nexport { FeatureEngineer } from './features/FeatureEngineer';\r\nexport { TechnicalIndicators } from './indicators/TechnicalIndicators';\r\n\r\n// Utilities\r\nexport { MathUtils } from './utils/MathUtils';\r\nexport { StatisticsUtils } from './utils/StatisticsUtils';\r\nexport { ValidationUtils } from './utils/ValidationUtils';\r\n\r\n// Types\r\nexport { MarketData, ExtendedMarketData, TickData, OrderBook, ValidationResult } from './types/MarketData';\r\nexport { PredictorOptions, TrainingData, PredictionResult, ModelMetrics, TrainingResults } from './types/Prediction';\r\nexport { FeatureOptions, FeatureMatrix, FeatureMetadata } from './types/Features';\r\n\r\n// Constants\r\nexport { DEFAULT_CONFIG } from './config/defaults';\r\nexport { INDICATORS_CONFIG } from './config/indicators';\r\n\r\n/**\r\n * Library version\r\n */\r\nexport const VERSION = '2.0.0';"],"names":[],"mappings":"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"}