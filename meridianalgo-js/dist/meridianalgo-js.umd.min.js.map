{"version":3,"file":"meridianalgo-js.umd.min.js","sources":["../src/utils/ValidationUtils.ts","../src/utils/StatisticsUtils.ts","../src/utils/MathUtils.ts","../src/config/defaults.ts","../src/indicators/TechnicalIndicators.ts","../src/features/FeatureEngineer.ts","../src/config/indicators.ts","../src/predictors/UltraPrecisionPredictor.ts","../src/index.ts"],"sourcesContent":["/**\r\n * Validation Utilities\r\n * \r\n * Comprehensive data validation and error checking utilities.\r\n */\r\n\r\nimport { MarketData, ValidationResult, ValidationError, ValidationWarning } from '../types/MarketData';\r\nimport { TrainingData } from '../types/Prediction';\r\n\r\n/**\r\n * Validation utility functions\r\n */\r\nexport class ValidationUtils {\r\n  /**\r\n   * Validate market data array\r\n   */\r\n  static validateMarketData(data: MarketData[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(data)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Data must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (data.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_DATA',\r\n        message: 'Data array cannot be empty',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    // Validate each data point\r\n    data.forEach((item, index) => {\r\n      this.validateSingleMarketData(item, index, errors, warnings);\r\n    });\r\n\r\n    // Check for chronological order\r\n    this.validateChronologicalOrder(data, errors, warnings);\r\n\r\n    // Check for data gaps\r\n    this.validateDataGaps(data, warnings);\r\n\r\n    // Check for outliers\r\n    this.validateOutliers(data, warnings);\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate single market data point\r\n   */\r\n  private static validateSingleMarketData(\r\n    item: MarketData, \r\n    index: number, \r\n    errors: ValidationError[], \r\n    warnings: ValidationWarning[]\r\n  ): void {\r\n    const prefix = `Item ${index}`;\r\n\r\n    // Check required fields\r\n    if (!item.timestamp) {\r\n      errors.push({\r\n        code: 'MISSING_TIMESTAMP',\r\n        message: `${prefix}: Missing timestamp`,\r\n        field: 'timestamp',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (!item.symbol || typeof item.symbol !== 'string') {\r\n      errors.push({\r\n        code: 'INVALID_SYMBOL',\r\n        message: `${prefix}: Invalid or missing symbol`,\r\n        field: 'symbol',\r\n        value: item.symbol,\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    // Validate numeric fields\r\n    const numericFields = ['open', 'high', 'low', 'close', 'volume'];\r\n    numericFields.forEach(field => {\r\n      const value = (item as any)[field];\r\n      if (typeof value !== 'number' || !isFinite(value)) {\r\n        errors.push({\r\n          code: 'INVALID_NUMERIC_FIELD',\r\n          message: `${prefix}: ${field} must be a finite number`,\r\n          field,\r\n          value,\r\n          severity: 'high'\r\n        });\r\n      } else if (value < 0 && field !== 'close') { // Close can be negative for some instruments\r\n        errors.push({\r\n          code: 'NEGATIVE_VALUE',\r\n          message: `${prefix}: ${field} cannot be negative`,\r\n          field,\r\n          value,\r\n          severity: 'medium'\r\n        });\r\n      }\r\n    });\r\n\r\n    // Validate OHLC relationships\r\n    if (typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.high < item.low) {\r\n        errors.push({\r\n          code: 'INVALID_HIGH_LOW',\r\n          message: `${prefix}: High price cannot be less than low price`,\r\n          severity: 'high'\r\n        });\r\n      }\r\n    }\r\n\r\n    if (typeof item.open === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.open > item.high || item.open < item.low) {\r\n        warnings.push({\r\n          code: 'OPEN_OUT_OF_RANGE',\r\n          message: `${prefix}: Open price is outside high-low range`,\r\n          field: 'open',\r\n          value: item.open\r\n        });\r\n      }\r\n    }\r\n\r\n    if (typeof item.close === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\r\n      if (item.close > item.high || item.close < item.low) {\r\n        warnings.push({\r\n          code: 'CLOSE_OUT_OF_RANGE',\r\n          message: `${prefix}: Close price is outside high-low range`,\r\n          field: 'close',\r\n          value: item.close\r\n        });\r\n      }\r\n    }\r\n\r\n    // Validate optional fields\r\n    if (item.vwap !== undefined) {\r\n      if (typeof item.vwap !== 'number' || !isFinite(item.vwap)) {\r\n        warnings.push({\r\n          code: 'INVALID_VWAP',\r\n          message: `${prefix}: VWAP must be a finite number`,\r\n          field: 'vwap',\r\n          value: item.vwap\r\n        });\r\n      }\r\n    }\r\n\r\n    if (item.trades !== undefined) {\r\n      if (!Number.isInteger(item.trades) || item.trades < 0) {\r\n        warnings.push({\r\n          code: 'INVALID_TRADES',\r\n          message: `${prefix}: Trades must be a non-negative integer`,\r\n          field: 'trades',\r\n          value: item.trades\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate chronological order\r\n   */\r\n  private static validateChronologicalOrder(\r\n    data: MarketData[], \r\n    errors: ValidationError[], \r\n    warnings: ValidationWarning[]\r\n  ): void {\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = new Date(data[i - 1].timestamp).getTime();\r\n      const currTime = new Date(data[i].timestamp).getTime();\r\n\r\n      if (currTime < prevTime) {\r\n        errors.push({\r\n          code: 'NON_CHRONOLOGICAL',\r\n          message: `Data is not in chronological order at index ${i}`,\r\n          severity: 'medium'\r\n        });\r\n      } else if (currTime === prevTime) {\r\n        warnings.push({\r\n          code: 'DUPLICATE_TIMESTAMP',\r\n          message: `Duplicate timestamp at index ${i}`,\r\n          value: data[i].timestamp\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate data gaps\r\n   */\r\n  private static validateDataGaps(data: MarketData[], warnings: ValidationWarning[]): void {\r\n    if (data.length < 2) return;\r\n\r\n    const intervals: number[] = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevTime = new Date(data[i - 1].timestamp).getTime();\r\n      const currTime = new Date(data[i].timestamp).getTime();\r\n      intervals.push(currTime - prevTime);\r\n    }\r\n\r\n    // Calculate expected interval (mode of intervals)\r\n    const intervalCounts = new Map<number, number>();\r\n    intervals.forEach(interval => {\r\n      intervalCounts.set(interval, (intervalCounts.get(interval) || 0) + 1);\r\n    });\r\n\r\n    let expectedInterval = 0;\r\n    let maxCount = 0;\r\n    for (const [interval, count] of intervalCounts) {\r\n      if (count > maxCount) {\r\n        maxCount = count;\r\n        expectedInterval = interval;\r\n      }\r\n    }\r\n\r\n    // Check for gaps larger than 2x expected interval\r\n    intervals.forEach((interval, index) => {\r\n      if (interval > expectedInterval * 2) {\r\n        warnings.push({\r\n          code: 'DATA_GAP',\r\n          message: `Large data gap detected between index ${index} and ${index + 1}`,\r\n          value: interval\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate outliers in price data\r\n   */\r\n  private static validateOutliers(data: MarketData[], warnings: ValidationWarning[]): void {\r\n    if (data.length < 10) return; // Need sufficient data for outlier detection\r\n\r\n    const returns = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      const prevClose = data[i - 1].close;\r\n      const currClose = data[i].close;\r\n      if (prevClose > 0) {\r\n        returns.push((currClose - prevClose) / prevClose);\r\n      }\r\n    }\r\n\r\n    if (returns.length === 0) return;\r\n\r\n    // Calculate z-scores for returns\r\n    const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\r\n    const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / (returns.length - 1);\r\n    const std = Math.sqrt(variance);\r\n\r\n    if (std === 0) return;\r\n\r\n    returns.forEach((ret, index) => {\r\n      const zScore = Math.abs((ret - mean) / std);\r\n      if (zScore > 3) { // 3-sigma rule\r\n        warnings.push({\r\n          code: 'PRICE_OUTLIER',\r\n          message: `Potential price outlier detected at index ${index + 1}`,\r\n          value: ret\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Validate training data\r\n   */\r\n  static validateTrainingData(data: TrainingData[]): ValidationResult {\r\n    // First validate as market data\r\n    const marketDataResult = this.validateMarketData(data);\r\n    \r\n    // Additional validation for training data\r\n    const errors = [...marketDataResult.errors];\r\n    const warnings = [...marketDataResult.warnings];\r\n\r\n    data.forEach((item, index) => {\r\n      if (item.features !== undefined) {\r\n        if (!Array.isArray(item.features)) {\r\n          errors.push({\r\n            code: 'INVALID_FEATURES',\r\n            message: `Item ${index}: Features must be an array`,\r\n            field: 'features',\r\n            severity: 'medium'\r\n          });\r\n        } else {\r\n          // Check for invalid feature values\r\n          item.features.forEach((feature, featureIndex) => {\r\n            if (typeof feature !== 'number' || !isFinite(feature)) {\r\n              errors.push({\r\n                code: 'INVALID_FEATURE_VALUE',\r\n                message: `Item ${index}: Feature ${featureIndex} must be a finite number`,\r\n                field: `features[${featureIndex}]`,\r\n                value: feature,\r\n                severity: 'medium'\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n\r\n      if (item.target !== undefined) {\r\n        if (typeof item.target !== 'number' || !isFinite(item.target)) {\r\n          errors.push({\r\n            code: 'INVALID_TARGET',\r\n            message: `Item ${index}: Target must be a finite number`,\r\n            field: 'target',\r\n            value: item.target,\r\n            severity: 'medium'\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate feature array\r\n   */\r\n  static validateFeatures(features: number[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(features)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Features must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (features.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_FEATURES',\r\n        message: 'Features array cannot be empty',\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    features.forEach((feature, index) => {\r\n      if (typeof feature !== 'number') {\r\n        errors.push({\r\n          code: 'INVALID_FEATURE_TYPE',\r\n          message: `Feature ${index} must be a number`,\r\n          field: `features[${index}]`,\r\n          value: feature,\r\n          severity: 'high'\r\n        });\r\n      } else if (!isFinite(feature)) {\r\n        errors.push({\r\n          code: 'INVALID_FEATURE_VALUE',\r\n          message: `Feature ${index} must be finite`,\r\n          field: `features[${index}]`,\r\n          value: feature,\r\n          severity: 'high'\r\n        });\r\n      }\r\n    });\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate portfolio weights\r\n   */\r\n  static validatePortfolioWeights(weights: number[]): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!Array.isArray(weights)) {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: 'Weights must be an array',\r\n        severity: 'critical'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (weights.length === 0) {\r\n      errors.push({\r\n        code: 'EMPTY_WEIGHTS',\r\n        message: 'Weights array cannot be empty',\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    let sum = 0;\r\n    weights.forEach((weight, index) => {\r\n      if (typeof weight !== 'number' || !isFinite(weight)) {\r\n        errors.push({\r\n          code: 'INVALID_WEIGHT_VALUE',\r\n          message: `Weight ${index} must be a finite number`,\r\n          field: `weights[${index}]`,\r\n          value: weight,\r\n          severity: 'high'\r\n        });\r\n      } else {\r\n        sum += weight;\r\n        if (weight < 0) {\r\n          warnings.push({\r\n            code: 'NEGATIVE_WEIGHT',\r\n            message: `Weight ${index} is negative (short position)`,\r\n            field: `weights[${index}]`,\r\n            value: weight\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Check if weights sum to approximately 1\r\n    const tolerance = 1e-6;\r\n    if (Math.abs(sum - 1) > tolerance) {\r\n      if (Math.abs(sum - 1) > 0.01) {\r\n        errors.push({\r\n          code: 'WEIGHTS_SUM_ERROR',\r\n          message: `Weights sum to ${sum}, should sum to 1.0`,\r\n          severity: 'medium'\r\n        });\r\n      } else {\r\n        warnings.push({\r\n          code: 'WEIGHTS_SUM_WARNING',\r\n          message: `Weights sum to ${sum}, should sum to 1.0`,\r\n          value: sum\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate date range\r\n   */\r\n  static validateDateRange(startDate: Date, endDate: Date): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (!(startDate instanceof Date) || isNaN(startDate.getTime())) {\r\n      errors.push({\r\n        code: 'INVALID_START_DATE',\r\n        message: 'Start date must be a valid Date object',\r\n        field: 'startDate',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (!(endDate instanceof Date) || isNaN(endDate.getTime())) {\r\n      errors.push({\r\n        code: 'INVALID_END_DATE',\r\n        message: 'End date must be a valid Date object',\r\n        field: 'endDate',\r\n        severity: 'high'\r\n      });\r\n    }\r\n\r\n    if (errors.length === 0) {\r\n      if (startDate >= endDate) {\r\n        errors.push({\r\n          code: 'INVALID_DATE_RANGE',\r\n          message: 'Start date must be before end date',\r\n          severity: 'high'\r\n        });\r\n      }\r\n\r\n      const now = new Date();\r\n      if (endDate > now) {\r\n        warnings.push({\r\n          code: 'FUTURE_END_DATE',\r\n          message: 'End date is in the future',\r\n          field: 'endDate',\r\n          value: endDate\r\n        });\r\n      }\r\n\r\n      const daysDiff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);\r\n      if (daysDiff < 1) {\r\n        warnings.push({\r\n          code: 'SHORT_DATE_RANGE',\r\n          message: 'Date range is less than 1 day',\r\n          value: daysDiff\r\n        });\r\n      }\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate numeric parameter\r\n   */\r\n  static validateNumericParameter(\r\n    value: unknown, \r\n    name: string, \r\n    options: {\r\n      min?: number;\r\n      max?: number;\r\n      integer?: boolean;\r\n      positive?: boolean;\r\n    } = {}\r\n  ): ValidationResult {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n\r\n    if (typeof value !== 'number') {\r\n      errors.push({\r\n        code: 'INVALID_TYPE',\r\n        message: `${name} must be a number`,\r\n        field: name,\r\n        value,\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (!isFinite(value)) {\r\n      errors.push({\r\n        code: 'INVALID_VALUE',\r\n        message: `${name} must be finite`,\r\n        field: name,\r\n        value,\r\n        severity: 'high'\r\n      });\r\n      return { isValid: false, errors, warnings };\r\n    }\r\n\r\n    if (options.integer && !Number.isInteger(value)) {\r\n      errors.push({\r\n        code: 'NOT_INTEGER',\r\n        message: `${name} must be an integer`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.positive && value <= 0) {\r\n      errors.push({\r\n        code: 'NOT_POSITIVE',\r\n        message: `${name} must be positive`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.min !== undefined && value < options.min) {\r\n      errors.push({\r\n        code: 'BELOW_MINIMUM',\r\n        message: `${name} must be at least ${options.min}`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    if (options.max !== undefined && value > options.max) {\r\n      errors.push({\r\n        code: 'ABOVE_MAXIMUM',\r\n        message: `${name} must be at most ${options.max}`,\r\n        field: name,\r\n        value,\r\n        severity: 'medium'\r\n      });\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Sanitize and clean market data\r\n   */\r\n  static sanitizeMarketData(data: MarketData[]): MarketData[] {\r\n    return data\r\n      .filter(item => {\r\n        // Remove items with invalid basic structure\r\n        return item && \r\n               typeof item.open === 'number' && isFinite(item.open) &&\r\n               typeof item.high === 'number' && isFinite(item.high) &&\r\n               typeof item.low === 'number' && isFinite(item.low) &&\r\n               typeof item.close === 'number' && isFinite(item.close) &&\r\n               typeof item.volume === 'number' && isFinite(item.volume) &&\r\n               item.high >= item.low;\r\n      })\r\n      .map(item => ({\r\n        ...item,\r\n        // Ensure timestamp is a Date object\r\n        timestamp: new Date(item.timestamp),\r\n        // Ensure numeric fields are properly typed\r\n        open: Number(item.open),\r\n        high: Number(item.high),\r\n        low: Number(item.low),\r\n        close: Number(item.close),\r\n        volume: Number(item.volume),\r\n        // Clean optional fields\r\n        vwap: item.vwap !== undefined ? Number(item.vwap) : undefined,\r\n        trades: item.trades !== undefined ? Math.floor(Number(item.trades)) : undefined\r\n      }))\r\n      .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()); // Ensure chronological order\r\n  }\r\n}","/**\r\n * Statistical Utilities\r\n * \r\n * Advanced statistical functions for financial analysis and risk management.\r\n */\r\n\r\n/**\r\n * Statistical utility functions\r\n */\r\nexport class StatisticsUtils {\r\n  /**\r\n   * Calculate mean (average)\r\n   */\r\n  static mean(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate mean of empty array');\r\n    }\r\n    return data.reduce((sum, value) => sum + value, 0) / data.length;\r\n  }\r\n\r\n  /**\r\n   * Calculate median\r\n   */\r\n  static median(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate median of empty array');\r\n    }\r\n    \r\n    const sorted = [...data].sort((a, b) => a - b);\r\n    const mid = Math.floor(sorted.length / 2);\r\n    \r\n    if (sorted.length % 2 === 0) {\r\n      return (sorted[mid - 1] + sorted[mid]) / 2;\r\n    } else {\r\n      return sorted[mid];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate mode (most frequent value)\r\n   */\r\n  static mode(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate mode of empty array');\r\n    }\r\n    \r\n    const frequency: Map<number, number> = new Map();\r\n    let maxFreq = 0;\r\n    \r\n    for (const value of data) {\r\n      const freq = (frequency.get(value) || 0) + 1;\r\n      frequency.set(value, freq);\r\n      maxFreq = Math.max(maxFreq, freq);\r\n    }\r\n    \r\n    const modes: number[] = [];\r\n    for (const [value, freq] of frequency) {\r\n      if (freq === maxFreq) {\r\n        modes.push(value);\r\n      }\r\n    }\r\n    \r\n    return modes;\r\n  }\r\n\r\n  /**\r\n   * Calculate standard deviation\r\n   */\r\n  static standardDeviation(data: number[], sample: boolean = true): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate standard deviation of empty array');\r\n    }\r\n    if (sample && data.length === 1) {\r\n      throw new Error('Cannot calculate sample standard deviation with only one data point');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\r\n    \r\n    return Math.sqrt(variance);\r\n  }\r\n\r\n  /**\r\n   * Calculate variance\r\n   */\r\n  static variance(data: number[], sample: boolean = true): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate variance of empty array');\r\n    }\r\n    if (sample && data.length === 1) {\r\n      throw new Error('Cannot calculate sample variance with only one data point');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    \r\n    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\r\n  }\r\n\r\n  /**\r\n   * Calculate skewness (measure of asymmetry)\r\n   */\r\n  static skewness(data: number[]): number {\r\n    if (data.length < 3) {\r\n      throw new Error('Need at least 3 data points to calculate skewness');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    const n = data.length;\r\n    \r\n    if (std === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    const cubedDeviations = data.map(x => Math.pow((x - mean) / std, 3));\r\n    const sum = cubedDeviations.reduce((a, b) => a + b, 0);\r\n    \r\n    return (n / ((n - 1) * (n - 2))) * sum;\r\n  }\r\n\r\n  /**\r\n   * Calculate kurtosis (measure of tail heaviness)\r\n   */\r\n  static kurtosis(data: number[], excess: boolean = true): number {\r\n    if (data.length < 4) {\r\n      throw new Error('Need at least 4 data points to calculate kurtosis');\r\n    }\r\n    \r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    const n = data.length;\r\n    \r\n    if (std === 0) {\r\n      return excess ? -3 : 0;\r\n    }\r\n    \r\n    const fourthMoments = data.map(x => Math.pow((x - mean) / std, 4));\r\n    const sum = fourthMoments.reduce((a, b) => a + b, 0);\r\n    \r\n    const kurtosisValue = (n * (n + 1) / ((n - 1) * (n - 2) * (n - 3))) * sum - \r\n                         (3 * Math.pow(n - 1, 2) / ((n - 2) * (n - 3)));\r\n    \r\n    return excess ? kurtosisValue : kurtosisValue + 3;\r\n  }\r\n\r\n  /**\r\n   * Calculate quantile (percentile)\r\n   */\r\n  static quantile(data: number[], q: number): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate quantile of empty array');\r\n    }\r\n    if (q < 0 || q > 1) {\r\n      throw new Error('Quantile must be between 0 and 1');\r\n    }\r\n    \r\n    const sorted = [...data].sort((a, b) => a - b);\r\n    const index = q * (sorted.length - 1);\r\n    \r\n    if (Number.isInteger(index)) {\r\n      return sorted[index];\r\n    } else {\r\n      const lower = Math.floor(index);\r\n      const upper = Math.ceil(index);\r\n      const weight = index - lower;\r\n      return sorted[lower] * (1 - weight) + sorted[upper] * weight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate interquartile range (IQR)\r\n   */\r\n  static interquartileRange(data: number[]): number {\r\n    const q1 = this.quantile(data, 0.25);\r\n    const q3 = this.quantile(data, 0.75);\r\n    return q3 - q1;\r\n  }\r\n\r\n  /**\r\n   * Detect outliers using IQR method\r\n   */\r\n  static detectOutliers(data: number[], multiplier: number = 1.5): { outliers: number[]; indices: number[] } {\r\n    const q1 = this.quantile(data, 0.25);\r\n    const q3 = this.quantile(data, 0.75);\r\n    const iqr = q3 - q1;\r\n    const lowerBound = q1 - multiplier * iqr;\r\n    const upperBound = q3 + multiplier * iqr;\r\n    \r\n    const outliers: number[] = [];\r\n    const indices: number[] = [];\r\n    \r\n    data.forEach((value, index) => {\r\n      if (value < lowerBound || value > upperBound) {\r\n        outliers.push(value);\r\n        indices.push(index);\r\n      }\r\n    });\r\n    \r\n    return { outliers, indices };\r\n  }\r\n\r\n  /**\r\n   * Calculate z-scores\r\n   */\r\n  static zScores(data: number[]): number[] {\r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    \r\n    if (std === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - mean) / std);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling statistics\r\n   */\r\n  static rollingStatistic(\r\n    data: number[], \r\n    window: number, \r\n    statistic: 'mean' | 'std' | 'var' | 'min' | 'max' | 'median' | 'skewness' | 'kurtosis'\r\n  ): number[] {\r\n    if (window <= 0 || window > data.length) {\r\n      throw new Error('Invalid window size');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const windowData = data.slice(i - window + 1, i + 1);\r\n      \r\n      switch (statistic) {\r\n        case 'mean':\r\n          result.push(this.mean(windowData));\r\n          break;\r\n        case 'std':\r\n          result.push(this.standardDeviation(windowData));\r\n          break;\r\n        case 'var':\r\n          result.push(this.variance(windowData));\r\n          break;\r\n        case 'min':\r\n          result.push(Math.min(...windowData));\r\n          break;\r\n        case 'max':\r\n          result.push(Math.max(...windowData));\r\n          break;\r\n        case 'median':\r\n          result.push(this.median(windowData));\r\n          break;\r\n        case 'skewness':\r\n          result.push(windowData.length >= 3 ? this.skewness(windowData) : 0);\r\n          break;\r\n        case 'kurtosis':\r\n          result.push(windowData.length >= 4 ? this.kurtosis(windowData) : 0);\r\n          break;\r\n        default:\r\n          throw new Error(`Unknown statistic: ${statistic}`);\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate Value at Risk (VaR)\r\n   */\r\n  static valueAtRisk(returns: number[], confidenceLevel: number = 0.95): number {\r\n    if (confidenceLevel <= 0 || confidenceLevel >= 1) {\r\n      throw new Error('Confidence level must be between 0 and 1');\r\n    }\r\n    \r\n    return -this.quantile(returns, 1 - confidenceLevel);\r\n  }\r\n\r\n  /**\r\n   * Calculate Expected Shortfall (Conditional VaR)\r\n   */\r\n  static expectedShortfall(returns: number[], confidenceLevel: number = 0.95): number {\r\n    const varValue = this.valueAtRisk(returns, confidenceLevel);\r\n    const tailReturns = returns.filter(r => r <= -varValue);\r\n    \r\n    if (tailReturns.length === 0) {\r\n      return varValue;\r\n    }\r\n    \r\n    return -this.mean(tailReturns);\r\n  }\r\n\r\n  /**\r\n   * Calculate maximum drawdown\r\n   */\r\n  static maxDrawdown(cumulativeReturns: number[]): { maxDrawdown: number; peak: number; trough: number } {\r\n    if (cumulativeReturns.length === 0) {\r\n      throw new Error('Cannot calculate max drawdown of empty array');\r\n    }\r\n    \r\n    let peak = cumulativeReturns[0];\r\n    let maxDrawdown = 0;\r\n    let peakIndex = 0;\r\n    let troughIndex = 0;\r\n    \r\n    for (let i = 1; i < cumulativeReturns.length; i++) {\r\n      if (cumulativeReturns[i] > peak) {\r\n        peak = cumulativeReturns[i];\r\n        peakIndex = i;\r\n      }\r\n      \r\n      const drawdown = (peak - cumulativeReturns[i]) / peak;\r\n      if (drawdown > maxDrawdown) {\r\n        maxDrawdown = drawdown;\r\n        troughIndex = i;\r\n      }\r\n    }\r\n    \r\n    return {\r\n      maxDrawdown,\r\n      peak: peakIndex,\r\n      trough: troughIndex\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate Sharpe ratio\r\n   */\r\n  static sharpeRatio(returns: number[], riskFreeRate: number = 0): number {\r\n    const excessReturns = returns.map(r => r - riskFreeRate);\r\n    const meanExcessReturn = this.mean(excessReturns);\r\n    const std = this.standardDeviation(excessReturns);\r\n    \r\n    if (std === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : (meanExcessReturn < 0 ? -Infinity : 0);\r\n    }\r\n    \r\n    return meanExcessReturn / std;\r\n  }\r\n\r\n  /**\r\n   * Calculate Sortino ratio\r\n   */\r\n  static sortinoRatio(returns: number[], riskFreeRate: number = 0, targetReturn: number = 0): number {\r\n    const excessReturns = returns.map(r => r - riskFreeRate);\r\n    const meanExcessReturn = this.mean(excessReturns);\r\n    \r\n    const downsideReturns = returns.filter(r => r < targetReturn);\r\n    if (downsideReturns.length === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    const downsideDeviation = Math.sqrt(\r\n      downsideReturns.reduce((sum, r) => sum + Math.pow(r - targetReturn, 2), 0) / downsideReturns.length\r\n    );\r\n    \r\n    if (downsideDeviation === 0) {\r\n      return meanExcessReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    return meanExcessReturn / downsideDeviation;\r\n  }\r\n\r\n  /**\r\n   * Calculate Calmar ratio\r\n   */\r\n  static calmarRatio(returns: number[]): number {\r\n    const cumulativeReturns = this.cumulativeSum(returns);\r\n    const totalReturn = cumulativeReturns[cumulativeReturns.length - 1];\r\n    const { maxDrawdown } = this.maxDrawdown(cumulativeReturns);\r\n    \r\n    if (maxDrawdown === 0) {\r\n      return totalReturn > 0 ? Infinity : 0;\r\n    }\r\n    \r\n    return totalReturn / maxDrawdown;\r\n  }\r\n\r\n  /**\r\n   * Calculate cumulative sum\r\n   */\r\n  static cumulativeSum(data: number[]): number[] {\r\n    const result: number[] = [];\r\n    let sum = 0;\r\n    \r\n    for (const value of data) {\r\n      sum += value;\r\n      result.push(sum);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate cumulative product\r\n   */\r\n  static cumulativeProduct(data: number[]): number[] {\r\n    const result: number[] = [];\r\n    let product = 1;\r\n    \r\n    for (const value of data) {\r\n      product *= (1 + value);\r\n      result.push(product - 1);\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate sum\r\n   */\r\n  static sum(data: number[]): number {\r\n    return data.reduce((sum, value) => sum + value, 0);\r\n  }\r\n\r\n  /**\r\n   * Calculate product\r\n   */\r\n  static product(data: number[]): number {\r\n    return data.reduce((product, value) => product * value, 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate range (max - min)\r\n   */\r\n  static range(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate range of empty array');\r\n    }\r\n    return Math.max(...data) - Math.min(...data);\r\n  }\r\n\r\n  /**\r\n   * Calculate coefficient of variation\r\n   */\r\n  static coefficientOfVariation(data: number[]): number {\r\n    const mean = this.mean(data);\r\n    const std = this.standardDeviation(data);\r\n    \r\n    if (mean === 0) {\r\n      throw new Error('Cannot calculate coefficient of variation when mean is zero');\r\n    }\r\n    \r\n    return std / Math.abs(mean);\r\n  }\r\n\r\n  /**\r\n   * Perform Jarque-Bera test for normality\r\n   */\r\n  static jarqueBeraTest(data: number[]): { statistic: number; pValue: number; isNormal: boolean } {\r\n    if (data.length < 4) {\r\n      throw new Error('Need at least 4 data points for Jarque-Bera test');\r\n    }\r\n    \r\n    const n = data.length;\r\n    const skew = this.skewness(data);\r\n    const kurt = this.kurtosis(data, true); // excess kurtosis\r\n    \r\n    const jb = (n / 6) * (Math.pow(skew, 2) + Math.pow(kurt, 2) / 4);\r\n    \r\n    // Approximate p-value using chi-square distribution with 2 degrees of freedom\r\n    // This is a simplified approximation\r\n    const pValue = 1 - this.chiSquareCDF(jb, 2);\r\n    \r\n    return {\r\n      statistic: jb,\r\n      pValue,\r\n      isNormal: pValue > 0.05 // 5% significance level\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Approximate chi-square CDF (simplified implementation)\r\n   */\r\n  private static chiSquareCDF(x: number, df: number): number {\r\n    if (x <= 0) return 0;\r\n    if (df === 2) {\r\n      return 1 - Math.exp(-x / 2);\r\n    }\r\n    // For other degrees of freedom, use a simple approximation\r\n    // In a production environment, you'd want a more accurate implementation\r\n    return Math.min(1, x / (2 * df));\r\n  }\r\n\r\n  /**\r\n   * Calculate autocorrelation at given lag\r\n   */\r\n  static autocorrelation(data: number[], lag: number): number {\r\n    if (lag >= data.length || lag < 0) {\r\n      throw new Error('Invalid lag for autocorrelation calculation');\r\n    }\r\n    \r\n    const n = data.length - lag;\r\n    const x1 = data.slice(0, n);\r\n    const x2 = data.slice(lag, lag + n);\r\n    \r\n    const mean1 = this.mean(x1);\r\n    const mean2 = this.mean(x2);\r\n    \r\n    let numerator = 0;\r\n    let denominator1 = 0;\r\n    let denominator2 = 0;\r\n    \r\n    for (let i = 0; i < n; i++) {\r\n      const diff1 = x1[i] - mean1;\r\n      const diff2 = x2[i] - mean2;\r\n      numerator += diff1 * diff2;\r\n      denominator1 += diff1 * diff1;\r\n      denominator2 += diff2 * diff2;\r\n    }\r\n    \r\n    const denominator = Math.sqrt(denominator1 * denominator2);\r\n    \r\n    if (denominator === 0) {\r\n      return 0;\r\n    }\r\n    \r\n    return numerator / denominator;\r\n  }\r\n\r\n  /**\r\n   * Calculate multiple autocorrelations\r\n   */\r\n  static autocorrelationFunction(data: number[], maxLag: number): number[] {\r\n    const result: number[] = [];\r\n    \r\n    for (let lag = 0; lag <= maxLag; lag++) {\r\n      if (lag === 0) {\r\n        result.push(1); // Autocorrelation at lag 0 is always 1\r\n      } else {\r\n        result.push(this.autocorrelation(data, lag));\r\n      }\r\n    }\r\n    \r\n    return result;\r\n  }\r\n}","/**\r\n * Mathematical Utilities\r\n * \r\n * Core mathematical functions and utilities for financial calculations.\r\n */\r\n\r\n/**\r\n * Mathematical utility functions\r\n */\r\nexport class MathUtils {\r\n  /**\r\n   * Calculate the natural logarithm with safety checks\r\n   */\r\n  static safeLog(value: number): number {\r\n    if (value <= 0) {\r\n      throw new Error(`Cannot calculate log of non-positive value: ${value}`);\r\n    }\r\n    return Math.log(value);\r\n  }\r\n\r\n  /**\r\n   * Calculate square root with safety checks\r\n   */\r\n  static safeSqrt(value: number): number {\r\n    if (value < 0) {\r\n      throw new Error(`Cannot calculate square root of negative value: ${value}`);\r\n    }\r\n    return Math.sqrt(value);\r\n  }\r\n\r\n  /**\r\n   * Calculate percentage change between two values\r\n   */\r\n  static percentageChange(oldValue: number, newValue: number): number {\r\n    if (oldValue === 0) {\r\n      return newValue === 0 ? 0 : Infinity;\r\n    }\r\n    return (newValue - oldValue) / Math.abs(oldValue);\r\n  }\r\n\r\n  /**\r\n   * Calculate log returns\r\n   */\r\n  static logReturn(price1: number, price2: number): number {\r\n    if (price1 <= 0 || price2 <= 0) {\r\n      throw new Error('Prices must be positive for log return calculation');\r\n    }\r\n    return Math.log(price2 / price1);\r\n  }\r\n\r\n  /**\r\n   * Calculate simple returns\r\n   */\r\n  static simpleReturn(price1: number, price2: number): number {\r\n    if (price1 === 0) {\r\n      throw new Error('Initial price cannot be zero for simple return calculation');\r\n    }\r\n    return (price2 - price1) / price1;\r\n  }\r\n\r\n  /**\r\n   * Calculate compound annual growth rate (CAGR)\r\n   */\r\n  static cagr(beginValue: number, endValue: number, periods: number): number {\r\n    if (beginValue <= 0 || endValue <= 0) {\r\n      throw new Error('Values must be positive for CAGR calculation');\r\n    }\r\n    if (periods <= 0) {\r\n      throw new Error('Periods must be positive for CAGR calculation');\r\n    }\r\n    return Math.pow(endValue / beginValue, 1 / periods) - 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate annualized return\r\n   */\r\n  static annualizeReturn(totalReturn: number, periods: number, periodsPerYear: number = 252): number {\r\n    return Math.pow(1 + totalReturn, periodsPerYear / periods) - 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate annualized volatility\r\n   */\r\n  static annualizeVolatility(volatility: number, periodsPerYear: number = 252): number {\r\n    return volatility * Math.sqrt(periodsPerYear);\r\n  }\r\n\r\n  /**\r\n   * Linear interpolation\r\n   */\r\n  static linearInterpolate(x0: number, y0: number, x1: number, y1: number, x: number): number {\r\n    if (x1 === x0) {\r\n      return y0;\r\n    }\r\n    return y0 + (y1 - y0) * (x - x0) / (x1 - x0);\r\n  }\r\n\r\n  /**\r\n   * Clamp value between min and max\r\n   */\r\n  static clamp(value: number, min: number, max: number): number {\r\n    return Math.min(Math.max(value, min), max);\r\n  }\r\n\r\n  /**\r\n   * Check if number is approximately equal (within tolerance)\r\n   */\r\n  static isApproximatelyEqual(a: number, b: number, tolerance: number = 1e-10): boolean {\r\n    return Math.abs(a - b) < tolerance;\r\n  }\r\n\r\n  /**\r\n   * Round to specified decimal places\r\n   */\r\n  static roundTo(value: number, decimals: number): number {\r\n    const factor = Math.pow(10, decimals);\r\n    return Math.round(value * factor) / factor;\r\n  }\r\n\r\n  /**\r\n   * Calculate factorial\r\n   */\r\n  static factorial(n: number): number {\r\n    if (n < 0 || !Number.isInteger(n)) {\r\n      throw new Error('Factorial is only defined for non-negative integers');\r\n    }\r\n    if (n === 0 || n === 1) return 1;\r\n    let result = 1;\r\n    for (let i = 2; i <= n; i++) {\r\n      result *= i;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate combination (n choose k)\r\n   */\r\n  static combination(n: number, k: number): number {\r\n    if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\r\n      throw new Error('Invalid parameters for combination calculation');\r\n    }\r\n    if (k === 0 || k === n) return 1;\r\n    \r\n    // Use the more efficient formula: C(n,k) = n! / (k! * (n-k)!)\r\n    // But calculate it iteratively to avoid large factorials\r\n    let result = 1;\r\n    for (let i = 0; i < k; i++) {\r\n      result = result * (n - i) / (i + 1);\r\n    }\r\n    return Math.round(result);\r\n  }\r\n\r\n  /**\r\n   * Calculate permutation (n P k)\r\n   */\r\n  static permutation(n: number, k: number): number {\r\n    if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\r\n      throw new Error('Invalid parameters for permutation calculation');\r\n    }\r\n    let result = 1;\r\n    for (let i = 0; i < k; i++) {\r\n      result *= (n - i);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate greatest common divisor\r\n   */\r\n  static gcd(a: number, b: number): number {\r\n    a = Math.abs(Math.floor(a));\r\n    b = Math.abs(Math.floor(b));\r\n    while (b !== 0) {\r\n      const temp = b;\r\n      b = a % b;\r\n      a = temp;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /**\r\n   * Calculate least common multiple\r\n   */\r\n  static lcm(a: number, b: number): number {\r\n    return Math.abs(a * b) / this.gcd(a, b);\r\n  }\r\n\r\n  /**\r\n   * Generate array of numbers from start to end with step\r\n   */\r\n  static range(start: number, end: number, step: number = 1): number[] {\r\n    const result: number[] = [];\r\n    if (step > 0) {\r\n      for (let i = start; i < end; i += step) {\r\n        result.push(i);\r\n      }\r\n    } else if (step < 0) {\r\n      for (let i = start; i > end; i += step) {\r\n        result.push(i);\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate linearly spaced array\r\n   */\r\n  static linspace(start: number, end: number, num: number): number[] {\r\n    if (num <= 0) {\r\n      throw new Error('Number of points must be positive');\r\n    }\r\n    if (num === 1) {\r\n      return [start];\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    const step = (end - start) / (num - 1);\r\n    for (let i = 0; i < num; i++) {\r\n      result.push(start + i * step);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Generate logarithmically spaced array\r\n   */\r\n  static logspace(start: number, end: number, num: number, base: number = 10): number[] {\r\n    const linearPoints = this.linspace(start, end, num);\r\n    return linearPoints.map(x => Math.pow(base, x));\r\n  }\r\n\r\n  /**\r\n   * Calculate moving average\r\n   */\r\n  static movingAverage(data: number[], window: number): number[] {\r\n    if (window <= 0 || window > data.length) {\r\n      throw new Error('Invalid window size for moving average');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const sum = data.slice(i - window + 1, i + 1).reduce((a, b) => a + b, 0);\r\n      result.push(sum / window);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate exponential moving average\r\n   */\r\n  static exponentialMovingAverage(data: number[], alpha: number): number[] {\r\n    if (alpha <= 0 || alpha > 1) {\r\n      throw new Error('Alpha must be between 0 and 1 for EMA calculation');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    let ema = data[0];\r\n    result.push(ema);\r\n    \r\n    for (let i = 1; i < data.length; i++) {\r\n      ema = alpha * data[i] + (1 - alpha) * ema;\r\n      result.push(ema);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate weighted moving average\r\n   */\r\n  static weightedMovingAverage(data: number[], weights: number[]): number[] {\r\n    if (weights.length === 0) {\r\n      throw new Error('Weights array cannot be empty');\r\n    }\r\n    \r\n    const window = weights.length;\r\n    const weightSum = weights.reduce((a, b) => a + b, 0);\r\n    \r\n    if (Math.abs(weightSum) < 1e-10) {\r\n      throw new Error('Sum of weights cannot be zero');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < data.length; i++) {\r\n      let weightedSum = 0;\r\n      for (let j = 0; j < window; j++) {\r\n        weightedSum += data[i - window + 1 + j] * weights[j];\r\n      }\r\n      result.push(weightedSum / weightSum);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling correlation\r\n   */\r\n  static rollingCorrelation(x: number[], y: number[], window: number): number[] {\r\n    if (x.length !== y.length) {\r\n      throw new Error('Arrays must have the same length for correlation calculation');\r\n    }\r\n    if (window <= 1 || window > x.length) {\r\n      throw new Error('Invalid window size for rolling correlation');\r\n    }\r\n    \r\n    const result: number[] = [];\r\n    for (let i = window - 1; i < x.length; i++) {\r\n      const xWindow = x.slice(i - window + 1, i + 1);\r\n      const yWindow = y.slice(i - window + 1, i + 1);\r\n      \r\n      const correlation = this.correlation(xWindow, yWindow);\r\n      result.push(correlation);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Calculate Pearson correlation coefficient\r\n   */\r\n  static correlation(x: number[], y: number[]): number {\r\n    if (x.length !== y.length || x.length === 0) {\r\n      throw new Error('Arrays must have the same non-zero length for correlation calculation');\r\n    }\r\n    \r\n    const n = x.length;\r\n    const sumX = x.reduce((a, b) => a + b, 0);\r\n    const sumY = y.reduce((a, b) => a + b, 0);\r\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\r\n    const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\r\n    const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);\r\n    \r\n    const numerator = n * sumXY - sumX * sumY;\r\n    const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\r\n    \r\n    if (Math.abs(denominator) < 1e-10) {\r\n      return 0; // No correlation when denominator is zero\r\n    }\r\n    \r\n    return numerator / denominator;\r\n  }\r\n\r\n  /**\r\n   * Calculate covariance\r\n   */\r\n  static covariance(x: number[], y: number[]): number {\r\n    if (x.length !== y.length || x.length === 0) {\r\n      throw new Error('Arrays must have the same non-zero length for covariance calculation');\r\n    }\r\n    \r\n    const n = x.length;\r\n    const meanX = x.reduce((a, b) => a + b, 0) / n;\r\n    const meanY = y.reduce((a, b) => a + b, 0) / n;\r\n    \r\n    let covar = 0;\r\n    for (let i = 0; i < n; i++) {\r\n      covar += (x[i] - meanX) * (y[i] - meanY);\r\n    }\r\n    \r\n    return covar / (n - 1);\r\n  }\r\n\r\n  /**\r\n   * Calculate beta coefficient\r\n   */\r\n  static beta(returns: number[], marketReturns: number[]): number {\r\n    const covar = this.covariance(returns, marketReturns);\r\n    const marketVariance = this.variance(marketReturns);\r\n    \r\n    if (Math.abs(marketVariance) < 1e-10) {\r\n      throw new Error('Market variance is zero, cannot calculate beta');\r\n    }\r\n    \r\n    return covar / marketVariance;\r\n  }\r\n\r\n  /**\r\n   * Calculate variance\r\n   */\r\n  static variance(data: number[]): number {\r\n    if (data.length === 0) {\r\n      throw new Error('Cannot calculate variance of empty array');\r\n    }\r\n    \r\n    const mean = data.reduce((a, b) => a + b, 0) / data.length;\r\n    const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\r\n    return squaredDiffs.reduce((a, b) => a + b, 0) / (data.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Normalize array to [0, 1] range\r\n   */\r\n  static normalize(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    const min = Math.min(...data);\r\n    const max = Math.max(...data);\r\n    const range = max - min;\r\n    \r\n    if (range === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - min) / range);\r\n  }\r\n\r\n  /**\r\n   * Standardize array (z-score normalization)\r\n   */\r\n  static standardize(data: number[]): number[] {\r\n    if (data.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    const mean = data.reduce((a, b) => a + b, 0) / data.length;\r\n    const std = Math.sqrt(this.variance(data));\r\n    \r\n    if (std === 0) {\r\n      return data.map(() => 0);\r\n    }\r\n    \r\n    return data.map(x => (x - mean) / std);\r\n  }\r\n}","/**\r\n * Default Configuration\r\n * \r\n * Default settings and constants for the MeridianAlgo-JS library.\r\n */\r\n\r\nimport { PredictorOptions } from '../types/Prediction';\r\nimport { FeatureOptions } from '../types/Features';\r\nimport { OptimizerOptions } from '../types/Portfolio';\r\n\r\n/**\r\n * Default predictor configuration\r\n */\r\nexport const DEFAULT_PREDICTOR_OPTIONS: Required<PredictorOptions> = {\r\n  targetErrorRate: 0.01,\r\n  ensembleSize: 10,\r\n  featureCount: 1000,\r\n  trainingRatio: 0.8,\r\n  crossValidationFolds: 5,\r\n  hyperparameterTuning: true,\r\n  parallelProcessing: true,\r\n  cacheFeatures: true,\r\n  incrementalLearning: false,\r\n  updateFrequency: 'batch',\r\n  predictionHorizon: 1,\r\n  confidenceThreshold: 0.8\r\n};\r\n\r\n/**\r\n * Default feature engineering configuration\r\n */\r\nexport const DEFAULT_FEATURE_OPTIONS: Required<FeatureOptions> = {\r\n  targetFeatureCount: 1000,\r\n  enableAdvancedFeatures: true,\r\n  enableMicrostructure: true,\r\n  enableVolatilityFeatures: true,\r\n  enableStatisticalFeatures: true,\r\n  enableHarmonicFeatures: true,\r\n  enableCrossAssetFeatures: false,\r\n  lookbackPeriods: [5, 10, 20, 50, 100, 200],\r\n  technicalIndicators: {\r\n    rsi: { periods: [7, 14, 21, 28] },\r\n    macd: { fast: 12, slow: 26, signal: 9 },\r\n    bollinger: { period: 20, multiplier: 2 },\r\n    stochastic: { kPeriod: 14, dPeriod: 3 },\r\n    williams: { period: 14 },\r\n    cci: { period: 20 }\r\n  }\r\n};\r\n\r\n/**\r\n * Default portfolio optimizer configuration\r\n */\r\nexport const DEFAULT_OPTIMIZER_OPTIONS: OptimizerOptions = {\r\n  objective: 'sharpe',\r\n  constraints: {\r\n    minWeight: 0.0,\r\n    maxWeight: 1.0,\r\n    minTotalWeight: 0.99,\r\n    maxTotalWeight: 1.01,\r\n    longOnly: true\r\n  },\r\n  riskModel: 'historical',\r\n  optimizationMethod: 'quadratic',\r\n  rebalanceFrequency: 'monthly'\r\n};\r\n\r\n/**\r\n * Default library configuration\r\n */\r\nexport const DEFAULT_CONFIG = {\r\n  predictor: DEFAULT_PREDICTOR_OPTIONS,\r\n  features: DEFAULT_FEATURE_OPTIONS,\r\n  optimizer: DEFAULT_OPTIMIZER_OPTIONS,\r\n  \r\n  // Performance settings\r\n  performance: {\r\n    enableParallelProcessing: true,\r\n    maxWorkers: 4,\r\n    cacheSize: 1000,\r\n    memoryLimit: 512 * 1024 * 1024, // 512MB\r\n    enableProfiling: false\r\n  },\r\n  \r\n  // Validation settings\r\n  validation: {\r\n    strictMode: true,\r\n    autoSanitize: true,\r\n    warningsAsErrors: false\r\n  },\r\n  \r\n  // Logging settings\r\n  logging: {\r\n    level: 'info',\r\n    enableConsole: true,\r\n    enableFile: false,\r\n    maxLogSize: 10 * 1024 * 1024 // 10MB\r\n  }\r\n};\r\n\r\n/**\r\n * Mathematical constants\r\n */\r\nexport const MATH_CONSTANTS = {\r\n  EPSILON: 1e-10,\r\n  PI: Math.PI,\r\n  E: Math.E,\r\n  GOLDEN_RATIO: (1 + Math.sqrt(5)) / 2,\r\n  SQRT_2: Math.sqrt(2),\r\n  SQRT_PI: Math.sqrt(Math.PI)\r\n};\r\n\r\n/**\r\n * Financial constants\r\n */\r\nexport const FINANCIAL_CONSTANTS = {\r\n  TRADING_DAYS_PER_YEAR: 252,\r\n  CALENDAR_DAYS_PER_YEAR: 365,\r\n  HOURS_PER_TRADING_DAY: 6.5,\r\n  MINUTES_PER_TRADING_DAY: 390,\r\n  SECONDS_PER_TRADING_DAY: 23400,\r\n  \r\n  // Risk-free rates (approximate)\r\n  US_TREASURY_10Y: 0.04, // 4%\r\n  US_TREASURY_3M: 0.035,  // 3.5%\r\n  \r\n  // Market benchmarks\r\n  SP500_ANNUAL_RETURN: 0.10,    // 10%\r\n  SP500_ANNUAL_VOLATILITY: 0.16, // 16%\r\n  \r\n  // Common thresholds\r\n  OVERBOUGHT_RSI: 70,\r\n  OVERSOLD_RSI: 30,\r\n  HIGH_VOLATILITY_THRESHOLD: 0.25, // 25%\r\n  LOW_VOLATILITY_THRESHOLD: 0.10   // 10%\r\n};\r\n\r\n/**\r\n * Data validation constants\r\n */\r\nexport const VALIDATION_CONSTANTS = {\r\n  MIN_DATA_POINTS: 50,\r\n  MAX_MISSING_DATA_RATIO: 0.05, // 5%\r\n  MAX_OUTLIER_RATIO: 0.02,       // 2%\r\n  \r\n  // Price validation\r\n  MAX_DAILY_RETURN: 0.50,        // 50%\r\n  MIN_PRICE: 0.001,\r\n  MAX_PRICE: 1000000,\r\n  \r\n  // Volume validation\r\n  MIN_VOLUME: 0,\r\n  MAX_VOLUME_SPIKE: 10, // 10x average volume\r\n  \r\n  // Time validation\r\n  MAX_TIME_GAP_HOURS: 72, // 3 days\r\n  MIN_TIME_INTERVAL_MS: 1000 // 1 second\r\n};\r\n\r\n/**\r\n * Performance benchmarks\r\n */\r\nexport const PERFORMANCE_BENCHMARKS = {\r\n  // Target processing times (milliseconds)\r\n  FEATURE_GENERATION_TARGET: 100,\r\n  PREDICTION_TARGET: 10,\r\n  PORTFOLIO_OPTIMIZATION_TARGET: 1000,\r\n  \r\n  // Memory usage targets (bytes)\r\n  MAX_FEATURE_MATRIX_SIZE: 100 * 1024 * 1024, // 100MB\r\n  MAX_MODEL_SIZE: 50 * 1024 * 1024,           // 50MB\r\n  \r\n  // Accuracy targets\r\n  MIN_PREDICTION_ACCURACY: 0.55,  // 55%\r\n  TARGET_PREDICTION_ACCURACY: 0.65, // 65%\r\n  EXCELLENT_PREDICTION_ACCURACY: 0.75 // 75%\r\n};\r\n\r\n/**\r\n * Error codes and messages\r\n */\r\nexport const ERROR_CODES = {\r\n  // Data errors\r\n  INVALID_DATA: 'INVALID_DATA',\r\n  INSUFFICIENT_DATA: 'INSUFFICIENT_DATA',\r\n  MISSING_DATA: 'MISSING_DATA',\r\n  \r\n  // Model errors\r\n  MODEL_NOT_TRAINED: 'MODEL_NOT_TRAINED',\r\n  TRAINING_FAILED: 'TRAINING_FAILED',\r\n  PREDICTION_FAILED: 'PREDICTION_FAILED',\r\n  \r\n  // Configuration errors\r\n  INVALID_CONFIG: 'INVALID_CONFIG',\r\n  MISSING_CONFIG: 'MISSING_CONFIG',\r\n  \r\n  // Performance errors\r\n  MEMORY_LIMIT_EXCEEDED: 'MEMORY_LIMIT_EXCEEDED',\r\n  TIMEOUT_EXCEEDED: 'TIMEOUT_EXCEEDED',\r\n  \r\n  // Portfolio errors\r\n  OPTIMIZATION_FAILED: 'OPTIMIZATION_FAILED',\r\n  INVALID_WEIGHTS: 'INVALID_WEIGHTS',\r\n  CONSTRAINT_VIOLATION: 'CONSTRAINT_VIOLATION'\r\n};\r\n\r\n/**\r\n * Feature categories\r\n */\r\nexport const FEATURE_CATEGORIES = {\r\n  TECHNICAL: 'technical',\r\n  STATISTICAL: 'statistical',\r\n  MICROSTRUCTURE: 'microstructure',\r\n  VOLATILITY: 'volatility',\r\n  HARMONIC: 'harmonic',\r\n  CROSS_ASSET: 'cross_asset',\r\n  SENTIMENT: 'sentiment',\r\n  FUNDAMENTAL: 'fundamental'\r\n};\r\n\r\n/**\r\n * Model types\r\n */\r\nexport const MODEL_TYPES = {\r\n  RANDOM_FOREST: 'randomForest',\r\n  NEURAL_NETWORK: 'neuralNetwork',\r\n  SVM: 'svm',\r\n  GRADIENT_BOOSTING: 'gradientBoosting',\r\n  LINEAR_REGRESSION: 'linearRegression',\r\n  ENSEMBLE: 'ensemble'\r\n};\r\n\r\n/**\r\n * Optimization objectives\r\n */\r\nexport const OPTIMIZATION_OBJECTIVES = {\r\n  SHARPE: 'sharpe',\r\n  RETURN: 'return',\r\n  RISK: 'risk',\r\n  SORTINO: 'sortino',\r\n  CALMAR: 'calmar',\r\n  CUSTOM: 'custom'\r\n};\r\n\r\n/**\r\n * Rebalancing frequencies\r\n */\r\nexport const REBALANCE_FREQUENCIES = {\r\n  DAILY: 'daily',\r\n  WEEKLY: 'weekly',\r\n  MONTHLY: 'monthly',\r\n  QUARTERLY: 'quarterly',\r\n  ANNUALLY: 'annually',\r\n  THRESHOLD: 'threshold'\r\n};\r\n\r\n/**\r\n * Market regimes\r\n */\r\nexport const MARKET_REGIMES = {\r\n  BULL: 'bull',\r\n  BEAR: 'bear',\r\n  SIDEWAYS: 'sideways',\r\n  VOLATILE: 'volatile',\r\n  CALM: 'calm'\r\n};\r\n\r\n/**\r\n * Risk levels\r\n */\r\nexport const RISK_LEVELS = {\r\n  LOW: 'low',\r\n  MEDIUM: 'medium',\r\n  HIGH: 'high',\r\n  EXTREME: 'extreme'\r\n};\r\n\r\n/**\r\n * Alert severities\r\n */\r\nexport const ALERT_SEVERITIES = {\r\n  LOW: 'low',\r\n  MEDIUM: 'medium',\r\n  HIGH: 'high',\r\n  CRITICAL: 'critical'\r\n};","/**\r\n * Technical Indicators\r\n * \r\n * Comprehensive collection of technical analysis indicators for financial markets.\r\n */\r\n\r\nimport { MarketData } from '../types/MarketData';\r\nimport { MACDResult, BollingerBandsResult, StochasticResult } from '../types/Features';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\n\r\n/**\r\n * Technical indicator calculations\r\n */\r\nexport class TechnicalIndicators {\r\n  /**\r\n   * Simple Moving Average (SMA)\r\n   */\r\n  static sma(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for SMA calculation');\r\n    }\r\n    \r\n    return MathUtils.movingAverage(data, period);\r\n  }\r\n\r\n  /**\r\n   * Exponential Moving Average (EMA)\r\n   */\r\n  static ema(data: number[], period: number): number[] {\r\n    if (period <= 0) {\r\n      throw new Error('Period must be positive for EMA calculation');\r\n    }\r\n    \r\n    const alpha = 2 / (period + 1);\r\n    return MathUtils.exponentialMovingAverage(data, alpha);\r\n  }\r\n\r\n  /**\r\n   * Weighted Moving Average (WMA)\r\n   */\r\n  static wma(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for WMA calculation');\r\n    }\r\n    \r\n    const weights = Array.from({ length: period }, (_, i) => i + 1);\r\n    return MathUtils.weightedMovingAverage(data, weights);\r\n  }\r\n\r\n  /**\r\n   * Relative Strength Index (RSI)\r\n   */\r\n  static rsi(data: number[], period: number = 14): number[] {\r\n    if (period <= 0 || data.length < period + 1) {\r\n      throw new Error('Insufficient data or invalid period for RSI calculation');\r\n    }\r\n    \r\n    const changes: number[] = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n      changes.push(data[i] - data[i - 1]);\r\n    }\r\n    \r\n    const gains = changes.map(change => Math.max(change, 0));\r\n    const losses = changes.map(change => Math.max(-change, 0));\r\n    \r\n    const avgGains = this.sma(gains, period);\r\n    const avgLosses = this.sma(losses, period);\r\n    \r\n    const rsiValues: number[] = [];\r\n    for (let i = 0; i < avgGains.length; i++) {\r\n      if (avgLosses[i] === 0) {\r\n        rsiValues.push(100);\r\n      } else {\r\n        const rs = avgGains[i] / avgLosses[i];\r\n        rsiValues.push(100 - (100 / (1 + rs)));\r\n      }\r\n    }\r\n    \r\n    return rsiValues;\r\n  }\r\n\r\n  /**\r\n   * Moving Average Convergence Divergence (MACD)\r\n   */\r\n  static macd(data: number[], fastPeriod: number = 12, slowPeriod: number = 26, signalPeriod: number = 9): MACDResult {\r\n    if (fastPeriod >= slowPeriod) {\r\n      throw new Error('Fast period must be less than slow period for MACD');\r\n    }\r\n    \r\n    const fastEMA = this.ema(data, fastPeriod);\r\n    const slowEMA = this.ema(data, slowPeriod);\r\n    \r\n    // Align arrays (slowEMA is shorter)\r\n    const startIndex = slowPeriod - fastPeriod;\r\n    const alignedFastEMA = fastEMA.slice(startIndex);\r\n    \r\n    const macdLine = alignedFastEMA.map((fast, i) => fast - slowEMA[i]);\r\n    const signalLine = this.ema(macdLine, signalPeriod);\r\n    \r\n    // Align MACD line with signal line\r\n    const alignedMACDLine = macdLine.slice(macdLine.length - signalLine.length);\r\n    const histogram = alignedMACDLine.map((macd, i) => macd - signalLine[i]);\r\n    \r\n    return {\r\n      macd: alignedMACDLine,\r\n      signal: signalLine,\r\n      histogram\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Bollinger Bands\r\n   */\r\n  static bollingerBands(data: number[], period: number = 20, multiplier: number = 2): BollingerBandsResult {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for Bollinger Bands calculation');\r\n    }\r\n    \r\n    const smaValues = this.sma(data, period);\r\n    const upper: number[] = [];\r\n    const lower: number[] = [];\r\n    const bandwidth: number[] = [];\r\n    const percentB: number[] = [];\r\n    \r\n    for (let i = 0; i < smaValues.length; i++) {\r\n      const dataSlice = data.slice(i, i + period);\r\n      const std = StatisticsUtils.standardDeviation(dataSlice);\r\n      \r\n      const upperBand = smaValues[i] + multiplier * std;\r\n      const lowerBand = smaValues[i] - multiplier * std;\r\n      \r\n      upper.push(upperBand);\r\n      lower.push(lowerBand);\r\n      bandwidth.push((upperBand - lowerBand) / smaValues[i]);\r\n      \r\n      const currentPrice = data[i + period - 1];\r\n      percentB.push((currentPrice - lowerBand) / (upperBand - lowerBand));\r\n    }\r\n    \r\n    return {\r\n      upper,\r\n      middle: smaValues,\r\n      lower,\r\n      bandwidth,\r\n      percentB\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Stochastic Oscillator\r\n   */\r\n  static stochastic(high: number[], low: number[], close: number[], kPeriod: number = 14, dPeriod: number = 3): StochasticResult {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const k: number[] = [];\r\n    \r\n    for (let i = kPeriod - 1; i < close.length; i++) {\r\n      const highestHigh = Math.max(...high.slice(i - kPeriod + 1, i + 1));\r\n      const lowestLow = Math.min(...low.slice(i - kPeriod + 1, i + 1));\r\n      \r\n      if (highestHigh === lowestLow) {\r\n        k.push(50); // Avoid division by zero\r\n      } else {\r\n        k.push(((close[i] - lowestLow) / (highestHigh - lowestLow)) * 100);\r\n      }\r\n    }\r\n    \r\n    const d = this.sma(k, dPeriod);\r\n    \r\n    return {\r\n      k: k.slice(k.length - d.length), // Align with D values\r\n      d\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Williams %R\r\n   */\r\n  static williamsR(high: number[], low: number[], close: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const williamsR: number[] = [];\r\n    \r\n    for (let i = period - 1; i < close.length; i++) {\r\n      const highestHigh = Math.max(...high.slice(i - period + 1, i + 1));\r\n      const lowestLow = Math.min(...low.slice(i - period + 1, i + 1));\r\n      \r\n      if (highestHigh === lowestLow) {\r\n        williamsR.push(-50); // Avoid division by zero\r\n      } else {\r\n        williamsR.push(((highestHigh - close[i]) / (highestHigh - lowestLow)) * -100);\r\n      }\r\n    }\r\n    \r\n    return williamsR;\r\n  }\r\n\r\n  /**\r\n   * Commodity Channel Index (CCI)\r\n   */\r\n  static cci(high: number[], low: number[], close: number[], period: number = 20): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    // Calculate Typical Price\r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    \r\n    const cci: number[] = [];\r\n    \r\n    for (let i = period - 1; i < typicalPrice.length; i++) {\r\n      const tpSlice = typicalPrice.slice(i - period + 1, i + 1);\r\n      const smaTP = StatisticsUtils.mean(tpSlice);\r\n      \r\n      // Calculate Mean Deviation\r\n      const meanDeviation = tpSlice.reduce((sum, tp) => sum + Math.abs(tp - smaTP), 0) / period;\r\n      \r\n      if (meanDeviation === 0) {\r\n        cci.push(0);\r\n      } else {\r\n        cci.push((typicalPrice[i] - smaTP) / (0.015 * meanDeviation));\r\n      }\r\n    }\r\n    \r\n    return cci;\r\n  }\r\n\r\n  /**\r\n   * Average True Range (ATR)\r\n   */\r\n  static atr(high: number[], low: number[], close: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const trueRanges: number[] = [];\r\n    \r\n    for (let i = 1; i < high.length; i++) {\r\n      const tr1 = high[i] - low[i];\r\n      const tr2 = Math.abs(high[i] - close[i - 1]);\r\n      const tr3 = Math.abs(low[i] - close[i - 1]);\r\n      \r\n      trueRanges.push(Math.max(tr1, tr2, tr3));\r\n    }\r\n    \r\n    return this.sma(trueRanges, period);\r\n  }\r\n\r\n  /**\r\n   * Average Directional Index (ADX)\r\n   */\r\n  static adx(high: number[], low: number[], close: number[], period: number = 14): { adx: number[]; plusDI: number[]; minusDI: number[] } {\r\n    if (high.length !== low.length || low.length !== close.length) {\r\n      throw new Error('High, low, and close arrays must have the same length');\r\n    }\r\n    \r\n    const plusDM: number[] = [];\r\n    const minusDM: number[] = [];\r\n    const trueRanges: number[] = [];\r\n    \r\n    for (let i = 1; i < high.length; i++) {\r\n      const highDiff = high[i] - high[i - 1];\r\n      const lowDiff = low[i - 1] - low[i];\r\n      \r\n      plusDM.push(highDiff > lowDiff && highDiff > 0 ? highDiff : 0);\r\n      minusDM.push(lowDiff > highDiff && lowDiff > 0 ? lowDiff : 0);\r\n      \r\n      const tr1 = high[i] - low[i];\r\n      const tr2 = Math.abs(high[i] - close[i - 1]);\r\n      const tr3 = Math.abs(low[i] - close[i - 1]);\r\n      trueRanges.push(Math.max(tr1, tr2, tr3));\r\n    }\r\n    \r\n    const smoothedPlusDM = this.sma(plusDM, period);\r\n    const smoothedMinusDM = this.sma(minusDM, period);\r\n    const smoothedTR = this.sma(trueRanges, period);\r\n    \r\n    const plusDI = smoothedPlusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\r\n    const minusDI = smoothedMinusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\r\n    \r\n    const dx = plusDI.map((plus, i) => {\r\n      const sum = plus + minusDI[i];\r\n      return sum === 0 ? 0 : (Math.abs(plus - minusDI[i]) / sum) * 100;\r\n    });\r\n    \r\n    const adx = this.sma(dx, period);\r\n    \r\n    return {\r\n      adx,\r\n      plusDI: plusDI.slice(plusDI.length - adx.length),\r\n      minusDI: minusDI.slice(minusDI.length - adx.length)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Money Flow Index (MFI)\r\n   */\r\n  static mfi(high: number[], low: number[], close: number[], volume: number[], period: number = 14): number[] {\r\n    if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\r\n      throw new Error('All arrays must have the same length');\r\n    }\r\n    \r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    const rawMoneyFlow = typicalPrice.map((tp, i) => tp * volume[i]);\r\n    \r\n    const mfi: number[] = [];\r\n    \r\n    for (let i = period; i < typicalPrice.length; i++) {\r\n      let positiveFlow = 0;\r\n      let negativeFlow = 0;\r\n      \r\n      for (let j = i - period + 1; j <= i; j++) {\r\n        if (typicalPrice[j] > typicalPrice[j - 1]) {\r\n          positiveFlow += rawMoneyFlow[j];\r\n        } else if (typicalPrice[j] < typicalPrice[j - 1]) {\r\n          negativeFlow += rawMoneyFlow[j];\r\n        }\r\n      }\r\n      \r\n      if (negativeFlow === 0) {\r\n        mfi.push(100);\r\n      } else {\r\n        const moneyRatio = positiveFlow / negativeFlow;\r\n        mfi.push(100 - (100 / (1 + moneyRatio)));\r\n      }\r\n    }\r\n    \r\n    return mfi;\r\n  }\r\n\r\n  /**\r\n   * On-Balance Volume (OBV)\r\n   */\r\n  static obv(close: number[], volume: number[]): number[] {\r\n    if (close.length !== volume.length) {\r\n      throw new Error('Close and volume arrays must have the same length');\r\n    }\r\n    \r\n    const obv: number[] = [volume[0]];\r\n    \r\n    for (let i = 1; i < close.length; i++) {\r\n      if (close[i] > close[i - 1]) {\r\n        obv.push(obv[i - 1] + volume[i]);\r\n      } else if (close[i] < close[i - 1]) {\r\n        obv.push(obv[i - 1] - volume[i]);\r\n      } else {\r\n        obv.push(obv[i - 1]);\r\n      }\r\n    }\r\n    \r\n    return obv;\r\n  }\r\n\r\n  /**\r\n   * Volume Weighted Average Price (VWAP)\r\n   */\r\n  static vwap(high: number[], low: number[], close: number[], volume: number[]): number[] {\r\n    if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\r\n      throw new Error('All arrays must have the same length');\r\n    }\r\n    \r\n    const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\r\n    const vwap: number[] = [];\r\n    \r\n    let cumulativeTPV = 0; // Cumulative Typical Price * Volume\r\n    let cumulativeVolume = 0;\r\n    \r\n    for (let i = 0; i < typicalPrice.length; i++) {\r\n      cumulativeTPV += typicalPrice[i] * volume[i];\r\n      cumulativeVolume += volume[i];\r\n      \r\n      vwap.push(cumulativeVolume === 0 ? typicalPrice[i] : cumulativeTPV / cumulativeVolume);\r\n    }\r\n    \r\n    return vwap;\r\n  }\r\n\r\n  /**\r\n   * Momentum\r\n   */\r\n  static momentum(data: number[], period: number = 10): number[] {\r\n    if (period <= 0 || period >= data.length) {\r\n      throw new Error('Invalid period for momentum calculation');\r\n    }\r\n    \r\n    const momentum: number[] = [];\r\n    \r\n    for (let i = period; i < data.length; i++) {\r\n      momentum.push(data[i] - data[i - period]);\r\n    }\r\n    \r\n    return momentum;\r\n  }\r\n\r\n  /**\r\n   * Rate of Change (ROC)\r\n   */\r\n  static roc(data: number[], period: number = 10): number[] {\r\n    if (period <= 0 || period >= data.length) {\r\n      throw new Error('Invalid period for ROC calculation');\r\n    }\r\n    \r\n    const roc: number[] = [];\r\n    \r\n    for (let i = period; i < data.length; i++) {\r\n      if (data[i - period] === 0) {\r\n        roc.push(0);\r\n      } else {\r\n        roc.push(((data[i] - data[i - period]) / data[i - period]) * 100);\r\n      }\r\n    }\r\n    \r\n    return roc;\r\n  }\r\n\r\n  /**\r\n   * Standard Deviation\r\n   */\r\n  static standardDeviation(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for standard deviation calculation');\r\n    }\r\n    \r\n    return StatisticsUtils.rollingStatistic(data, period, 'std');\r\n  }\r\n\r\n  /**\r\n   * Variance\r\n   */\r\n  static variance(data: number[], period: number): number[] {\r\n    if (period <= 0 || period > data.length) {\r\n      throw new Error('Invalid period for variance calculation');\r\n    }\r\n    \r\n    return StatisticsUtils.rollingStatistic(data, period, 'var');\r\n  }\r\n\r\n  /**\r\n   * Linear Regression Slope\r\n   */\r\n  static linearRegressionSlope(data: number[], period: number): number[] {\r\n    if (period <= 1 || period > data.length) {\r\n      throw new Error('Invalid period for linear regression slope calculation');\r\n    }\r\n    \r\n    const slopes: number[] = [];\r\n    \r\n    for (let i = period - 1; i < data.length; i++) {\r\n      const y = data.slice(i - period + 1, i + 1);\r\n      const x = Array.from({ length: period }, (_, idx) => idx);\r\n      \r\n      const n = period;\r\n      const sumX = x.reduce((sum, val) => sum + val, 0);\r\n      const sumY = y.reduce((sum, val) => sum + val, 0);\r\n      const sumXY = x.reduce((sum, val, idx) => sum + val * y[idx], 0);\r\n      const sumX2 = x.reduce((sum, val) => sum + val * val, 0);\r\n      \r\n      const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n      slopes.push(slope);\r\n    }\r\n    \r\n    return slopes;\r\n  }\r\n\r\n  /**\r\n   * Pivot Points (Standard)\r\n   */\r\n  static pivotPoints(high: number, low: number, close: number): {\r\n    pivot: number;\r\n    r1: number;\r\n    r2: number;\r\n    r3: number;\r\n    s1: number;\r\n    s2: number;\r\n    s3: number;\r\n  } {\r\n    const pivot = (high + low + close) / 3;\r\n    \r\n    return {\r\n      pivot,\r\n      r1: 2 * pivot - low,\r\n      r2: pivot + (high - low),\r\n      r3: high + 2 * (pivot - low),\r\n      s1: 2 * pivot - high,\r\n      s2: pivot - (high - low),\r\n      s3: low - 2 * (high - pivot)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Helper method to extract prices from MarketData array\r\n   */\r\n  static extractPrices(data: MarketData[], priceType: 'open' | 'high' | 'low' | 'close' | 'volume'): number[] {\r\n    return data.map(item => item[priceType]);\r\n  }\r\n\r\n  /**\r\n   * Helper method to extract OHLCV arrays from MarketData\r\n   */\r\n  static extractOHLCV(data: MarketData[]): {\r\n    open: number[];\r\n    high: number[];\r\n    low: number[];\r\n    close: number[];\r\n    volume: number[];\r\n  } {\r\n    return {\r\n      open: data.map(item => item.open),\r\n      high: data.map(item => item.high),\r\n      low: data.map(item => item.low),\r\n      close: data.map(item => item.close),\r\n      volume: data.map(item => item.volume)\r\n    };\r\n  }\r\n}","/**\r\n * Advanced Feature Engineer\r\n * \r\n * Generates 1000+ sophisticated features from basic OHLCV market data\r\n * using advanced technical analysis, statistical methods, and machine learning.\r\n */\r\n\r\nimport { FeatureOptions, FeatureMatrix, FeatureMetadata } from '../types/Features';\r\nimport { MarketData } from '../types/MarketData';\r\nimport { TechnicalIndicators } from '../indicators/TechnicalIndicators';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { DEFAULT_FEATURE_OPTIONS } from '../config/defaults';\r\n\r\n/**\r\n * Advanced feature engineering implementation\r\n */\r\nexport class FeatureEngineer {\r\n  private options: Required<FeatureOptions>;\r\n  private featureNames: string[] = [];\r\n  private featureMetadata: FeatureMetadata[] = [];\r\n\r\n  constructor(options: Partial<FeatureOptions> = {}) {\r\n    this.options = {\r\n      ...DEFAULT_FEATURE_OPTIONS,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate comprehensive feature matrix from market data\r\n   */\r\n  generateFeatures(data: MarketData[]): FeatureMatrix {\r\n    if (data.length < 50) {\r\n      throw new Error('Insufficient data for feature generation. Need at least 50 periods.');\r\n    }\r\n\r\n    console.log(`🔧 Generating advanced features from ${data.length} data points...`);\r\n    \r\n    this.featureNames = [];\r\n    this.featureMetadata = [];\r\n    const features: number[][] = [];\r\n\r\n    // Initialize feature matrix\r\n    for (let i = 0; i < data.length; i++) {\r\n      features.push([]);\r\n    }\r\n\r\n    // 1. Basic OHLCV Features\r\n    this.addBasicFeatures(data, features);\r\n\r\n    // 2. Technical Indicators\r\n    this.addTechnicalIndicators(data, features);\r\n\r\n    // 3. Statistical Features\r\n    if (this.options.enableStatisticalFeatures) {\r\n      this.addStatisticalFeatures(data, features);\r\n    }\r\n\r\n    // 4. Volatility Features\r\n    if (this.options.enableVolatilityFeatures) {\r\n      this.addVolatilityFeatures(data, features);\r\n    }\r\n\r\n    // 5. Cross-sectional Features\r\n    this.addCrossSectionalFeatures(data, features);\r\n\r\n    // 6. Pattern Recognition Features\r\n    this.addPatternFeatures(data, features);\r\n\r\n    // 7. Harmonic Features\r\n    if (this.options.enableHarmonicFeatures) {\r\n      this.addHarmonicFeatures(data, features);\r\n    }\r\n\r\n    console.log(`✨ Generated ${this.featureNames.length} features`);\r\n    \r\n    return {\r\n      data: features,\r\n      featureNames: [...this.featureNames],\r\n      metadata: [...this.featureMetadata],\r\n      columns: this.featureNames.length,\r\n      rows: features.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get feature names\r\n   */\r\n  getFeatureNames(): string[] {\r\n    return [...this.featureNames];\r\n  }\r\n\r\n  /**\r\n   * Get feature metadata\r\n   */\r\n  getFeatureMetadata(): FeatureMetadata[] {\r\n    return [...this.featureMetadata];\r\n  }\r\n\r\n  /**\r\n   * Add basic OHLCV-derived features\r\n   */\r\n  private addBasicFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const opens = data.map(d => d.open);\r\n    const volumes = data.map(d => d.volume);\r\n\r\n    // Price-based features\r\n    const returns = this.calculateReturns(closes);\r\n    const logReturns = this.calculateLogReturns(closes);\r\n    const hlRatio = highs.map((h, i) => h / lows[i]);\r\n    const ocRatio = opens.map((o, i) => o / closes[i]);\r\n    const bodySize = opens.map((o, i) => Math.abs(closes[i] - o) / o);\r\n    const upperShadow = highs.map((h, i) => (h - Math.max(opens[i], closes[i])) / closes[i]);\r\n    const lowerShadow = lows.map((l, i) => (Math.min(opens[i], closes[i]) - l) / closes[i]);\r\n\r\n    this.addFeatureColumn(features, returns, 'returns', 'Basic price returns');\r\n    this.addFeatureColumn(features, logReturns, 'log_returns', 'Logarithmic returns');\r\n    this.addFeatureColumn(features, hlRatio, 'hl_ratio', 'High/Low ratio');\r\n    this.addFeatureColumn(features, ocRatio, 'oc_ratio', 'Open/Close ratio');\r\n    this.addFeatureColumn(features, bodySize, 'body_size', 'Candle body size');\r\n    this.addFeatureColumn(features, upperShadow, 'upper_shadow', 'Upper shadow size');\r\n    this.addFeatureColumn(features, lowerShadow, 'lower_shadow', 'Lower shadow size');\r\n\r\n    // Volume-based features\r\n    const volumeReturns = this.calculateReturns(volumes);\r\n    const priceVolumeCorr = this.calculateRollingCorrelation(returns, volumeReturns, 20);\r\n    const volumeMA = this.calculateMovingAverage(volumes, 20);\r\n    const volumeRatio = volumes.map((v, i) => i >= 20 ? v / volumeMA[i - 20] : 1);\r\n\r\n    this.addFeatureColumn(features, volumeReturns, 'volume_returns', 'Volume returns');\r\n    this.addFeatureColumn(features, priceVolumeCorr, 'price_volume_corr', 'Price-volume correlation');\r\n    this.addFeatureColumn(features, volumeRatio, 'volume_ratio', 'Volume ratio to MA');\r\n  }\r\n\r\n  /**\r\n   * Add technical indicator features\r\n   */\r\n  private addTechnicalIndicators(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const volumes = data.map(d => d.volume);\r\n\r\n    // RSI with multiple periods\r\n    for (const period of this.options.technicalIndicators.rsi.periods) {\r\n      const rsi = TechnicalIndicators.rsi(closes, period);\r\n      const rsiVelocity = this.calculateVelocity(rsi);\r\n      const rsiAcceleration = this.calculateVelocity(rsiVelocity);\r\n      \r\n      this.addFeatureColumn(features, rsi, `rsi_${period}`, `RSI with period ${period}`);\r\n      this.addFeatureColumn(features, rsiVelocity, `rsi_velocity_${period}`, `RSI velocity ${period}`);\r\n      this.addFeatureColumn(features, rsiAcceleration, `rsi_acceleration_${period}`, `RSI acceleration ${period}`);\r\n    }\r\n\r\n    // MACD\r\n    const macd = TechnicalIndicators.macd(closes, \r\n      this.options.technicalIndicators.macd.fast,\r\n      this.options.technicalIndicators.macd.slow,\r\n      this.options.technicalIndicators.macd.signal\r\n    );\r\n    \r\n    this.addFeatureColumn(features, macd.macd, 'macd_line', 'MACD line');\r\n    this.addFeatureColumn(features, macd.signal, 'macd_signal', 'MACD signal');\r\n    this.addFeatureColumn(features, macd.histogram, 'macd_histogram', 'MACD histogram');\r\n\r\n    // Bollinger Bands\r\n    const bb = TechnicalIndicators.bollingerBands(closes, \r\n      this.options.technicalIndicators.bollinger.period,\r\n      this.options.technicalIndicators.bollinger.multiplier\r\n    );\r\n    \r\n    this.addFeatureColumn(features, bb.upper, 'bb_upper', 'Bollinger upper band');\r\n    this.addFeatureColumn(features, bb.middle, 'bb_middle', 'Bollinger middle band');\r\n    this.addFeatureColumn(features, bb.lower, 'bb_lower', 'Bollinger lower band');\r\n    this.addFeatureColumn(features, bb.percentB, 'bb_position', 'Bollinger band position');\r\n    this.addFeatureColumn(features, bb.bandwidth, 'bb_width', 'Bollinger band width');\r\n\r\n    // Stochastic Oscillator\r\n    const stoch = TechnicalIndicators.stochastic(highs, lows, closes, \r\n      this.options.technicalIndicators.stochastic.kPeriod,\r\n      this.options.technicalIndicators.stochastic.dPeriod\r\n    );\r\n    \r\n    this.addFeatureColumn(features, stoch.k, 'stoch_k', 'Stochastic %K');\r\n    this.addFeatureColumn(features, stoch.d, 'stoch_d', 'Stochastic %D');\r\n\r\n    // Williams %R\r\n    const williams = TechnicalIndicators.williamsR(highs, lows, closes, this.options.technicalIndicators.williams.period);\r\n    this.addFeatureColumn(features, williams, 'williams_r', 'Williams %R');\r\n\r\n    // Commodity Channel Index\r\n    const cci = TechnicalIndicators.cci(highs, lows, closes, this.options.technicalIndicators.cci.period);\r\n    this.addFeatureColumn(features, cci, 'cci', 'Commodity Channel Index');\r\n\r\n    // ATR\r\n    const atr = TechnicalIndicators.atr(highs, lows, closes, 14);\r\n    this.addFeatureColumn(features, atr, 'atr', 'Average True Range');\r\n\r\n    // ADX\r\n    const adx = TechnicalIndicators.adx(highs, lows, closes, 14);\r\n    this.addFeatureColumn(features, adx.adx, 'adx', 'Average Directional Index');\r\n    this.addFeatureColumn(features, adx.plusDI, 'plus_di', 'Plus Directional Indicator');\r\n    this.addFeatureColumn(features, adx.minusDI, 'minus_di', 'Minus Directional Indicator');\r\n\r\n    // Volume indicators\r\n    const obv = TechnicalIndicators.obv(closes, volumes);\r\n    const mfi = TechnicalIndicators.mfi(highs, lows, closes, volumes, 14);\r\n    \r\n    this.addFeatureColumn(features, obv, 'obv', 'On-Balance Volume');\r\n    this.addFeatureColumn(features, mfi, 'mfi', 'Money Flow Index');\r\n  }\r\n\r\n  /**\r\n   * Add statistical features\r\n   */\r\n  private addStatisticalFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Rolling statistics for different windows\r\n    for (const window of this.options.lookbackPeriods) {\r\n      if (window <= data.length) {\r\n        // Rolling mean\r\n        const rollingMean = StatisticsUtils.rollingStatistic(returns, window, 'mean');\r\n        this.addFeatureColumn(features, rollingMean, `rolling_mean_${window}`, `Rolling mean ${window}`);\r\n\r\n        // Rolling standard deviation\r\n        const rollingStd = StatisticsUtils.rollingStatistic(returns, window, 'std');\r\n        this.addFeatureColumn(features, rollingStd, `rolling_std_${window}`, `Rolling std ${window}`);\r\n\r\n        // Rolling skewness\r\n        const rollingSkew = StatisticsUtils.rollingStatistic(returns, window, 'skewness');\r\n        this.addFeatureColumn(features, rollingSkew, `rolling_skew_${window}`, `Rolling skewness ${window}`);\r\n\r\n        // Rolling kurtosis\r\n        const rollingKurt = StatisticsUtils.rollingStatistic(returns, window, 'kurtosis');\r\n        this.addFeatureColumn(features, rollingKurt, `rolling_kurt_${window}`, `Rolling kurtosis ${window}`);\r\n\r\n        // Rolling min/max\r\n        const rollingMin = StatisticsUtils.rollingStatistic(closes, window, 'min');\r\n        const rollingMax = StatisticsUtils.rollingStatistic(closes, window, 'max');\r\n        this.addFeatureColumn(features, rollingMin, `rolling_min_${window}`, `Rolling min ${window}`);\r\n        this.addFeatureColumn(features, rollingMax, `rolling_max_${window}`, `Rolling max ${window}`);\r\n      }\r\n    }\r\n\r\n    // Autocorrelation features\r\n    for (let lag = 1; lag <= 10; lag++) {\r\n      const autocorr = this.calculateRollingAutocorrelation(returns, lag, 50);\r\n      this.addFeatureColumn(features, autocorr, `autocorr_${lag}`, `Autocorrelation lag ${lag}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add volatility features\r\n   */\r\n  private addVolatilityFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Realized volatility (different estimators)\r\n    for (const window of [10, 20, 50]) {\r\n      // Close-to-close volatility\r\n      const ccVol = this.calculateRollingVolatility(returns, window);\r\n      this.addFeatureColumn(features, ccVol, `cc_vol_${window}`, `Close-to-close volatility ${window}`);\r\n\r\n      // Parkinson volatility (high-low)\r\n      const parkVol = this.calculateParkinsonVolatility(highs, lows, window);\r\n      this.addFeatureColumn(features, parkVol, `park_vol_${window}`, `Parkinson volatility ${window}`);\r\n\r\n      // Volatility of volatility\r\n      const volOfVol = this.calculateRollingVolatility(ccVol, Math.min(window, 20));\r\n      this.addFeatureColumn(features, volOfVol, `vol_of_vol_${window}`, `Volatility of volatility ${window}`);\r\n    }\r\n\r\n    // GARCH-like features\r\n    const garchVol = this.calculateGARCHVolatility(returns);\r\n    this.addFeatureColumn(features, garchVol, 'garch_vol', 'GARCH-like volatility');\r\n\r\n    // Volatility regime indicators\r\n    const volRegime = this.detectVolatilityRegime(returns, 50);\r\n    this.addFeatureColumn(features, volRegime, 'vol_regime', 'Volatility regime');\r\n  }\r\n\r\n  /**\r\n   * Add cross-sectional features\r\n   */\r\n  private addCrossSectionalFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const volumes = data.map(d => d.volume);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Rank-based features\r\n    for (const window of [20, 50]) {\r\n      const returnRanks = this.calculateRollingRanks(returns, window);\r\n      const volumeRanks = this.calculateRollingRanks(volumes, window);\r\n      \r\n      this.addFeatureColumn(features, returnRanks, `return_rank_${window}`, `Return rank ${window}`);\r\n      this.addFeatureColumn(features, volumeRanks, `volume_rank_${window}`, `Volume rank ${window}`);\r\n    }\r\n\r\n    // Z-score features\r\n    for (const window of [20, 50]) {\r\n      const returnZScores = this.calculateRollingZScores(returns, window);\r\n      const volumeZScores = this.calculateRollingZScores(volumes, window);\r\n      \r\n      this.addFeatureColumn(features, returnZScores, `return_zscore_${window}`, `Return z-score ${window}`);\r\n      this.addFeatureColumn(features, volumeZScores, `volume_zscore_${window}`, `Volume z-score ${window}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add pattern recognition features\r\n   */\r\n  private addPatternFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const highs = data.map(d => d.high);\r\n    const lows = data.map(d => d.low);\r\n    const opens = data.map(d => d.open);\r\n\r\n    // Candlestick patterns\r\n    const doji = this.detectDoji(opens, closes);\r\n    const hammer = this.detectHammer(opens, highs, lows, closes);\r\n    const engulfing = this.detectEngulfing(opens, closes);\r\n    \r\n    this.addFeatureColumn(features, doji, 'doji', 'Doji pattern');\r\n    this.addFeatureColumn(features, hammer, 'hammer', 'Hammer pattern');\r\n    this.addFeatureColumn(features, engulfing, 'engulfing', 'Engulfing pattern');\r\n\r\n    // Support/Resistance levels\r\n    const supportResistance = this.detectSupportResistance(closes, 20);\r\n    this.addFeatureColumn(features, supportResistance.support, 'support_level', 'Support level');\r\n    this.addFeatureColumn(features, supportResistance.resistance, 'resistance_level', 'Resistance level');\r\n\r\n    // Trend patterns\r\n    const trendStrength = this.calculateTrendStrength(closes, 20);\r\n    this.addFeatureColumn(features, trendStrength, 'trend_strength', 'Trend strength');\r\n  }\r\n\r\n  /**\r\n   * Add harmonic features\r\n   */\r\n  private addHarmonicFeatures(data: MarketData[], features: number[][]): void {\r\n    const closes = data.map(d => d.close);\r\n    const returns = this.calculateReturns(closes);\r\n\r\n    // Fourier transform features (simplified)\r\n    const fourierFeatures = this.calculateFourierFeatures(returns, 50);\r\n    for (let i = 0; i < fourierFeatures.length; i++) {\r\n      this.addFeatureColumn(features, fourierFeatures[i], `fourier_${i}`, `Fourier component ${i}`);\r\n    }\r\n\r\n    // Cyclical features\r\n    const cyclicalFeatures = this.calculateCyclicalFeatures(closes);\r\n    for (let i = 0; i < cyclicalFeatures.length; i++) {\r\n      this.addFeatureColumn(features, cyclicalFeatures[i], `cyclical_${i}`, `Cyclical component ${i}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Helper method to add a feature column\r\n   */\r\n  private addFeatureColumn(features: number[][], values: number[], name: string, description: string): void {\r\n    // Pad with zeros if values array is shorter\r\n    const paddedValues = new Array(features.length).fill(0);\r\n    const startIndex = Math.max(0, features.length - values.length);\r\n    \r\n    for (let i = 0; i < values.length && startIndex + i < features.length; i++) {\r\n      paddedValues[startIndex + i] = isFinite(values[i]) ? values[i] : 0;\r\n    }\r\n\r\n    // Add to each row\r\n    for (let i = 0; i < features.length; i++) {\r\n      features[i].push(paddedValues[i]);\r\n    }\r\n\r\n    // Add metadata\r\n    this.featureNames.push(name);\r\n    this.featureMetadata.push({\r\n      name,\r\n      category: 'technical',\r\n      description,\r\n      dataType: 'numeric',\r\n      missingValueStrategy: 'zero'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate returns\r\n   */\r\n  private calculateReturns(prices: number[]): number[] {\r\n    const returns: number[] = [];\r\n    for (let i = 1; i < prices.length; i++) {\r\n      if (prices[i - 1] !== 0) {\r\n        returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\r\n      } else {\r\n        returns.push(0);\r\n      }\r\n    }\r\n    return returns;\r\n  }\r\n\r\n  /**\r\n   * Calculate log returns\r\n   */\r\n  private calculateLogReturns(prices: number[]): number[] {\r\n    const logReturns: number[] = [];\r\n    for (let i = 1; i < prices.length; i++) {\r\n      if (prices[i - 1] > 0 && prices[i] > 0) {\r\n        logReturns.push(Math.log(prices[i] / prices[i - 1]));\r\n      } else {\r\n        logReturns.push(0);\r\n      }\r\n    }\r\n    return logReturns;\r\n  }\r\n\r\n  /**\r\n   * Calculate velocity (first difference)\r\n   */\r\n  private calculateVelocity(values: number[]): number[] {\r\n    const velocity: number[] = [];\r\n    for (let i = 1; i < values.length; i++) {\r\n      velocity.push(values[i] - values[i - 1]);\r\n    }\r\n    return velocity;\r\n  }\r\n\r\n  /**\r\n   * Calculate moving average\r\n   */\r\n  private calculateMovingAverage(data: number[], window: number): number[] {\r\n    return TechnicalIndicators.sma(data, window);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling correlation\r\n   */\r\n  private calculateRollingCorrelation(x: number[], y: number[], window: number): number[] {\r\n    return MathUtils.rollingCorrelation(x, y, window);\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling volatility\r\n   */\r\n  private calculateRollingVolatility(returns: number[], window: number): number[] {\r\n    return StatisticsUtils.rollingStatistic(returns, window, 'std');\r\n  }\r\n\r\n  /**\r\n   * Calculate Parkinson volatility\r\n   */\r\n  private calculateParkinsonVolatility(highs: number[], lows: number[], window: number): number[] {\r\n    const logHL = highs.map((h, i) => Math.log(h / lows[i]));\r\n    const parkVol: number[] = [];\r\n    \r\n    for (let i = window - 1; i < logHL.length; i++) {\r\n      const slice = logHL.slice(i - window + 1, i + 1);\r\n      const variance = slice.reduce((sum, val) => sum + val * val, 0) / (4 * Math.log(2) * window);\r\n      parkVol.push(Math.sqrt(variance));\r\n    }\r\n    \r\n    return parkVol;\r\n  }\r\n\r\n  /**\r\n   * Calculate GARCH-like volatility\r\n   */\r\n  private calculateGARCHVolatility(returns: number[]): number[] {\r\n    const garchVol: number[] = [];\r\n    let variance = 0.01; // Initial variance\r\n    \r\n    const alpha = 0.1; // ARCH parameter\r\n    const beta = 0.85;  // GARCH parameter\r\n    const omega = 0.000001; // Constant\r\n    \r\n    for (const ret of returns) {\r\n      variance = omega + alpha * ret * ret + beta * variance;\r\n      garchVol.push(Math.sqrt(variance));\r\n    }\r\n    \r\n    return garchVol;\r\n  }\r\n\r\n  /**\r\n   * Detect volatility regime\r\n   */\r\n  private detectVolatilityRegime(returns: number[], window: number): number[] {\r\n    const vol = this.calculateRollingVolatility(returns, window);\r\n    const volMean = StatisticsUtils.mean(vol);\r\n    const volStd = StatisticsUtils.standardDeviation(vol);\r\n    \r\n    return vol.map(v => {\r\n      if (v > volMean + volStd) return 2; // High volatility\r\n      if (v < volMean - volStd) return 0; // Low volatility\r\n      return 1; // Normal volatility\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling ranks\r\n   */\r\n  private calculateRollingRanks(data: number[], window: number): number[] {\r\n    const ranks: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const currentValue = data[i];\r\n      const rank = slice.filter(val => val <= currentValue).length / window;\r\n      ranks.push(rank);\r\n    }\r\n    \r\n    return ranks;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling z-scores\r\n   */\r\n  private calculateRollingZScores(data: number[], window: number): number[] {\r\n    const zScores: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const mean = StatisticsUtils.mean(slice);\r\n      const std = StatisticsUtils.standardDeviation(slice);\r\n      \r\n      if (std > 0) {\r\n        zScores.push((data[i] - mean) / std);\r\n      } else {\r\n        zScores.push(0);\r\n      }\r\n    }\r\n    \r\n    return zScores;\r\n  }\r\n\r\n  /**\r\n   * Calculate rolling autocorrelation\r\n   */\r\n  private calculateRollingAutocorrelation(data: number[], lag: number, window: number): number[] {\r\n    const autocorr: number[] = [];\r\n    \r\n    for (let i = window - 1; i < data.length - lag; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      const laggedSlice = data.slice(i - window + 1 + lag, i + 1 + lag);\r\n      \r\n      if (slice.length === laggedSlice.length) {\r\n        const correlation = MathUtils.correlation(slice, laggedSlice);\r\n        autocorr.push(correlation);\r\n      } else {\r\n        autocorr.push(0);\r\n      }\r\n    }\r\n    \r\n    return autocorr;\r\n  }\r\n\r\n  /**\r\n   * Detect Doji candlestick pattern\r\n   */\r\n  private detectDoji(opens: number[], closes: number[]): number[] {\r\n    return opens.map((open, i) => {\r\n      const bodySize = Math.abs(closes[i] - open) / open;\r\n      return bodySize < 0.001 ? 1 : 0; // Doji if body is very small\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Detect Hammer candlestick pattern\r\n   */\r\n  private detectHammer(opens: number[], highs: number[], lows: number[], closes: number[]): number[] {\r\n    return opens.map((open, i) => {\r\n      const bodySize = Math.abs(closes[i] - open);\r\n      const lowerShadow = Math.min(open, closes[i]) - lows[i];\r\n      const upperShadow = highs[i] - Math.max(open, closes[i]);\r\n      \r\n      // Hammer: small body, long lower shadow, short upper shadow\r\n      return (lowerShadow > 2 * bodySize && upperShadow < bodySize) ? 1 : 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Detect Engulfing pattern\r\n   */\r\n  private detectEngulfing(opens: number[], closes: number[]): number[] {\r\n    const pattern: number[] = [0]; // First candle can't be engulfing\r\n    \r\n    for (let i = 1; i < opens.length; i++) {\r\n      const prevBody = Math.abs(closes[i - 1] - opens[i - 1]);\r\n      const currBody = Math.abs(closes[i] - opens[i]);\r\n      \r\n      // Bullish engulfing\r\n      if (closes[i - 1] < opens[i - 1] && closes[i] > opens[i] && \r\n          opens[i] < closes[i - 1] && closes[i] > opens[i - 1] && \r\n          currBody > prevBody) {\r\n        pattern.push(1);\r\n      }\r\n      // Bearish engulfing\r\n      else if (closes[i - 1] > opens[i - 1] && closes[i] < opens[i] && \r\n               opens[i] > closes[i - 1] && closes[i] < opens[i - 1] && \r\n               currBody > prevBody) {\r\n        pattern.push(-1);\r\n      } else {\r\n        pattern.push(0);\r\n      }\r\n    }\r\n    \r\n    return pattern;\r\n  }\r\n\r\n  /**\r\n   * Detect support and resistance levels\r\n   */\r\n  private detectSupportResistance(closes: number[], window: number): { support: number[]; resistance: number[] } {\r\n    const support: number[] = [];\r\n    const resistance: number[] = [];\r\n    \r\n    for (let i = window; i < closes.length; i++) {\r\n      const slice = closes.slice(i - window, i);\r\n      const currentPrice = closes[i];\r\n      \r\n      // Support: lowest price in window\r\n      const supportLevel = Math.min(...slice);\r\n      support.push(supportLevel / currentPrice);\r\n      \r\n      // Resistance: highest price in window\r\n      const resistanceLevel = Math.max(...slice);\r\n      resistance.push(resistanceLevel / currentPrice);\r\n    }\r\n    \r\n    return { support, resistance };\r\n  }\r\n\r\n  /**\r\n   * Calculate trend strength\r\n   */\r\n  private calculateTrendStrength(closes: number[], window: number): number[] {\r\n    const trendStrength: number[] = [];\r\n    \r\n    for (let i = window - 1; i < closes.length; i++) {\r\n      const slice = closes.slice(i - window + 1, i + 1);\r\n      const x = Array.from({ length: window }, (_, idx) => idx);\r\n      \r\n      // Linear regression slope as trend strength\r\n      const correlation = MathUtils.correlation(x, slice);\r\n      trendStrength.push(correlation);\r\n    }\r\n    \r\n    return trendStrength;\r\n  }\r\n\r\n  /**\r\n   * Calculate Fourier features (simplified)\r\n   */\r\n  private calculateFourierFeatures(data: number[], window: number): number[][] {\r\n    const features: number[][] = [[], []]; // Real and imaginary parts\r\n    \r\n    for (let i = window - 1; i < data.length; i++) {\r\n      const slice = data.slice(i - window + 1, i + 1);\r\n      \r\n      // Simple DFT for first few frequencies\r\n      let realPart = 0;\r\n      let imagPart = 0;\r\n      \r\n      for (let k = 0; k < slice.length; k++) {\r\n        const angle = -2 * Math.PI * k / slice.length;\r\n        realPart += slice[k] * Math.cos(angle);\r\n        imagPart += slice[k] * Math.sin(angle);\r\n      }\r\n      \r\n      features[0].push(realPart / slice.length);\r\n      features[1].push(imagPart / slice.length);\r\n    }\r\n    \r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Calculate cyclical features\r\n   */\r\n  private calculateCyclicalFeatures(closes: number[]): number[][] {\r\n    const features: number[][] = [];\r\n    \r\n    // Daily, weekly, monthly cycles (simplified)\r\n    const cycles = [5, 20, 60]; // 5-day, 20-day, 60-day cycles\r\n    \r\n    for (const cycle of cycles) {\r\n      const cyclicalFeature: number[] = [];\r\n      \r\n      for (let i = 0; i < closes.length; i++) {\r\n        const phase = (2 * Math.PI * i) / cycle;\r\n        cyclicalFeature.push(Math.sin(phase));\r\n      }\r\n      \r\n      features.push(cyclicalFeature);\r\n    }\r\n    \r\n    return features;\r\n  }\r\n}","/**\r\n * Indicators Configuration\r\n * \r\n * Configuration settings for technical indicators and their parameters.\r\n */\r\n\r\n/**\r\n * Technical indicator configurations\r\n */\r\nexport const INDICATORS_CONFIG = {\r\n  // Moving Averages\r\n  SMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100, 200],\r\n    minPeriod: 2,\r\n    maxPeriod: 500\r\n  },\r\n  \r\n  EMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100, 200],\r\n    minPeriod: 2,\r\n    maxPeriod: 500\r\n  },\r\n  \r\n  WMA: {\r\n    defaultPeriods: [5, 10, 20, 50, 100],\r\n    minPeriod: 2,\r\n    maxPeriod: 200\r\n  },\r\n  \r\n  // Momentum Indicators\r\n  RSI: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 9, 14, 21, 25],\r\n    overboughtLevel: 70,\r\n    oversoldLevel: 30,\r\n    minPeriod: 2,\r\n    maxPeriod: 100\r\n  },\r\n  \r\n  MACD: {\r\n    fastPeriod: 12,\r\n    slowPeriod: 26,\r\n    signalPeriod: 9,\r\n    alternativeSettings: [\r\n      { fast: 5, slow: 35, signal: 5 },\r\n      { fast: 8, slow: 17, signal: 9 },\r\n      { fast: 12, slow: 26, signal: 9 }\r\n    ]\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    kPeriod: 14,\r\n    dPeriod: 3,\r\n    smoothing: 3,\r\n    overboughtLevel: 80,\r\n    oversoldLevel: 20,\r\n    alternativeSettings: [\r\n      { k: 5, d: 3 },\r\n      { k: 14, d: 3 },\r\n      { k: 21, d: 5 }\r\n    ]\r\n  },\r\n  \r\n  WILLIAMS_R: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21],\r\n    overboughtLevel: -20,\r\n    oversoldLevel: -80\r\n  },\r\n  \r\n  CCI: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [14, 20, 50],\r\n    overboughtLevel: 100,\r\n    oversoldLevel: -100,\r\n    constant: 0.015\r\n  },\r\n  \r\n  // Volatility Indicators\r\n  BOLLINGER_BANDS: {\r\n    period: 20,\r\n    multiplier: 2,\r\n    alternativeSettings: [\r\n      { period: 10, multiplier: 1.9 },\r\n      { period: 20, multiplier: 2.0 },\r\n      { period: 50, multiplier: 2.1 }\r\n    ]\r\n  },\r\n  \r\n  ATR: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21, 50],\r\n    minPeriod: 2,\r\n    maxPeriod: 100\r\n  },\r\n  \r\n  // Trend Indicators\r\n  ADX: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21],\r\n    trendThreshold: 25,\r\n    strongTrendThreshold: 40\r\n  },\r\n  \r\n  PARABOLIC_SAR: {\r\n    accelerationFactor: 0.02,\r\n    maxAcceleration: 0.20,\r\n    alternativeSettings: [\r\n      { af: 0.01, max: 0.10 },\r\n      { af: 0.02, max: 0.20 },\r\n      { af: 0.03, max: 0.30 }\r\n    ]\r\n  },\r\n  \r\n  // Volume Indicators\r\n  OBV: {\r\n    // No parameters needed\r\n  },\r\n  \r\n  MFI: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [10, 14, 20],\r\n    overboughtLevel: 80,\r\n    oversoldLevel: 20\r\n  },\r\n  \r\n  VWAP: {\r\n    // Typically calculated from session start\r\n    resetPeriod: 'session'\r\n  },\r\n  \r\n  // Oscillators\r\n  MOMENTUM: {\r\n    defaultPeriod: 10,\r\n    alternativePeriods: [5, 10, 20, 50]\r\n  },\r\n  \r\n  ROC: {\r\n    defaultPeriod: 10,\r\n    alternativePeriods: [5, 10, 20, 50]\r\n  },\r\n  \r\n  // Statistical Indicators\r\n  STANDARD_DEVIATION: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [10, 20, 50]\r\n  },\r\n  \r\n  VARIANCE: {\r\n    defaultPeriod: 20,\r\n    alternativePeriods: [10, 20, 50]\r\n  },\r\n  \r\n  LINEAR_REGRESSION_SLOPE: {\r\n    defaultPeriod: 14,\r\n    alternativePeriods: [7, 14, 21, 50]\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator combinations for different strategies\r\n */\r\nexport const INDICATOR_COMBINATIONS = {\r\n  TREND_FOLLOWING: [\r\n    'SMA_20', 'SMA_50', 'EMA_12', 'EMA_26', 'MACD', 'ADX'\r\n  ],\r\n  \r\n  MEAN_REVERSION: [\r\n    'RSI_14', 'BOLLINGER_BANDS', 'STOCHASTIC', 'WILLIAMS_R', 'CCI'\r\n  ],\r\n  \r\n  MOMENTUM: [\r\n    'RSI_14', 'MACD', 'MOMENTUM_10', 'ROC_10', 'STOCHASTIC'\r\n  ],\r\n  \r\n  VOLATILITY: [\r\n    'ATR_14', 'BOLLINGER_BANDS', 'STANDARD_DEVIATION_20'\r\n  ],\r\n  \r\n  VOLUME: [\r\n    'OBV', 'MFI_14', 'VWAP'\r\n  ],\r\n  \r\n  COMPREHENSIVE: [\r\n    'SMA_20', 'EMA_12', 'RSI_14', 'MACD', 'BOLLINGER_BANDS',\r\n    'STOCHASTIC', 'ATR_14', 'ADX', 'OBV', 'MFI_14'\r\n  ]\r\n};\r\n\r\n/**\r\n * Indicator signal interpretations\r\n */\r\nexport const SIGNAL_INTERPRETATIONS = {\r\n  RSI: {\r\n    bullish: 'RSI < 30 (oversold)',\r\n    bearish: 'RSI > 70 (overbought)',\r\n    neutral: '30 <= RSI <= 70'\r\n  },\r\n  \r\n  MACD: {\r\n    bullish: 'MACD line crosses above signal line',\r\n    bearish: 'MACD line crosses below signal line',\r\n    momentum: 'Histogram increasing/decreasing'\r\n  },\r\n  \r\n  BOLLINGER_BANDS: {\r\n    bullish: 'Price touches lower band (oversold)',\r\n    bearish: 'Price touches upper band (overbought)',\r\n    squeeze: 'Bands contracting (low volatility)',\r\n    expansion: 'Bands expanding (high volatility)'\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    bullish: '%K crosses above %D below 20',\r\n    bearish: '%K crosses below %D above 80',\r\n    overbought: '%K and %D > 80',\r\n    oversold: '%K and %D < 20'\r\n  },\r\n  \r\n  ADX: {\r\n    trending: 'ADX > 25',\r\n    strongTrend: 'ADX > 40',\r\n    weakTrend: 'ADX < 25',\r\n    bullishTrend: '+DI > -DI and ADX > 25',\r\n    bearishTrend: '-DI > +DI and ADX > 25'\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator optimization parameters\r\n */\r\nexport const OPTIMIZATION_PARAMETERS = {\r\n  RSI: {\r\n    period: { min: 5, max: 50, step: 1 },\r\n    overbought: { min: 60, max: 90, step: 5 },\r\n    oversold: { min: 10, max: 40, step: 5 }\r\n  },\r\n  \r\n  MACD: {\r\n    fastPeriod: { min: 5, max: 20, step: 1 },\r\n    slowPeriod: { min: 15, max: 40, step: 1 },\r\n    signalPeriod: { min: 5, max: 15, step: 1 }\r\n  },\r\n  \r\n  BOLLINGER_BANDS: {\r\n    period: { min: 10, max: 50, step: 5 },\r\n    multiplier: { min: 1.5, max: 3.0, step: 0.1 }\r\n  },\r\n  \r\n  STOCHASTIC: {\r\n    kPeriod: { min: 5, max: 30, step: 1 },\r\n    dPeriod: { min: 2, max: 10, step: 1 }\r\n  },\r\n  \r\n  ATR: {\r\n    period: { min: 5, max: 50, step: 1 }\r\n  }\r\n};\r\n\r\n/**\r\n * Indicator performance metrics\r\n */\r\nexport const PERFORMANCE_METRICS = {\r\n  CALCULATION_COMPLEXITY: {\r\n    SMA: 'O(n)',\r\n    EMA: 'O(n)',\r\n    RSI: 'O(n)',\r\n    MACD: 'O(n)',\r\n    BOLLINGER_BANDS: 'O(n)',\r\n    STOCHASTIC: 'O(n)',\r\n    ATR: 'O(n)',\r\n    ADX: 'O(n)',\r\n    MFI: 'O(n)'\r\n  },\r\n  \r\n  MEMORY_USAGE: {\r\n    SMA: 'Low',\r\n    EMA: 'Very Low',\r\n    RSI: 'Low',\r\n    MACD: 'Medium',\r\n    BOLLINGER_BANDS: 'Medium',\r\n    STOCHASTIC: 'Medium',\r\n    ATR: 'Low',\r\n    ADX: 'High',\r\n    MFI: 'Medium'\r\n  },\r\n  \r\n  SENSITIVITY_TO_NOISE: {\r\n    SMA: 'Low',\r\n    EMA: 'Medium',\r\n    RSI: 'Medium',\r\n    MACD: 'High',\r\n    BOLLINGER_BANDS: 'Low',\r\n    STOCHASTIC: 'High',\r\n    ATR: 'Low',\r\n    ADX: 'Medium',\r\n    MFI: 'Medium'\r\n  }\r\n};\r\n\r\n/**\r\n * Market condition adaptations\r\n */\r\nexport const MARKET_ADAPTATIONS = {\r\n  TRENDING_MARKET: {\r\n    preferredIndicators: ['MACD', 'ADX', 'EMA', 'PARABOLIC_SAR'],\r\n    avoidIndicators: ['RSI', 'STOCHASTIC', 'WILLIAMS_R'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 21 }, // Longer period for trending markets\r\n      MACD: { fast: 8, slow: 21, signal: 5 } // Faster settings\r\n    }\r\n  },\r\n  \r\n  RANGING_MARKET: {\r\n    preferredIndicators: ['RSI', 'STOCHASTIC', 'BOLLINGER_BANDS', 'WILLIAMS_R'],\r\n    avoidIndicators: ['MACD', 'MOMENTUM', 'ROC'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 14, overbought: 75, oversold: 25 },\r\n      BOLLINGER_BANDS: { multiplier: 1.8 } // Tighter bands\r\n    }\r\n  },\r\n  \r\n  HIGH_VOLATILITY: {\r\n    preferredIndicators: ['ATR', 'BOLLINGER_BANDS', 'STANDARD_DEVIATION'],\r\n    parameterAdjustments: {\r\n      ATR: { period: 10 }, // Shorter period for faster adaptation\r\n      BOLLINGER_BANDS: { multiplier: 2.5 }, // Wider bands\r\n      RSI: { period: 21 } // Longer period to reduce noise\r\n    }\r\n  },\r\n  \r\n  LOW_VOLATILITY: {\r\n    preferredIndicators: ['RSI', 'STOCHASTIC', 'CCI'],\r\n    parameterAdjustments: {\r\n      RSI: { period: 9, overbought: 65, oversold: 35 }, // More sensitive\r\n      BOLLINGER_BANDS: { multiplier: 1.5 }, // Tighter bands\r\n      STOCHASTIC: { kPeriod: 9 } // Faster stochastic\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Timeframe-specific configurations\r\n */\r\nexport const TIMEFRAME_CONFIGS = {\r\n  '1m': {\r\n    RSI: { period: 7 },\r\n    MACD: { fast: 5, slow: 13, signal: 4 },\r\n    BOLLINGER_BANDS: { period: 10 }\r\n  },\r\n  \r\n  '5m': {\r\n    RSI: { period: 9 },\r\n    MACD: { fast: 8, slow: 17, signal: 6 },\r\n    BOLLINGER_BANDS: { period: 15 }\r\n  },\r\n  \r\n  '15m': {\r\n    RSI: { period: 12 },\r\n    MACD: { fast: 10, slow: 21, signal: 7 },\r\n    BOLLINGER_BANDS: { period: 18 }\r\n  },\r\n  \r\n  '1h': {\r\n    RSI: { period: 14 },\r\n    MACD: { fast: 12, slow: 26, signal: 9 },\r\n    BOLLINGER_BANDS: { period: 20 }\r\n  },\r\n  \r\n  '4h': {\r\n    RSI: { period: 16 },\r\n    MACD: { fast: 15, slow: 30, signal: 10 },\r\n    BOLLINGER_BANDS: { period: 25 }\r\n  },\r\n  \r\n  '1d': {\r\n    RSI: { period: 14 },\r\n    MACD: { fast: 12, slow: 26, signal: 9 },\r\n    BOLLINGER_BANDS: { period: 20 }\r\n  }\r\n};","/**\r\n * Ultra-Precision Predictor\r\n * \r\n * Advanced ensemble predictor targeting sub-1% error rates through\r\n * sophisticated feature engineering and model combination.\r\n */\r\n\r\nimport { PredictorOptions, TrainingData, PredictionResult, ModelMetrics, TrainingResults } from '../types/Prediction';\r\nimport { MarketData } from '../types/MarketData';\r\nimport { ValidationUtils } from '../utils/ValidationUtils';\r\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\r\nimport { MathUtils } from '../utils/MathUtils';\r\nimport { DEFAULT_PREDICTOR_OPTIONS } from '../config/defaults';\r\n\r\n/**\r\n * Ultra-precision predictor implementation\r\n */\r\nexport class UltraPrecisionPredictor {\r\n  private options: Required<PredictorOptions>;\r\n  private models: any[] = [];\r\n  private isTrained: boolean = false;\r\n  private featureImportance: number[] = [];\r\n  private trainingMetrics: ModelMetrics | null = null;\r\n  private lastConfidence: number = 0;\r\n  private modelWeights: number[] = [];\r\n\r\n  constructor(options: Partial<PredictorOptions> = {}) {\r\n    this.options = {\r\n      ...DEFAULT_PREDICTOR_OPTIONS,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Train the ultra-precision predictor\r\n   */\r\n  async train(data: TrainingData[]): Promise<TrainingResults> {\r\n    console.log(`🚀 Training Ultra-Precision Predictor with ${data.length} samples...`);\r\n    \r\n    // Validate training data\r\n    const validation = ValidationUtils.validateTrainingData(data);\r\n    if (!validation.isValid) {\r\n      throw new Error(`Training data validation failed: ${validation.errors.map(e => e.message).join(', ')}`);\r\n    }\r\n\r\n    // Prepare features and targets\r\n    const { features, targets } = this.prepareTrainingData(data);\r\n    console.log(`✨ Prepared ${features.length} samples with ${features[0]?.length || 0} features`);\r\n\r\n    // Split data for training and validation\r\n    const { trainX, trainY, testX, testY } = this.splitData(features, targets);\r\n\r\n    // Train ensemble of models\r\n    const startTime = Date.now();\r\n    await this.trainEnsemble(trainX, trainY);\r\n    const trainingTime = Date.now() - startTime;\r\n\r\n    // Validate performance\r\n    const predictions = await this.predictBatch(testX);\r\n    this.trainingMetrics = this.calculateMetrics(predictions, testY);\r\n\r\n    // Calculate feature importance\r\n    this.calculateFeatureImportance(features[0]?.length || 0);\r\n\r\n    console.log(`📊 Training completed in ${trainingTime}ms:`);\r\n    console.log(`   MAE: ${(this.trainingMetrics.mae * 100).toFixed(3)}%`);\r\n    console.log(`   RMSE: ${(this.trainingMetrics.rmse * 100).toFixed(3)}%`);\r\n    console.log(`   R²: ${this.trainingMetrics.r2.toFixed(4)}`);\r\n    console.log(`   Directional Accuracy: ${(this.trainingMetrics.directionalAccuracy * 100).toFixed(1)}%`);\r\n\r\n    this.isTrained = true;\r\n\r\n    // Check if we achieved target error rate\r\n    if (this.trainingMetrics.mae <= this.options.targetErrorRate) {\r\n      console.log(`🎯 Target error rate achieved: ${(this.trainingMetrics.mae * 100).toFixed(3)}% <= ${(this.options.targetErrorRate * 100).toFixed(1)}%`);\r\n    } else {\r\n      console.log(`⚠️  Target error rate not achieved. Consider increasing ensemble size or feature count.`);\r\n    }\r\n\r\n    return {\r\n      trainingMetrics: this.trainingMetrics,\r\n      validationMetrics: this.trainingMetrics, // Same for now\r\n      trainingTime,\r\n      featureCount: features[0]?.length || 0,\r\n      featureImportance: [...this.featureImportance]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Make ultra-precise prediction\r\n   */\r\n  async predict(features: number[]): Promise<number> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Model must be trained before making predictions');\r\n    }\r\n\r\n    const validation = ValidationUtils.validateFeatures(features);\r\n    if (!validation.isValid) {\r\n      throw new Error(`Feature validation failed: ${validation.errors.map(e => e.message).join(', ')}`);\r\n    }\r\n\r\n    // Get ensemble predictions\r\n    const predictions = this.models.map((model, index) => {\r\n      try {\r\n        return this.predictWithModel(model, features, index);\r\n      } catch (error) {\r\n        console.warn(`Model ${index} prediction failed:`, error);\r\n        return 0;\r\n      }\r\n    });\r\n\r\n    // Calculate weighted average with confidence\r\n    const weightedPrediction = this.combinepredictions(predictions);\r\n    \r\n    // Calculate prediction confidence\r\n    this.lastConfidence = this.calculatePredictionConfidence(predictions);\r\n\r\n    return weightedPrediction;\r\n  }\r\n\r\n  /**\r\n   * Batch prediction for multiple samples\r\n   */\r\n  async predictBatch(featuresMatrix: number[][]): Promise<number[]> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Model must be trained before making predictions');\r\n    }\r\n\r\n    const predictions: number[] = [];\r\n    \r\n    for (const features of featuresMatrix) {\r\n      const prediction = await this.predict(features);\r\n      predictions.push(prediction);\r\n    }\r\n\r\n    return predictions;\r\n  }\r\n\r\n  /**\r\n   * Get prediction confidence (0-1)\r\n   */\r\n  getConfidence(): number {\r\n    return this.lastConfidence;\r\n  }\r\n\r\n  /**\r\n   * Get feature importance scores\r\n   */\r\n  getFeatureImportance(): number[] {\r\n    return [...this.featureImportance];\r\n  }\r\n\r\n  /**\r\n   * Get training metrics\r\n   */\r\n  getTrainingMetrics(): ModelMetrics | null {\r\n    return this.trainingMetrics;\r\n  }\r\n\r\n  /**\r\n   * Check if model is trained\r\n   */\r\n  isModelTrained(): boolean {\r\n    return this.isTrained;\r\n  }\r\n\r\n  /**\r\n   * Save model to JSON string\r\n   */\r\n  async saveModel(): Promise<string> {\r\n    if (!this.isTrained) {\r\n      throw new Error('Cannot save untrained model');\r\n    }\r\n\r\n    const modelData = {\r\n      version: '2.0.0',\r\n      options: this.options,\r\n      models: this.models.map(model => this.serializeModel(model)),\r\n      modelWeights: this.modelWeights,\r\n      featureImportance: this.featureImportance,\r\n      trainingMetrics: this.trainingMetrics,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n\r\n    return JSON.stringify(modelData, null, 2);\r\n  }\r\n\r\n  /**\r\n   * Load model from JSON string\r\n   */\r\n  async loadModel(modelJson: string): Promise<void> {\r\n    try {\r\n      const modelData = JSON.parse(modelJson);\r\n      \r\n      this.options = { ...this.options, ...modelData.options };\r\n      this.modelWeights = modelData.modelWeights || [];\r\n      this.featureImportance = modelData.featureImportance || [];\r\n      this.trainingMetrics = modelData.trainingMetrics;\r\n      \r\n      // Reconstruct models\r\n      this.models = modelData.models.map((serializedModel: any) => \r\n        this.deserializeModel(serializedModel)\r\n      );\r\n      \r\n      this.isTrained = this.models.length > 0;\r\n      \r\n      console.log(`✅ Model loaded successfully (${this.models.length} ensemble models)`);\r\n    } catch (error) {\r\n      throw new Error(`Failed to load model: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prepare training data from raw data\r\n   */\r\n  private prepareTrainingData(data: TrainingData[]): { features: number[][]; targets: number[] } {\r\n    const features: number[][] = [];\r\n    const targets: number[] = [];\r\n\r\n    for (let i = 0; i < data.length - 1; i++) {\r\n      const current = data[i];\r\n      const next = data[i + 1];\r\n\r\n      // Use provided features or generate basic ones\r\n      let featureVector: number[];\r\n      if (current.features && current.features.length > 0) {\r\n        featureVector = current.features;\r\n      } else {\r\n        // Generate basic features from OHLCV data\r\n        featureVector = this.generateBasicFeatures(data, i);\r\n      }\r\n\r\n      // Calculate target (next period return)\r\n      const target = current.target !== undefined ? \r\n        current.target : \r\n        (next.close - current.close) / current.close;\r\n\r\n      if (featureVector.length > 0 && isFinite(target)) {\r\n        features.push(featureVector);\r\n        targets.push(target);\r\n      }\r\n    }\r\n\r\n    return { features, targets };\r\n  }\r\n\r\n  /**\r\n   * Generate basic features from OHLCV data\r\n   */\r\n  private generateBasicFeatures(data: TrainingData[], index: number): number[] {\r\n    const features: number[] = [];\r\n    const current = data[index];\r\n    \r\n    // Basic price features\r\n    features.push(\r\n      (current.high - current.low) / current.close, // High-low range\r\n      (current.close - current.open) / current.open, // Open-close return\r\n      current.volume / 1000000 // Normalized volume\r\n    );\r\n\r\n    // Simple moving averages (if enough history)\r\n    const lookbacks = [5, 10, 20];\r\n    for (const lookback of lookbacks) {\r\n      if (index >= lookback) {\r\n        const prices = data.slice(index - lookback + 1, index + 1).map(d => d.close);\r\n        const sma = StatisticsUtils.mean(prices);\r\n        features.push((current.close - sma) / sma);\r\n      } else {\r\n        features.push(0);\r\n      }\r\n    }\r\n\r\n    // Simple returns (if enough history)\r\n    for (let lag = 1; lag <= 5; lag++) {\r\n      if (index >= lag) {\r\n        const prevClose = data[index - lag].close;\r\n        features.push((current.close - prevClose) / prevClose);\r\n      } else {\r\n        features.push(0);\r\n      }\r\n    }\r\n\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Split data into training and testing sets\r\n   */\r\n  private splitData(features: number[][], targets: number[]) {\r\n    const n = features.length;\r\n    const trainSize = Math.floor(n * this.options.trainingRatio);\r\n    \r\n    const trainX = features.slice(0, trainSize);\r\n    const testX = features.slice(trainSize);\r\n    const trainY = targets.slice(0, trainSize);\r\n    const testY = targets.slice(trainSize);\r\n    \r\n    return { trainX, trainY, testX, testY };\r\n  }\r\n\r\n  /**\r\n   * Train ensemble of models\r\n   */\r\n  private async trainEnsemble(trainX: number[][], trainY: number[]): Promise<void> {\r\n    this.models = [];\r\n    this.modelWeights = [];\r\n\r\n    for (let i = 0; i < this.options.ensembleSize; i++) {\r\n      console.log(`Training model ${i + 1}/${this.options.ensembleSize}...`);\r\n      \r\n      const model = await this.trainSingleModel(trainX, trainY, i);\r\n      const weight = this.calculateModelWeight(model, trainX, trainY);\r\n      \r\n      this.models.push(model);\r\n      this.modelWeights.push(weight);\r\n    }\r\n\r\n    // Normalize weights\r\n    const totalWeight = StatisticsUtils.sum(this.modelWeights);\r\n    if (totalWeight > 0) {\r\n      this.modelWeights = this.modelWeights.map(w => w / totalWeight);\r\n    } else {\r\n      this.modelWeights = new Array(this.models.length).fill(1 / this.models.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Train a single model in the ensemble\r\n   */\r\n  private async trainSingleModel(trainX: number[][], trainY: number[], modelIndex: number): Promise<any> {\r\n    // Bootstrap sampling for diversity\r\n    const { sampledX, sampledY } = this.bootstrapSample(trainX, trainY, modelIndex);\r\n    \r\n    // Simple linear regression model (in production, use more sophisticated models)\r\n    const model = this.trainLinearRegression(sampledX, sampledY);\r\n    \r\n    return {\r\n      type: 'linear',\r\n      coefficients: model.coefficients,\r\n      intercept: model.intercept,\r\n      seed: modelIndex * 42\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Train a simple linear regression model\r\n   */\r\n  private trainLinearRegression(X: number[][], y: number[]): { coefficients: number[]; intercept: number } {\r\n    const n = X.length;\r\n    const p = X[0]?.length || 0;\r\n    \r\n    if (n === 0 || p === 0) {\r\n      return { coefficients: [], intercept: 0 };\r\n    }\r\n\r\n    // Add intercept column\r\n    const XWithIntercept = X.map(row => [1, ...row]);\r\n    \r\n    // Normal equation: β = (X'X)^(-1)X'y\r\n    // Simplified implementation for demonstration\r\n    const coefficients = new Array(p).fill(0);\r\n    let intercept = StatisticsUtils.mean(y);\r\n    \r\n    // Simple gradient descent approximation\r\n    for (let feature = 0; feature < p; feature++) {\r\n      const featureValues = X.map(row => row[feature]);\r\n      const correlation = MathUtils.correlation(featureValues, y);\r\n      coefficients[feature] = correlation * 0.1; // Simplified coefficient\r\n    }\r\n    \r\n    return { coefficients, intercept };\r\n  }\r\n\r\n  /**\r\n   * Bootstrap sampling for ensemble diversity\r\n   */\r\n  private bootstrapSample(X: number[][], y: number[], seed: number): { sampledX: number[][]; sampledY: number[] } {\r\n    const n = X.length;\r\n    const sampledX: number[][] = [];\r\n    const sampledY: number[] = [];\r\n\r\n    // Use seed for reproducible randomness\r\n    let random = seed;\r\n    const nextRandom = () => {\r\n      random = (random * 9301 + 49297) % 233280;\r\n      return random / 233280;\r\n    };\r\n\r\n    for (let i = 0; i < n; i++) {\r\n      const randomIndex = Math.floor(nextRandom() * n);\r\n      sampledX.push([...X[randomIndex]]);\r\n      sampledY.push(y[randomIndex]);\r\n    }\r\n\r\n    return { sampledX, sampledY };\r\n  }\r\n\r\n  /**\r\n   * Calculate model weight based on performance\r\n   */\r\n  private calculateModelWeight(model: any, X: number[][], y: number[]): number {\r\n    const predictions = X.map(features => this.predictWithModel(model, features, 0));\r\n    const mse = StatisticsUtils.mean(predictions.map((pred, i) => Math.pow(pred - y[i], 2)));\r\n    \r\n    // Weight inversely proportional to error\r\n    return mse > 0 ? 1 / (1 + mse) : 1;\r\n  }\r\n\r\n  /**\r\n   * Make prediction with a single model\r\n   */\r\n  private predictWithModel(model: any, features: number[], modelIndex: number): number {\r\n    if (model.type === 'linear') {\r\n      let prediction = model.intercept;\r\n      for (let i = 0; i < Math.min(features.length, model.coefficients.length); i++) {\r\n        prediction += features[i] * model.coefficients[i];\r\n      }\r\n      return prediction;\r\n    }\r\n    \r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Combine predictions from ensemble\r\n   */\r\n  private combinepredictions(predictions: number[]): number {\r\n    if (predictions.length === 0) return 0;\r\n    \r\n    // Weighted average\r\n    let weightedSum = 0;\r\n    let totalWeight = 0;\r\n    \r\n    for (let i = 0; i < predictions.length; i++) {\r\n      const weight = this.modelWeights[i] || (1 / predictions.length);\r\n      weightedSum += predictions[i] * weight;\r\n      totalWeight += weight;\r\n    }\r\n    \r\n    return totalWeight > 0 ? weightedSum / totalWeight : StatisticsUtils.mean(predictions);\r\n  }\r\n\r\n  /**\r\n   * Calculate prediction confidence based on ensemble agreement\r\n   */\r\n  private calculatePredictionConfidence(predictions: number[]): number {\r\n    if (predictions.length === 0) return 0;\r\n    \r\n    const mean = StatisticsUtils.mean(predictions);\r\n    const std = StatisticsUtils.standardDeviation(predictions);\r\n    \r\n    // Confidence inversely related to standard deviation\r\n    const normalizedStd = std / (Math.abs(mean) + 1e-8);\r\n    const confidence = Math.max(0, Math.min(1, 1 - normalizedStd));\r\n    \r\n    return confidence;\r\n  }\r\n\r\n  /**\r\n   * Calculate feature importance\r\n   */\r\n  private calculateFeatureImportance(featureCount: number): void {\r\n    // Simplified feature importance calculation\r\n    this.featureImportance = new Array(featureCount).fill(0);\r\n    \r\n    // Calculate average absolute coefficients across models\r\n    for (const model of this.models) {\r\n      if (model.coefficients) {\r\n        for (let i = 0; i < Math.min(featureCount, model.coefficients.length); i++) {\r\n          this.featureImportance[i] += Math.abs(model.coefficients[i]);\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Normalize\r\n    const total = StatisticsUtils.sum(this.featureImportance);\r\n    if (total > 0) {\r\n      this.featureImportance = this.featureImportance.map(imp => imp / total);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate model performance metrics\r\n   */\r\n  private calculateMetrics(predictions: number[], actual: number[]): ModelMetrics {\r\n    const n = Math.min(predictions.length, actual.length);\r\n    if (n === 0) {\r\n      return {\r\n        mae: 1,\r\n        mse: 1,\r\n        rmse: 1,\r\n        r2: 0,\r\n        directionalAccuracy: 0.5,\r\n        sampleCount: 0\r\n      };\r\n    }\r\n    \r\n    const pred = predictions.slice(0, n);\r\n    const act = actual.slice(0, n);\r\n    \r\n    // Mean Absolute Error\r\n    const mae = StatisticsUtils.mean(pred.map((p, i) => Math.abs(p - act[i])));\r\n    \r\n    // Root Mean Square Error\r\n    const mse = StatisticsUtils.mean(pred.map((p, i) => Math.pow(p - act[i], 2)));\r\n    const rmse = Math.sqrt(mse);\r\n    \r\n    // R-squared\r\n    const actualMean = StatisticsUtils.mean(act);\r\n    const totalSumSquares = StatisticsUtils.sum(act.map(a => Math.pow(a - actualMean, 2)));\r\n    const residualSumSquares = StatisticsUtils.sum(pred.map((p, i) => Math.pow(act[i] - p, 2)));\r\n    const r2 = totalSumSquares > 0 ? 1 - (residualSumSquares / totalSumSquares) : 0;\r\n    \r\n    // Directional Accuracy\r\n    const correctDirections = pred.filter((p, i) => {\r\n      return (p > 0 && act[i] > 0) || (p < 0 && act[i] < 0) || (Math.abs(p) < 1e-8 && Math.abs(act[i]) < 1e-8);\r\n    }).length;\r\n    const directionalAccuracy = correctDirections / n;\r\n    \r\n    return {\r\n      mae,\r\n      mse,\r\n      rmse,\r\n      r2,\r\n      directionalAccuracy,\r\n      sampleCount: n\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Serialize model for saving\r\n   */\r\n  private serializeModel(model: any): any {\r\n    return {\r\n      type: model.type,\r\n      coefficients: model.coefficients,\r\n      intercept: model.intercept,\r\n      seed: model.seed\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Deserialize model for loading\r\n   */\r\n  private deserializeModel(serializedModel: any): any {\r\n    return {\r\n      type: serializedModel.type,\r\n      coefficients: serializedModel.coefficients || [],\r\n      intercept: serializedModel.intercept || 0,\r\n      seed: serializedModel.seed || 0\r\n    };\r\n  }\r\n}","/**\r\n * MeridianAlgo-JS v2.0 - Ultra-Precision Trading Library\r\n * \r\n * Advanced algorithmic trading and financial analysis library with\r\n * ultra-precision machine learning capabilities for JavaScript/TypeScript.\r\n * \r\n * @author MeridianAlgo Team\r\n * @version 2.0.0\r\n * @license MIT\r\n */\r\n\r\n// Core Predictors\r\nexport { UltraPrecisionPredictor } from './predictors/UltraPrecisionPredictor';\r\n\r\n// Feature Engineering\r\nexport { FeatureEngineer } from './features/FeatureEngineer';\r\nexport { TechnicalIndicators } from './indicators/TechnicalIndicators';\r\n\r\n// Utilities\r\nexport { MathUtils } from './utils/MathUtils';\r\nexport { StatisticsUtils } from './utils/StatisticsUtils';\r\nexport { ValidationUtils } from './utils/ValidationUtils';\r\n\r\n// Types\r\nexport { MarketData, ExtendedMarketData, TickData, OrderBook, ValidationResult } from './types/MarketData';\r\nexport { PredictorOptions, TrainingData, PredictionResult, ModelMetrics, TrainingResults } from './types/Prediction';\r\nexport { FeatureOptions, FeatureMatrix, FeatureMetadata } from './types/Features';\r\n\r\n// Constants\r\nexport { DEFAULT_CONFIG } from './config/defaults';\r\nexport { INDICATORS_CONFIG } from './config/indicators';\r\n\r\n/**\r\n * Library version\r\n */\r\nexport const VERSION = '2.0.0';"],"names":["ValidationUtils","validateMarketData","data","errors","warnings","Array","isArray","length","push","code","message","severity","isValid","forEach","item","index","this","validateSingleMarketData","validateChronologicalOrder","validateDataGaps","validateOutliers","prefix","timestamp","field","symbol","value","isFinite","high","low","open","close","undefined","vwap","trades","Number","isInteger","i","prevTime","Date","getTime","currTime","intervals","intervalCounts","Map","interval","set","get","expectedInterval","maxCount","count","returns","prevClose","currClose","mean","reduce","sum","r","variance","Math","pow","std","sqrt","ret","abs","validateTrainingData","marketDataResult","features","feature","featureIndex","target","validateFeatures","validatePortfolioWeights","weights","weight","validateDateRange","startDate","endDate","isNaN","daysDiff","validateNumericParameter","name","options","integer","positive","min","max","sanitizeMarketData","filter","volume","map","floor","sort","a","b","StatisticsUtils","Error","median","sorted","mid","mode","frequency","maxFreq","freq","modes","standardDeviation","sample","x","diff","skewness","n","kurtosis","excess","kurtosisValue","quantile","q","lower","upper","ceil","interquartileRange","q1","detectOutliers","multiplier","q3","iqr","lowerBound","upperBound","outliers","indices","zScores","rollingStatistic","window","statistic","result","windowData","slice","valueAtRisk","confidenceLevel","expectedShortfall","varValue","tailReturns","maxDrawdown","cumulativeReturns","peak","peakIndex","troughIndex","drawdown","trough","sharpeRatio","riskFreeRate","excessReturns","meanExcessReturn","Infinity","sortinoRatio","targetReturn","downsideReturns","downsideDeviation","calmarRatio","cumulativeSum","totalReturn","cumulativeProduct","product","range","coefficientOfVariation","jarqueBeraTest","skew","kurt","jb","pValue","chiSquareCDF","isNormal","df","exp","autocorrelation","lag","x1","x2","mean1","mean2","numerator","denominator1","denominator2","diff1","diff2","denominator","autocorrelationFunction","maxLag","MathUtils","safeLog","log","safeSqrt","percentageChange","oldValue","newValue","logReturn","price1","price2","simpleReturn","cagr","beginValue","endValue","periods","annualizeReturn","periodsPerYear","annualizeVolatility","volatility","linearInterpolate","x0","y0","y1","clamp","isApproximatelyEqual","tolerance","roundTo","decimals","factor","round","factorial","combination","k","permutation","gcd","temp","lcm","start","end","step","linspace","num","logspace","base","movingAverage","exponentialMovingAverage","alpha","ema","weightedMovingAverage","weightSum","weightedSum","j","rollingCorrelation","y","xWindow","yWindow","correlation","sumX","sumY","sumXY","xi","sumX2","sumY2","yi","covariance","meanX","meanY","covar","beta","marketReturns","marketVariance","normalize","standardize","DEFAULT_PREDICTOR_OPTIONS","targetErrorRate","ensembleSize","featureCount","trainingRatio","crossValidationFolds","hyperparameterTuning","parallelProcessing","cacheFeatures","incrementalLearning","updateFrequency","predictionHorizon","confidenceThreshold","DEFAULT_FEATURE_OPTIONS","targetFeatureCount","enableAdvancedFeatures","enableMicrostructure","enableVolatilityFeatures","enableStatisticalFeatures","enableHarmonicFeatures","enableCrossAssetFeatures","lookbackPeriods","technicalIndicators","rsi","macd","fast","slow","signal","bollinger","period","stochastic","kPeriod","dPeriod","williams","cci","DEFAULT_CONFIG","predictor","optimizer","objective","constraints","minWeight","maxWeight","minTotalWeight","maxTotalWeight","longOnly","riskModel","optimizationMethod","rebalanceFrequency","performance","enableParallelProcessing","maxWorkers","cacheSize","memoryLimit","enableProfiling","validation","strictMode","autoSanitize","warningsAsErrors","logging","level","enableConsole","enableFile","maxLogSize","TechnicalIndicators","sma","wma","from","_","changes","gains","change","losses","avgGains","avgLosses","rsiValues","rs","fastPeriod","slowPeriod","signalPeriod","fastEMA","slowEMA","startIndex","macdLine","signalLine","alignedMACDLine","histogram","bollingerBands","smaValues","bandwidth","percentB","dataSlice","upperBand","lowerBand","currentPrice","middle","highestHigh","lowestLow","d","williamsR","typicalPrice","h","tpSlice","smaTP","meanDeviation","tp","atr","trueRanges","tr1","tr2","tr3","adx","plusDM","minusDM","highDiff","lowDiff","smoothedPlusDM","smoothedMinusDM","smoothedTR","plusDI","dm","minusDI","dx","plus","mfi","rawMoneyFlow","positiveFlow","negativeFlow","moneyRatio","obv","cumulativeTPV","cumulativeVolume","momentum","roc","linearRegressionSlope","slopes","idx","val","slope","pivotPoints","pivot","r1","r2","r3","s1","s2","s3","extractPrices","priceType","extractOHLCV","constructor","featureNames","featureMetadata","generateFeatures","console","addBasicFeatures","addTechnicalIndicators","addStatisticalFeatures","addVolatilityFeatures","addCrossSectionalFeatures","addPatternFeatures","addHarmonicFeatures","metadata","columns","rows","getFeatureNames","getFeatureMetadata","closes","highs","lows","opens","volumes","calculateReturns","logReturns","calculateLogReturns","hlRatio","ocRatio","o","bodySize","upperShadow","lowerShadow","l","addFeatureColumn","volumeReturns","priceVolumeCorr","calculateRollingCorrelation","volumeMA","calculateMovingAverage","volumeRatio","v","rsiVelocity","calculateVelocity","rsiAcceleration","bb","stoch","rollingMean","rollingStd","rollingSkew","rollingKurt","rollingMin","rollingMax","autocorr","calculateRollingAutocorrelation","ccVol","calculateRollingVolatility","parkVol","calculateParkinsonVolatility","volOfVol","garchVol","calculateGARCHVolatility","volRegime","detectVolatilityRegime","returnRanks","calculateRollingRanks","volumeRanks","returnZScores","calculateRollingZScores","volumeZScores","doji","detectDoji","hammer","detectHammer","engulfing","detectEngulfing","supportResistance","detectSupportResistance","support","resistance","trendStrength","calculateTrendStrength","fourierFeatures","calculateFourierFeatures","cyclicalFeatures","calculateCyclicalFeatures","values","description","paddedValues","fill","category","dataType","missingValueStrategy","prices","velocity","logHL","vol","volMean","volStd","ranks","currentValue","rank","laggedSlice","pattern","prevBody","currBody","supportLevel","resistanceLevel","realPart","imagPart","angle","PI","cos","sin","cycles","cycle","cyclicalFeature","phase","SMA","defaultPeriods","minPeriod","maxPeriod","EMA","WMA","RSI","defaultPeriod","alternativePeriods","overboughtLevel","oversoldLevel","MACD","alternativeSettings","STOCHASTIC","smoothing","WILLIAMS_R","CCI","constant","BOLLINGER_BANDS","ATR","ADX","trendThreshold","strongTrendThreshold","PARABOLIC_SAR","accelerationFactor","maxAcceleration","af","OBV","MFI","VWAP","resetPeriod","MOMENTUM","ROC","STANDARD_DEVIATION","VARIANCE","LINEAR_REGRESSION_SLOPE","models","isTrained","featureImportance","trainingMetrics","lastConfidence","modelWeights","train","e","join","targets","prepareTrainingData","trainX","trainY","testX","testY","splitData","startTime","now","trainEnsemble","trainingTime","predictions","predictBatch","calculateMetrics","calculateFeatureImportance","mae","toFixed","rmse","directionalAccuracy","validationMetrics","predict","model","predictWithModel","error","warn","weightedPrediction","combinepredictions","calculatePredictionConfidence","featuresMatrix","prediction","getConfidence","getFeatureImportance","getTrainingMetrics","isModelTrained","saveModel","modelData","version","serializeModel","toISOString","JSON","stringify","loadModel","modelJson","parse","serializedModel","deserializeModel","current","next","featureVector","generateBasicFeatures","lookbacks","lookback","trainSize","trainSingleModel","calculateModelWeight","totalWeight","w","modelIndex","sampledX","sampledY","bootstrapSample","trainLinearRegression","type","coefficients","intercept","seed","X","p","row","featureValues","random","nextRandom","randomIndex","mse","pred","normalizedStd","total","imp","actual","sampleCount","act","actualMean","totalSumSquares","residualSumSquares"],"mappings":"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"}