/**
 * Advanced Feature Engineer
 *
 * Generates 1000+ sophisticated features from basic OHLCV market data
 * using advanced technical analysis, statistical methods, and machine learning.
 */
import { FeatureOptions, FeatureMatrix, FeatureMetadata } from '../types/Features';
import { MarketData } from '../types/MarketData';
/**
 * Advanced feature engineering implementation
 */
export declare class FeatureEngineer {
    private options;
    private featureNames;
    private featureMetadata;
    constructor(options?: Partial<FeatureOptions>);
    /**
     * Generate comprehensive feature matrix from market data
     */
    generateFeatures(data: MarketData[]): FeatureMatrix;
    /**
     * Get feature names
     */
    getFeatureNames(): string[];
    /**
     * Get feature metadata
     */
    getFeatureMetadata(): FeatureMetadata[];
    /**
     * Add basic OHLCV-derived features
     */
    private addBasicFeatures;
    /**
     * Add technical indicator features
     */
    private addTechnicalIndicators;
    /**
     * Add statistical features
     */
    private addStatisticalFeatures;
    /**
     * Add volatility features
     */
    private addVolatilityFeatures;
    /**
     * Add cross-sectional features
     */
    private addCrossSectionalFeatures;
    /**
     * Add pattern recognition features
     */
    private addPatternFeatures;
    /**
     * Add harmonic features
     */
    private addHarmonicFeatures;
    /**
     * Helper method to add a feature column
     */
    private addFeatureColumn;
    /**
     * Calculate returns
     */
    private calculateReturns;
    /**
     * Calculate log returns
     */
    private calculateLogReturns;
    /**
     * Calculate velocity (first difference)
     */
    private calculateVelocity;
    /**
     * Calculate moving average
     */
    private calculateMovingAverage;
    /**
     * Calculate rolling correlation
     */
    private calculateRollingCorrelation;
    /**
     * Calculate rolling volatility
     */
    private calculateRollingVolatility;
    /**
     * Calculate Parkinson volatility
     */
    private calculateParkinsonVolatility;
    /**
     * Calculate GARCH-like volatility
     */
    private calculateGARCHVolatility;
    /**
     * Detect volatility regime
     */
    private detectVolatilityRegime;
    /**
     * Calculate rolling ranks
     */
    private calculateRollingRanks;
    /**
     * Calculate rolling z-scores
     */
    private calculateRollingZScores;
    /**
     * Calculate rolling autocorrelation
     */
    private calculateRollingAutocorrelation;
    /**
     * Detect Doji candlestick pattern
     */
    private detectDoji;
    /**
     * Detect Hammer candlestick pattern
     */
    private detectHammer;
    /**
     * Detect Engulfing pattern
     */
    private detectEngulfing;
    /**
     * Detect support and resistance levels
     */
    private detectSupportResistance;
    /**
     * Calculate trend strength
     */
    private calculateTrendStrength;
    /**
     * Calculate Fourier features (simplified)
     */
    private calculateFourierFeatures;
    /**
     * Calculate cyclical features
     */
    private calculateCyclicalFeatures;
}
//# sourceMappingURL=FeatureEngineer.d.ts.map