/**
 * Ultra-Precision Predictor
 *
 * Advanced ensemble predictor targeting sub-1% error rates through
 * sophisticated feature engineering and model combination.
 */
import { PredictorOptions, TrainingData, ModelMetrics, TrainingResults } from '../types/Prediction';
/**
 * Ultra-precision predictor implementation
 */
export declare class UltraPrecisionPredictor {
    private options;
    private models;
    private isTrained;
    private featureImportance;
    private trainingMetrics;
    private lastConfidence;
    private modelWeights;
    constructor(options?: Partial<PredictorOptions>);
    /**
     * Train the ultra-precision predictor
     */
    train(data: TrainingData[]): Promise<TrainingResults>;
    /**
     * Make ultra-precise prediction
     */
    predict(features: number[]): Promise<number>;
    /**
     * Batch prediction for multiple samples
     */
    predictBatch(featuresMatrix: number[][]): Promise<number[]>;
    /**
     * Get prediction confidence (0-1)
     */
    getConfidence(): number;
    /**
     * Get feature importance scores
     */
    getFeatureImportance(): number[];
    /**
     * Get training metrics
     */
    getTrainingMetrics(): ModelMetrics | null;
    /**
     * Check if model is trained
     */
    isModelTrained(): boolean;
    /**
     * Save model to JSON string
     */
    saveModel(): Promise<string>;
    /**
     * Load model from JSON string
     */
    loadModel(modelJson: string): Promise<void>;
    /**
     * Prepare training data from raw data
     */
    private prepareTrainingData;
    /**
     * Generate basic features from OHLCV data
     */
    private generateBasicFeatures;
    /**
     * Split data into training and testing sets
     */
    private splitData;
    /**
     * Train ensemble of models
     */
    private trainEnsemble;
    /**
     * Train a single model in the ensemble
     */
    private trainSingleModel;
    /**
     * Train a simple linear regression model
     */
    private trainLinearRegression;
    /**
     * Bootstrap sampling for ensemble diversity
     */
    private bootstrapSample;
    /**
     * Calculate model weight based on performance
     */
    private calculateModelWeight;
    /**
     * Make prediction with a single model
     */
    private predictWithModel;
    /**
     * Combine predictions from ensemble
     */
    private combinepredictions;
    /**
     * Calculate prediction confidence based on ensemble agreement
     */
    private calculatePredictionConfidence;
    /**
     * Calculate feature importance
     */
    private calculateFeatureImportance;
    /**
     * Calculate model performance metrics
     */
    private calculateMetrics;
    /**
     * Serialize model for saving
     */
    private serializeModel;
    /**
     * Deserialize model for loading
     */
    private deserializeModel;
}
//# sourceMappingURL=UltraPrecisionPredictor.d.ts.map