/**
 * Statistical Utilities
 *
 * Advanced statistical functions for financial analysis and risk management.
 */
/**
 * Statistical utility functions
 */
export declare class StatisticsUtils {
    /**
     * Calculate mean (average)
     */
    static mean(data: number[]): number;
    /**
     * Calculate median
     */
    static median(data: number[]): number;
    /**
     * Calculate mode (most frequent value)
     */
    static mode(data: number[]): number[];
    /**
     * Calculate standard deviation
     */
    static standardDeviation(data: number[], sample?: boolean): number;
    /**
     * Calculate variance
     */
    static variance(data: number[], sample?: boolean): number;
    /**
     * Calculate skewness (measure of asymmetry)
     */
    static skewness(data: number[]): number;
    /**
     * Calculate kurtosis (measure of tail heaviness)
     */
    static kurtosis(data: number[], excess?: boolean): number;
    /**
     * Calculate quantile (percentile)
     */
    static quantile(data: number[], q: number): number;
    /**
     * Calculate interquartile range (IQR)
     */
    static interquartileRange(data: number[]): number;
    /**
     * Detect outliers using IQR method
     */
    static detectOutliers(data: number[], multiplier?: number): {
        outliers: number[];
        indices: number[];
    };
    /**
     * Calculate z-scores
     */
    static zScores(data: number[]): number[];
    /**
     * Calculate rolling statistics
     */
    static rollingStatistic(data: number[], window: number, statistic: 'mean' | 'std' | 'var' | 'min' | 'max' | 'median' | 'skewness' | 'kurtosis'): number[];
    /**
     * Calculate Value at Risk (VaR)
     */
    static valueAtRisk(returns: number[], confidenceLevel?: number): number;
    /**
     * Calculate Expected Shortfall (Conditional VaR)
     */
    static expectedShortfall(returns: number[], confidenceLevel?: number): number;
    /**
     * Calculate maximum drawdown
     */
    static maxDrawdown(cumulativeReturns: number[]): {
        maxDrawdown: number;
        peak: number;
        trough: number;
    };
    /**
     * Calculate Sharpe ratio
     */
    static sharpeRatio(returns: number[], riskFreeRate?: number): number;
    /**
     * Calculate Sortino ratio
     */
    static sortinoRatio(returns: number[], riskFreeRate?: number, targetReturn?: number): number;
    /**
     * Calculate Calmar ratio
     */
    static calmarRatio(returns: number[]): number;
    /**
     * Calculate cumulative sum
     */
    static cumulativeSum(data: number[]): number[];
    /**
     * Calculate cumulative product
     */
    static cumulativeProduct(data: number[]): number[];
    /**
     * Calculate sum
     */
    static sum(data: number[]): number;
    /**
     * Calculate product
     */
    static product(data: number[]): number;
    /**
     * Calculate range (max - min)
     */
    static range(data: number[]): number;
    /**
     * Calculate coefficient of variation
     */
    static coefficientOfVariation(data: number[]): number;
    /**
     * Perform Jarque-Bera test for normality
     */
    static jarqueBeraTest(data: number[]): {
        statistic: number;
        pValue: number;
        isNormal: boolean;
    };
    /**
     * Approximate chi-square CDF (simplified implementation)
     */
    private static chiSquareCDF;
    /**
     * Calculate autocorrelation at given lag
     */
    static autocorrelation(data: number[], lag: number): number;
    /**
     * Calculate multiple autocorrelations
     */
    static autocorrelationFunction(data: number[], maxLag: number): number[];
}
//# sourceMappingURL=StatisticsUtils.d.ts.map