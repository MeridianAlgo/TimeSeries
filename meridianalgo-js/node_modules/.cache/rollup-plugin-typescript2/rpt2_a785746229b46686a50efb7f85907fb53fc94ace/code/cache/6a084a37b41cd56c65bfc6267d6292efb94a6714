{"code":"/**\n * Validation Utilities\n *\n * Comprehensive data validation and error checking utilities.\n */\n/**\n * Validation utility functions\n */\nexport class ValidationUtils {\n    /**\n     * Validate market data array\n     */\n    static validateMarketData(data) {\n        const errors = [];\n        const warnings = [];\n        if (!Array.isArray(data)) {\n            errors.push({\n                code: 'INVALID_TYPE',\n                message: 'Data must be an array',\n                severity: 'critical'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        if (data.length === 0) {\n            errors.push({\n                code: 'EMPTY_DATA',\n                message: 'Data array cannot be empty',\n                severity: 'critical'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        // Validate each data point\n        data.forEach((item, index) => {\n            this.validateSingleMarketData(item, index, errors, warnings);\n        });\n        // Check for chronological order\n        this.validateChronologicalOrder(data, errors, warnings);\n        // Check for data gaps\n        this.validateDataGaps(data, warnings);\n        // Check for outliers\n        this.validateOutliers(data, warnings);\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Validate single market data point\n     */\n    static validateSingleMarketData(item, index, errors, warnings) {\n        const prefix = `Item ${index}`;\n        // Check required fields\n        if (!item.timestamp) {\n            errors.push({\n                code: 'MISSING_TIMESTAMP',\n                message: `${prefix}: Missing timestamp`,\n                field: 'timestamp',\n                severity: 'high'\n            });\n        }\n        if (!item.symbol || typeof item.symbol !== 'string') {\n            errors.push({\n                code: 'INVALID_SYMBOL',\n                message: `${prefix}: Invalid or missing symbol`,\n                field: 'symbol',\n                value: item.symbol,\n                severity: 'high'\n            });\n        }\n        // Validate numeric fields\n        const numericFields = ['open', 'high', 'low', 'close', 'volume'];\n        numericFields.forEach(field => {\n            const value = item[field];\n            if (typeof value !== 'number' || !isFinite(value)) {\n                errors.push({\n                    code: 'INVALID_NUMERIC_FIELD',\n                    message: `${prefix}: ${field} must be a finite number`,\n                    field,\n                    value,\n                    severity: 'high'\n                });\n            }\n            else if (value < 0 && field !== 'close') { // Close can be negative for some instruments\n                errors.push({\n                    code: 'NEGATIVE_VALUE',\n                    message: `${prefix}: ${field} cannot be negative`,\n                    field,\n                    value,\n                    severity: 'medium'\n                });\n            }\n        });\n        // Validate OHLC relationships\n        if (typeof item.high === 'number' && typeof item.low === 'number') {\n            if (item.high < item.low) {\n                errors.push({\n                    code: 'INVALID_HIGH_LOW',\n                    message: `${prefix}: High price cannot be less than low price`,\n                    severity: 'high'\n                });\n            }\n        }\n        if (typeof item.open === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\n            if (item.open > item.high || item.open < item.low) {\n                warnings.push({\n                    code: 'OPEN_OUT_OF_RANGE',\n                    message: `${prefix}: Open price is outside high-low range`,\n                    field: 'open',\n                    value: item.open\n                });\n            }\n        }\n        if (typeof item.close === 'number' && typeof item.high === 'number' && typeof item.low === 'number') {\n            if (item.close > item.high || item.close < item.low) {\n                warnings.push({\n                    code: 'CLOSE_OUT_OF_RANGE',\n                    message: `${prefix}: Close price is outside high-low range`,\n                    field: 'close',\n                    value: item.close\n                });\n            }\n        }\n        // Validate optional fields\n        if (item.vwap !== undefined) {\n            if (typeof item.vwap !== 'number' || !isFinite(item.vwap)) {\n                warnings.push({\n                    code: 'INVALID_VWAP',\n                    message: `${prefix}: VWAP must be a finite number`,\n                    field: 'vwap',\n                    value: item.vwap\n                });\n            }\n        }\n        if (item.trades !== undefined) {\n            if (!Number.isInteger(item.trades) || item.trades < 0) {\n                warnings.push({\n                    code: 'INVALID_TRADES',\n                    message: `${prefix}: Trades must be a non-negative integer`,\n                    field: 'trades',\n                    value: item.trades\n                });\n            }\n        }\n    }\n    /**\n     * Validate chronological order\n     */\n    static validateChronologicalOrder(data, errors, warnings) {\n        for (let i = 1; i < data.length; i++) {\n            const prevTime = new Date(data[i - 1].timestamp).getTime();\n            const currTime = new Date(data[i].timestamp).getTime();\n            if (currTime < prevTime) {\n                errors.push({\n                    code: 'NON_CHRONOLOGICAL',\n                    message: `Data is not in chronological order at index ${i}`,\n                    severity: 'medium'\n                });\n            }\n            else if (currTime === prevTime) {\n                warnings.push({\n                    code: 'DUPLICATE_TIMESTAMP',\n                    message: `Duplicate timestamp at index ${i}`,\n                    value: data[i].timestamp\n                });\n            }\n        }\n    }\n    /**\n     * Validate data gaps\n     */\n    static validateDataGaps(data, warnings) {\n        if (data.length < 2)\n            return;\n        const intervals = [];\n        for (let i = 1; i < data.length; i++) {\n            const prevTime = new Date(data[i - 1].timestamp).getTime();\n            const currTime = new Date(data[i].timestamp).getTime();\n            intervals.push(currTime - prevTime);\n        }\n        // Calculate expected interval (mode of intervals)\n        const intervalCounts = new Map();\n        intervals.forEach(interval => {\n            intervalCounts.set(interval, (intervalCounts.get(interval) || 0) + 1);\n        });\n        let expectedInterval = 0;\n        let maxCount = 0;\n        for (const [interval, count] of intervalCounts) {\n            if (count > maxCount) {\n                maxCount = count;\n                expectedInterval = interval;\n            }\n        }\n        // Check for gaps larger than 2x expected interval\n        intervals.forEach((interval, index) => {\n            if (interval > expectedInterval * 2) {\n                warnings.push({\n                    code: 'DATA_GAP',\n                    message: `Large data gap detected between index ${index} and ${index + 1}`,\n                    value: interval\n                });\n            }\n        });\n    }\n    /**\n     * Validate outliers in price data\n     */\n    static validateOutliers(data, warnings) {\n        if (data.length < 10)\n            return; // Need sufficient data for outlier detection\n        const returns = [];\n        for (let i = 1; i < data.length; i++) {\n            const prevClose = data[i - 1].close;\n            const currClose = data[i].close;\n            if (prevClose > 0) {\n                returns.push((currClose - prevClose) / prevClose);\n            }\n        }\n        if (returns.length === 0)\n            return;\n        // Calculate z-scores for returns\n        const mean = returns.reduce((sum, r) => sum + r, 0) / returns.length;\n        const variance = returns.reduce((sum, r) => sum + Math.pow(r - mean, 2), 0) / (returns.length - 1);\n        const std = Math.sqrt(variance);\n        if (std === 0)\n            return;\n        returns.forEach((ret, index) => {\n            const zScore = Math.abs((ret - mean) / std);\n            if (zScore > 3) { // 3-sigma rule\n                warnings.push({\n                    code: 'PRICE_OUTLIER',\n                    message: `Potential price outlier detected at index ${index + 1}`,\n                    value: ret\n                });\n            }\n        });\n    }\n    /**\n     * Validate training data\n     */\n    static validateTrainingData(data) {\n        // First validate as market data\n        const marketDataResult = this.validateMarketData(data);\n        // Additional validation for training data\n        const errors = [...marketDataResult.errors];\n        const warnings = [...marketDataResult.warnings];\n        data.forEach((item, index) => {\n            if (item.features !== undefined) {\n                if (!Array.isArray(item.features)) {\n                    errors.push({\n                        code: 'INVALID_FEATURES',\n                        message: `Item ${index}: Features must be an array`,\n                        field: 'features',\n                        severity: 'medium'\n                    });\n                }\n                else {\n                    // Check for invalid feature values\n                    item.features.forEach((feature, featureIndex) => {\n                        if (typeof feature !== 'number' || !isFinite(feature)) {\n                            errors.push({\n                                code: 'INVALID_FEATURE_VALUE',\n                                message: `Item ${index}: Feature ${featureIndex} must be a finite number`,\n                                field: `features[${featureIndex}]`,\n                                value: feature,\n                                severity: 'medium'\n                            });\n                        }\n                    });\n                }\n            }\n            if (item.target !== undefined) {\n                if (typeof item.target !== 'number' || !isFinite(item.target)) {\n                    errors.push({\n                        code: 'INVALID_TARGET',\n                        message: `Item ${index}: Target must be a finite number`,\n                        field: 'target',\n                        value: item.target,\n                        severity: 'medium'\n                    });\n                }\n            }\n        });\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Validate feature array\n     */\n    static validateFeatures(features) {\n        const errors = [];\n        const warnings = [];\n        if (!Array.isArray(features)) {\n            errors.push({\n                code: 'INVALID_TYPE',\n                message: 'Features must be an array',\n                severity: 'critical'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        if (features.length === 0) {\n            errors.push({\n                code: 'EMPTY_FEATURES',\n                message: 'Features array cannot be empty',\n                severity: 'high'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        features.forEach((feature, index) => {\n            if (typeof feature !== 'number') {\n                errors.push({\n                    code: 'INVALID_FEATURE_TYPE',\n                    message: `Feature ${index} must be a number`,\n                    field: `features[${index}]`,\n                    value: feature,\n                    severity: 'high'\n                });\n            }\n            else if (!isFinite(feature)) {\n                errors.push({\n                    code: 'INVALID_FEATURE_VALUE',\n                    message: `Feature ${index} must be finite`,\n                    field: `features[${index}]`,\n                    value: feature,\n                    severity: 'high'\n                });\n            }\n        });\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Validate portfolio weights\n     */\n    static validatePortfolioWeights(weights) {\n        const errors = [];\n        const warnings = [];\n        if (!Array.isArray(weights)) {\n            errors.push({\n                code: 'INVALID_TYPE',\n                message: 'Weights must be an array',\n                severity: 'critical'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        if (weights.length === 0) {\n            errors.push({\n                code: 'EMPTY_WEIGHTS',\n                message: 'Weights array cannot be empty',\n                severity: 'high'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        let sum = 0;\n        weights.forEach((weight, index) => {\n            if (typeof weight !== 'number' || !isFinite(weight)) {\n                errors.push({\n                    code: 'INVALID_WEIGHT_VALUE',\n                    message: `Weight ${index} must be a finite number`,\n                    field: `weights[${index}]`,\n                    value: weight,\n                    severity: 'high'\n                });\n            }\n            else {\n                sum += weight;\n                if (weight < 0) {\n                    warnings.push({\n                        code: 'NEGATIVE_WEIGHT',\n                        message: `Weight ${index} is negative (short position)`,\n                        field: `weights[${index}]`,\n                        value: weight\n                    });\n                }\n            }\n        });\n        // Check if weights sum to approximately 1\n        const tolerance = 1e-6;\n        if (Math.abs(sum - 1) > tolerance) {\n            if (Math.abs(sum - 1) > 0.01) {\n                errors.push({\n                    code: 'WEIGHTS_SUM_ERROR',\n                    message: `Weights sum to ${sum}, should sum to 1.0`,\n                    severity: 'medium'\n                });\n            }\n            else {\n                warnings.push({\n                    code: 'WEIGHTS_SUM_WARNING',\n                    message: `Weights sum to ${sum}, should sum to 1.0`,\n                    value: sum\n                });\n            }\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Validate date range\n     */\n    static validateDateRange(startDate, endDate) {\n        const errors = [];\n        const warnings = [];\n        if (!(startDate instanceof Date) || isNaN(startDate.getTime())) {\n            errors.push({\n                code: 'INVALID_START_DATE',\n                message: 'Start date must be a valid Date object',\n                field: 'startDate',\n                severity: 'high'\n            });\n        }\n        if (!(endDate instanceof Date) || isNaN(endDate.getTime())) {\n            errors.push({\n                code: 'INVALID_END_DATE',\n                message: 'End date must be a valid Date object',\n                field: 'endDate',\n                severity: 'high'\n            });\n        }\n        if (errors.length === 0) {\n            if (startDate >= endDate) {\n                errors.push({\n                    code: 'INVALID_DATE_RANGE',\n                    message: 'Start date must be before end date',\n                    severity: 'high'\n                });\n            }\n            const now = new Date();\n            if (endDate > now) {\n                warnings.push({\n                    code: 'FUTURE_END_DATE',\n                    message: 'End date is in the future',\n                    field: 'endDate',\n                    value: endDate\n                });\n            }\n            const daysDiff = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);\n            if (daysDiff < 1) {\n                warnings.push({\n                    code: 'SHORT_DATE_RANGE',\n                    message: 'Date range is less than 1 day',\n                    value: daysDiff\n                });\n            }\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Validate numeric parameter\n     */\n    static validateNumericParameter(value, name, options = {}) {\n        const errors = [];\n        const warnings = [];\n        if (typeof value !== 'number') {\n            errors.push({\n                code: 'INVALID_TYPE',\n                message: `${name} must be a number`,\n                field: name,\n                value,\n                severity: 'high'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        if (!isFinite(value)) {\n            errors.push({\n                code: 'INVALID_VALUE',\n                message: `${name} must be finite`,\n                field: name,\n                value,\n                severity: 'high'\n            });\n            return { isValid: false, errors, warnings };\n        }\n        if (options.integer && !Number.isInteger(value)) {\n            errors.push({\n                code: 'NOT_INTEGER',\n                message: `${name} must be an integer`,\n                field: name,\n                value,\n                severity: 'medium'\n            });\n        }\n        if (options.positive && value <= 0) {\n            errors.push({\n                code: 'NOT_POSITIVE',\n                message: `${name} must be positive`,\n                field: name,\n                value,\n                severity: 'medium'\n            });\n        }\n        if (options.min !== undefined && value < options.min) {\n            errors.push({\n                code: 'BELOW_MINIMUM',\n                message: `${name} must be at least ${options.min}`,\n                field: name,\n                value,\n                severity: 'medium'\n            });\n        }\n        if (options.max !== undefined && value > options.max) {\n            errors.push({\n                code: 'ABOVE_MAXIMUM',\n                message: `${name} must be at most ${options.max}`,\n                field: name,\n                value,\n                severity: 'medium'\n            });\n        }\n        return {\n            isValid: errors.length === 0,\n            errors,\n            warnings\n        };\n    }\n    /**\n     * Sanitize and clean market data\n     */\n    static sanitizeMarketData(data) {\n        return data\n            .filter(item => {\n            // Remove items with invalid basic structure\n            return item &&\n                typeof item.open === 'number' && isFinite(item.open) &&\n                typeof item.high === 'number' && isFinite(item.high) &&\n                typeof item.low === 'number' && isFinite(item.low) &&\n                typeof item.close === 'number' && isFinite(item.close) &&\n                typeof item.volume === 'number' && isFinite(item.volume) &&\n                item.high >= item.low;\n        })\n            .map(item => ({\n            ...item,\n            // Ensure timestamp is a Date object\n            timestamp: new Date(item.timestamp),\n            // Ensure numeric fields are properly typed\n            open: Number(item.open),\n            high: Number(item.high),\n            low: Number(item.low),\n            close: Number(item.close),\n            volume: Number(item.volume),\n            // Clean optional fields\n            vwap: item.vwap !== undefined ? Number(item.vwap) : undefined,\n            trades: item.trades !== undefined ? Math.floor(Number(item.trades)) : undefined\n        }))\n            .sort((a, b) => a.timestamp.getTime() - b.timestamp.getTime()); // Ensure chronological order\n    }\n}\n//# sourceMappingURL=ValidationUtils.js.map","references":["C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/MarketData.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/Prediction.ts"],"map":"{\"version\":3,\"file\":\"ValidationUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/ValidationUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/ValidationUtils.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"ValidationUtils.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/ValidationUtils.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;AAEH,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAsC,MAAM,qBAAqB,CAAC;AACvG,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AAEnD;;GAEG;AACH,qBAAa,eAAe;IAC1B;;OAEG;IACH,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAU,EAAE,GAAG,gBAAgB;IA2C/D;;OAEG;IACH,OAAO,CAAC,MAAM,CAAC,wBAAwB;IA4GvC;;OAEG;IACH,OAAO,CAAC,MAAM,CAAC,0BAA0B;IAyBzC;;OAEG;IACH,OAAO,CAAC,MAAM,CAAC,gBAAgB;IAqC/B;;OAEG;IACH,OAAO,CAAC,MAAM,CAAC,gBAAgB;IAiC/B;;OAEG;IACH,MAAM,CAAC,oBAAoB,CAAC,IAAI,EAAE,YAAY,EAAE,GAAG,gBAAgB;IAqDnE;;OAEG;IACH,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,MAAM,EAAE,GAAG,gBAAgB;IAiD7D;;OAEG;IACH,MAAM,CAAC,wBAAwB,CAAC,OAAO,EAAE,MAAM,EAAE,GAAG,gBAAgB;IAsEpE;;OAEG;IACH,MAAM,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,GAAG,gBAAgB;IA0D1E;;OAEG;IACH,MAAM,CAAC,wBAAwB,CAC7B,KAAK,EAAE,OAAO,EACd,IAAI,EAAE,MAAM,EACZ,OAAO,GAAE;QACP,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,GAAG,CAAC,EAAE,MAAM,CAAC;QACb,OAAO,CAAC,EAAE,OAAO,CAAC;QAClB,QAAQ,CAAC,EAAE,OAAO,CAAC;KACf,GACL,gBAAgB;IAyEnB;;OAEG;IACH,MAAM,CAAC,kBAAkB,CAAC,IAAI,EAAE,UAAU,EAAE,GAAG,UAAU,EAAE;CA4B5D\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/ValidationUtils.d.ts","writeByteOrderMark":false,"text":"/**\n * Validation Utilities\n *\n * Comprehensive data validation and error checking utilities.\n */\nimport { MarketData, ValidationResult } from '../types/MarketData';\nimport { TrainingData } from '../types/Prediction';\n/**\n * Validation utility functions\n */\nexport declare class ValidationUtils {\n    /**\n     * Validate market data array\n     */\n    static validateMarketData(data: MarketData[]): ValidationResult;\n    /**\n     * Validate single market data point\n     */\n    private static validateSingleMarketData;\n    /**\n     * Validate chronological order\n     */\n    private static validateChronologicalOrder;\n    /**\n     * Validate data gaps\n     */\n    private static validateDataGaps;\n    /**\n     * Validate outliers in price data\n     */\n    private static validateOutliers;\n    /**\n     * Validate training data\n     */\n    static validateTrainingData(data: TrainingData[]): ValidationResult;\n    /**\n     * Validate feature array\n     */\n    static validateFeatures(features: number[]): ValidationResult;\n    /**\n     * Validate portfolio weights\n     */\n    static validatePortfolioWeights(weights: number[]): ValidationResult;\n    /**\n     * Validate date range\n     */\n    static validateDateRange(startDate: Date, endDate: Date): ValidationResult;\n    /**\n     * Validate numeric parameter\n     */\n    static validateNumericParameter(value: unknown, name: string, options?: {\n        min?: number;\n        max?: number;\n        integer?: boolean;\n        positive?: boolean;\n    }): ValidationResult;\n    /**\n     * Sanitize and clean market data\n     */\n    static sanitizeMarketData(data: MarketData[]): MarketData[];\n}\n//# sourceMappingURL=ValidationUtils.d.ts.map"}}
