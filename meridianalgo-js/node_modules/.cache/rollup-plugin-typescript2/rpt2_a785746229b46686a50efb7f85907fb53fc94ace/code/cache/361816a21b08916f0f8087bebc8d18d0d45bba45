{"code":"/**\n * Feature Engineering Types\n *\n * Type definitions for feature engineering and technical analysis.\n */\nexport {};\n//# sourceMappingURL=Features.js.map","references":[],"map":"{\"version\":3,\"file\":\"Features.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/Features.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/Features.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Features.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/Features.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/Features.d.ts","writeByteOrderMark":false,"text":"/**\n * Feature Engineering Types\n *\n * Type definitions for feature engineering and technical analysis.\n */\n/**\n * Feature engineering configuration options\n */\nexport interface FeatureOptions {\n    /** Target number of features to generate */\n    targetFeatureCount: number;\n    /** Enable advanced technical features */\n    enableAdvancedFeatures: boolean;\n    /** Enable microstructure features */\n    enableMicrostructure: boolean;\n    /** Enable volatility features */\n    enableVolatilityFeatures: boolean;\n    /** Enable statistical features */\n    enableStatisticalFeatures: boolean;\n    /** Enable harmonic and cyclical features */\n    enableHarmonicFeatures: boolean;\n    /** Enable cross-asset features */\n    enableCrossAssetFeatures: boolean;\n    /** Lookback periods for rolling calculations */\n    lookbackPeriods: number[];\n    /** Technical indicator configurations */\n    technicalIndicators: TechnicalIndicatorConfig;\n}\n/**\n * Technical indicator configuration\n */\nexport interface TechnicalIndicatorConfig {\n    /** RSI configuration */\n    rsi: {\n        periods: number[];\n    };\n    /** MACD configuration */\n    macd: {\n        fast: number;\n        slow: number;\n        signal: number;\n    };\n    /** Bollinger Bands configuration */\n    bollinger: {\n        period: number;\n        multiplier: number;\n    };\n    /** Stochastic Oscillator configuration */\n    stochastic: {\n        kPeriod: number;\n        dPeriod: number;\n    };\n    /** Williams %R configuration */\n    williams: {\n        period: number;\n    };\n    /** Commodity Channel Index configuration */\n    cci: {\n        period: number;\n    };\n}\n/**\n * Feature matrix containing generated features\n */\nexport interface FeatureMatrix {\n    /** Feature data matrix (rows = samples, columns = features) */\n    data: number[][];\n    /** Feature names */\n    featureNames: string[];\n    /** Feature metadata */\n    metadata: FeatureMetadata[];\n    /** Number of columns (features) */\n    columns: number;\n    /** Number of rows (samples) */\n    rows: number;\n}\n/**\n * Metadata for individual features\n */\nexport interface FeatureMetadata {\n    /** Feature name */\n    name: string;\n    /** Feature category */\n    category: 'technical' | 'statistical' | 'microstructure' | 'volatility' | 'harmonic' | 'cross-asset';\n    /** Feature description */\n    description: string;\n    /** Data type */\n    dataType: 'numeric' | 'categorical' | 'binary';\n    /** Value range */\n    range?: {\n        min: number;\n        max: number;\n    };\n    /** Statistical properties */\n    statistics?: {\n        mean: number;\n        std: number;\n        skewness: number;\n        kurtosis: number;\n    };\n    /** Missing value handling */\n    missingValueStrategy: 'drop' | 'forward_fill' | 'backward_fill' | 'interpolate' | 'zero' | 'mean';\n    /** Transformation applied */\n    transformation?: 'none' | 'log' | 'sqrt' | 'normalize' | 'standardize';\n}\n/**\n * Technical indicator result structures\n */\nexport interface RSIResult {\n    /** RSI values */\n    values: number[];\n    /** Overbought threshold */\n    overbought: number;\n    /** Oversold threshold */\n    oversold: number;\n}\nexport interface MACDResult {\n    /** MACD line values */\n    macd: number[];\n    /** Signal line values */\n    signal: number[];\n    /** Histogram values */\n    histogram: number[];\n}\nexport interface BollingerBandsResult {\n    /** Upper band values */\n    upper: number[];\n    /** Middle band (SMA) values */\n    middle: number[];\n    /** Lower band values */\n    lower: number[];\n    /** Bandwidth values */\n    bandwidth: number[];\n    /** %B values (position within bands) */\n    percentB: number[];\n}\nexport interface StochasticResult {\n    /** %K values */\n    k: number[];\n    /** %D values */\n    d: number[];\n}\nexport interface IchimokuResult {\n    /** Tenkan-sen (Conversion Line) */\n    tenkanSen: number[];\n    /** Kijun-sen (Base Line) */\n    kijunSen: number[];\n    /** Senkou Span A (Leading Span A) */\n    senkouSpanA: number[];\n    /** Senkou Span B (Leading Span B) */\n    senkouSpanB: number[];\n    /** Chikou Span (Lagging Span) */\n    chikouSpan: number[];\n}\nexport interface AroonResult {\n    /** Aroon Up values */\n    up: number[];\n    /** Aroon Down values */\n    down: number[];\n    /** Aroon Oscillator values */\n    oscillator: number[];\n}\n/**\n * Microstructure feature configuration\n */\nexport interface MicrostructureConfig {\n    /** Enable bid-ask spread analysis */\n    bidAskSpread: boolean;\n    /** Enable order flow analysis */\n    orderFlow: boolean;\n    /** Enable price impact analysis */\n    priceImpact: boolean;\n    /** Enable liquidity analysis */\n    liquidity: boolean;\n    /** VWAP periods */\n    vwapPeriods: number[];\n    /** Order book depth levels */\n    orderBookDepth: number;\n}\n/**\n * Volatility feature configuration\n */\nexport interface VolatilityConfig {\n    /** Volatility estimators to use */\n    estimators: ('close' | 'parkinson' | 'garmanKlass' | 'rogersSatchell' | 'yangZhang')[];\n    /** Rolling window sizes */\n    windows: number[];\n    /** Enable GARCH modeling */\n    enableGarch: boolean;\n    /** Enable volatility clustering analysis */\n    enableClustering: boolean;\n    /** Enable volatility forecasting */\n    enableForecasting: boolean;\n}\n/**\n * Statistical feature configuration\n */\nexport interface StatisticalConfig {\n    /** Rolling statistics to calculate */\n    statistics: ('mean' | 'std' | 'skewness' | 'kurtosis' | 'min' | 'max' | 'median' | 'quantile')[];\n    /** Window sizes for rolling calculations */\n    windows: number[];\n    /** Quantile levels */\n    quantiles: number[];\n    /** Enable correlation analysis */\n    enableCorrelation: boolean;\n    /** Enable cointegration analysis */\n    enableCointegration: boolean;\n}\n/**\n * Harmonic feature configuration\n */\nexport interface HarmonicConfig {\n    /** Enable Fourier transform features */\n    enableFourier: boolean;\n    /** Enable wavelet transform features */\n    enableWavelet: boolean;\n    /** Enable cyclical pattern detection */\n    enableCyclical: boolean;\n    /** Frequency bands for analysis */\n    frequencyBands: number[];\n    /** Wavelet types */\n    waveletTypes: string[];\n}\n/**\n * Feature selection configuration\n */\nexport interface FeatureSelectionConfig {\n    /** Selection method */\n    method: 'correlation' | 'mutual_information' | 'chi2' | 'f_test' | 'recursive' | 'lasso';\n    /** Number of features to select */\n    numFeatures: number;\n    /** Selection threshold */\n    threshold?: number;\n    /** Cross-validation folds for selection */\n    cvFolds: number;\n}\n/**\n * Feature transformation configuration\n */\nexport interface FeatureTransformationConfig {\n    /** Scaling method */\n    scaling: 'none' | 'standard' | 'minmax' | 'robust' | 'quantile';\n    /** Dimensionality reduction method */\n    dimensionalityReduction?: 'pca' | 'ica' | 'lda' | 'tsne' | 'umap';\n    /** Number of components for dimensionality reduction */\n    numComponents?: number;\n    /** Handle missing values */\n    handleMissing: boolean;\n    /** Missing value strategy */\n    missingStrategy: 'drop' | 'impute' | 'interpolate';\n}\n/**\n * Feature importance analysis\n */\nexport interface FeatureImportanceAnalysis {\n    /** Feature importance scores */\n    scores: number[];\n    /** Feature rankings */\n    rankings: number[];\n    /** Feature names */\n    names: string[];\n    /** Importance method used */\n    method: string;\n    /** Statistical significance */\n    significance?: number[];\n}\n/**\n * Feature correlation analysis\n */\nexport interface FeatureCorrelationAnalysis {\n    /** Correlation matrix */\n    correlationMatrix: number[][];\n    /** Highly correlated feature pairs */\n    highCorrelations: Array<{\n        feature1: string;\n        feature2: string;\n        correlation: number;\n    }>;\n    /** Recommended features to remove */\n    redundantFeatures: string[];\n}\n/**\n * Feature engineering pipeline\n */\nexport interface FeaturePipeline {\n    /** Pipeline steps */\n    steps: FeaturePipelineStep[];\n    /** Pipeline configuration */\n    config: FeatureOptions;\n    /** Fitted pipeline state */\n    fitted: boolean;\n}\nexport interface FeaturePipelineStep {\n    /** Step name */\n    name: string;\n    /** Step type */\n    type: 'generator' | 'transformer' | 'selector';\n    /** Step configuration */\n    config: Record<string, unknown>;\n    /** Step execution order */\n    order: number;\n}\n//# sourceMappingURL=Features.d.ts.map"}}
