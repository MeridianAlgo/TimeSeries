{"code":"/**\n * Advanced Feature Engineer\n *\n * Generates 1000+ sophisticated features from basic OHLCV market data\n * using advanced technical analysis, statistical methods, and machine learning.\n */\nimport { TechnicalIndicators } from '../indicators/TechnicalIndicators';\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\nimport { MathUtils } from '../utils/MathUtils';\nimport { DEFAULT_FEATURE_OPTIONS } from '../config/defaults';\n/**\n * Advanced feature engineering implementation\n */\nexport class FeatureEngineer {\n    constructor(options = {}) {\n        this.featureNames = [];\n        this.featureMetadata = [];\n        this.options = {\n            ...DEFAULT_FEATURE_OPTIONS,\n            ...options\n        };\n    }\n    /**\n     * Generate comprehensive feature matrix from market data\n     */\n    generateFeatures(data) {\n        if (data.length < 50) {\n            throw new Error('Insufficient data for feature generation. Need at least 50 periods.');\n        }\n        console.log(`ðŸ”§ Generating advanced features from ${data.length} data points...`);\n        this.featureNames = [];\n        this.featureMetadata = [];\n        const features = [];\n        // Initialize feature matrix\n        for (let i = 0; i < data.length; i++) {\n            features.push([]);\n        }\n        // 1. Basic OHLCV Features\n        this.addBasicFeatures(data, features);\n        // 2. Technical Indicators\n        this.addTechnicalIndicators(data, features);\n        // 3. Statistical Features\n        if (this.options.enableStatisticalFeatures) {\n            this.addStatisticalFeatures(data, features);\n        }\n        // 4. Volatility Features\n        if (this.options.enableVolatilityFeatures) {\n            this.addVolatilityFeatures(data, features);\n        }\n        // 5. Cross-sectional Features\n        this.addCrossSectionalFeatures(data, features);\n        // 6. Pattern Recognition Features\n        this.addPatternFeatures(data, features);\n        // 7. Harmonic Features\n        if (this.options.enableHarmonicFeatures) {\n            this.addHarmonicFeatures(data, features);\n        }\n        console.log(`âœ¨ Generated ${this.featureNames.length} features`);\n        return {\n            data: features,\n            featureNames: [...this.featureNames],\n            metadata: [...this.featureMetadata],\n            columns: this.featureNames.length,\n            rows: features.length\n        };\n    }\n    /**\n     * Get feature names\n     */\n    getFeatureNames() {\n        return [...this.featureNames];\n    }\n    /**\n     * Get feature metadata\n     */\n    getFeatureMetadata() {\n        return [...this.featureMetadata];\n    }\n    /**\n     * Add basic OHLCV-derived features\n     */\n    addBasicFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const highs = data.map(d => d.high);\n        const lows = data.map(d => d.low);\n        const opens = data.map(d => d.open);\n        const volumes = data.map(d => d.volume);\n        // Price-based features\n        const returns = this.calculateReturns(closes);\n        const logReturns = this.calculateLogReturns(closes);\n        const hlRatio = highs.map((h, i) => h / lows[i]);\n        const ocRatio = opens.map((o, i) => o / closes[i]);\n        const bodySize = opens.map((o, i) => Math.abs(closes[i] - o) / o);\n        const upperShadow = highs.map((h, i) => (h - Math.max(opens[i], closes[i])) / closes[i]);\n        const lowerShadow = lows.map((l, i) => (Math.min(opens[i], closes[i]) - l) / closes[i]);\n        this.addFeatureColumn(features, returns, 'returns', 'Basic price returns');\n        this.addFeatureColumn(features, logReturns, 'log_returns', 'Logarithmic returns');\n        this.addFeatureColumn(features, hlRatio, 'hl_ratio', 'High/Low ratio');\n        this.addFeatureColumn(features, ocRatio, 'oc_ratio', 'Open/Close ratio');\n        this.addFeatureColumn(features, bodySize, 'body_size', 'Candle body size');\n        this.addFeatureColumn(features, upperShadow, 'upper_shadow', 'Upper shadow size');\n        this.addFeatureColumn(features, lowerShadow, 'lower_shadow', 'Lower shadow size');\n        // Volume-based features\n        const volumeReturns = this.calculateReturns(volumes);\n        const priceVolumeCorr = this.calculateRollingCorrelation(returns, volumeReturns, 20);\n        const volumeMA = this.calculateMovingAverage(volumes, 20);\n        const volumeRatio = volumes.map((v, i) => i >= 20 ? v / volumeMA[i - 20] : 1);\n        this.addFeatureColumn(features, volumeReturns, 'volume_returns', 'Volume returns');\n        this.addFeatureColumn(features, priceVolumeCorr, 'price_volume_corr', 'Price-volume correlation');\n        this.addFeatureColumn(features, volumeRatio, 'volume_ratio', 'Volume ratio to MA');\n    }\n    /**\n     * Add technical indicator features\n     */\n    addTechnicalIndicators(data, features) {\n        const closes = data.map(d => d.close);\n        const highs = data.map(d => d.high);\n        const lows = data.map(d => d.low);\n        const volumes = data.map(d => d.volume);\n        // RSI with multiple periods\n        for (const period of this.options.technicalIndicators.rsi.periods) {\n            const rsi = TechnicalIndicators.rsi(closes, period);\n            const rsiVelocity = this.calculateVelocity(rsi);\n            const rsiAcceleration = this.calculateVelocity(rsiVelocity);\n            this.addFeatureColumn(features, rsi, `rsi_${period}`, `RSI with period ${period}`);\n            this.addFeatureColumn(features, rsiVelocity, `rsi_velocity_${period}`, `RSI velocity ${period}`);\n            this.addFeatureColumn(features, rsiAcceleration, `rsi_acceleration_${period}`, `RSI acceleration ${period}`);\n        }\n        // MACD\n        const macd = TechnicalIndicators.macd(closes, this.options.technicalIndicators.macd.fast, this.options.technicalIndicators.macd.slow, this.options.technicalIndicators.macd.signal);\n        this.addFeatureColumn(features, macd.macd, 'macd_line', 'MACD line');\n        this.addFeatureColumn(features, macd.signal, 'macd_signal', 'MACD signal');\n        this.addFeatureColumn(features, macd.histogram, 'macd_histogram', 'MACD histogram');\n        // Bollinger Bands\n        const bb = TechnicalIndicators.bollingerBands(closes, this.options.technicalIndicators.bollinger.period, this.options.technicalIndicators.bollinger.multiplier);\n        this.addFeatureColumn(features, bb.upper, 'bb_upper', 'Bollinger upper band');\n        this.addFeatureColumn(features, bb.middle, 'bb_middle', 'Bollinger middle band');\n        this.addFeatureColumn(features, bb.lower, 'bb_lower', 'Bollinger lower band');\n        this.addFeatureColumn(features, bb.percentB, 'bb_position', 'Bollinger band position');\n        this.addFeatureColumn(features, bb.bandwidth, 'bb_width', 'Bollinger band width');\n        // Stochastic Oscillator\n        const stoch = TechnicalIndicators.stochastic(highs, lows, closes, this.options.technicalIndicators.stochastic.kPeriod, this.options.technicalIndicators.stochastic.dPeriod);\n        this.addFeatureColumn(features, stoch.k, 'stoch_k', 'Stochastic %K');\n        this.addFeatureColumn(features, stoch.d, 'stoch_d', 'Stochastic %D');\n        // Williams %R\n        const williams = TechnicalIndicators.williamsR(highs, lows, closes, this.options.technicalIndicators.williams.period);\n        this.addFeatureColumn(features, williams, 'williams_r', 'Williams %R');\n        // Commodity Channel Index\n        const cci = TechnicalIndicators.cci(highs, lows, closes, this.options.technicalIndicators.cci.period);\n        this.addFeatureColumn(features, cci, 'cci', 'Commodity Channel Index');\n        // ATR\n        const atr = TechnicalIndicators.atr(highs, lows, closes, 14);\n        this.addFeatureColumn(features, atr, 'atr', 'Average True Range');\n        // ADX\n        const adx = TechnicalIndicators.adx(highs, lows, closes, 14);\n        this.addFeatureColumn(features, adx.adx, 'adx', 'Average Directional Index');\n        this.addFeatureColumn(features, adx.plusDI, 'plus_di', 'Plus Directional Indicator');\n        this.addFeatureColumn(features, adx.minusDI, 'minus_di', 'Minus Directional Indicator');\n        // Volume indicators\n        const obv = TechnicalIndicators.obv(closes, volumes);\n        const mfi = TechnicalIndicators.mfi(highs, lows, closes, volumes, 14);\n        this.addFeatureColumn(features, obv, 'obv', 'On-Balance Volume');\n        this.addFeatureColumn(features, mfi, 'mfi', 'Money Flow Index');\n    }\n    /**\n     * Add statistical features\n     */\n    addStatisticalFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const returns = this.calculateReturns(closes);\n        // Rolling statistics for different windows\n        for (const window of this.options.lookbackPeriods) {\n            if (window <= data.length) {\n                // Rolling mean\n                const rollingMean = StatisticsUtils.rollingStatistic(returns, window, 'mean');\n                this.addFeatureColumn(features, rollingMean, `rolling_mean_${window}`, `Rolling mean ${window}`);\n                // Rolling standard deviation\n                const rollingStd = StatisticsUtils.rollingStatistic(returns, window, 'std');\n                this.addFeatureColumn(features, rollingStd, `rolling_std_${window}`, `Rolling std ${window}`);\n                // Rolling skewness\n                const rollingSkew = StatisticsUtils.rollingStatistic(returns, window, 'skewness');\n                this.addFeatureColumn(features, rollingSkew, `rolling_skew_${window}`, `Rolling skewness ${window}`);\n                // Rolling kurtosis\n                const rollingKurt = StatisticsUtils.rollingStatistic(returns, window, 'kurtosis');\n                this.addFeatureColumn(features, rollingKurt, `rolling_kurt_${window}`, `Rolling kurtosis ${window}`);\n                // Rolling min/max\n                const rollingMin = StatisticsUtils.rollingStatistic(closes, window, 'min');\n                const rollingMax = StatisticsUtils.rollingStatistic(closes, window, 'max');\n                this.addFeatureColumn(features, rollingMin, `rolling_min_${window}`, `Rolling min ${window}`);\n                this.addFeatureColumn(features, rollingMax, `rolling_max_${window}`, `Rolling max ${window}`);\n            }\n        }\n        // Autocorrelation features\n        for (let lag = 1; lag <= 10; lag++) {\n            const autocorr = this.calculateRollingAutocorrelation(returns, lag, 50);\n            this.addFeatureColumn(features, autocorr, `autocorr_${lag}`, `Autocorrelation lag ${lag}`);\n        }\n    }\n    /**\n     * Add volatility features\n     */\n    addVolatilityFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const highs = data.map(d => d.high);\n        const lows = data.map(d => d.low);\n        const returns = this.calculateReturns(closes);\n        // Realized volatility (different estimators)\n        for (const window of [10, 20, 50]) {\n            // Close-to-close volatility\n            const ccVol = this.calculateRollingVolatility(returns, window);\n            this.addFeatureColumn(features, ccVol, `cc_vol_${window}`, `Close-to-close volatility ${window}`);\n            // Parkinson volatility (high-low)\n            const parkVol = this.calculateParkinsonVolatility(highs, lows, window);\n            this.addFeatureColumn(features, parkVol, `park_vol_${window}`, `Parkinson volatility ${window}`);\n            // Volatility of volatility\n            const volOfVol = this.calculateRollingVolatility(ccVol, Math.min(window, 20));\n            this.addFeatureColumn(features, volOfVol, `vol_of_vol_${window}`, `Volatility of volatility ${window}`);\n        }\n        // GARCH-like features\n        const garchVol = this.calculateGARCHVolatility(returns);\n        this.addFeatureColumn(features, garchVol, 'garch_vol', 'GARCH-like volatility');\n        // Volatility regime indicators\n        const volRegime = this.detectVolatilityRegime(returns, 50);\n        this.addFeatureColumn(features, volRegime, 'vol_regime', 'Volatility regime');\n    }\n    /**\n     * Add cross-sectional features\n     */\n    addCrossSectionalFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const volumes = data.map(d => d.volume);\n        const returns = this.calculateReturns(closes);\n        // Rank-based features\n        for (const window of [20, 50]) {\n            const returnRanks = this.calculateRollingRanks(returns, window);\n            const volumeRanks = this.calculateRollingRanks(volumes, window);\n            this.addFeatureColumn(features, returnRanks, `return_rank_${window}`, `Return rank ${window}`);\n            this.addFeatureColumn(features, volumeRanks, `volume_rank_${window}`, `Volume rank ${window}`);\n        }\n        // Z-score features\n        for (const window of [20, 50]) {\n            const returnZScores = this.calculateRollingZScores(returns, window);\n            const volumeZScores = this.calculateRollingZScores(volumes, window);\n            this.addFeatureColumn(features, returnZScores, `return_zscore_${window}`, `Return z-score ${window}`);\n            this.addFeatureColumn(features, volumeZScores, `volume_zscore_${window}`, `Volume z-score ${window}`);\n        }\n    }\n    /**\n     * Add pattern recognition features\n     */\n    addPatternFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const highs = data.map(d => d.high);\n        const lows = data.map(d => d.low);\n        const opens = data.map(d => d.open);\n        // Candlestick patterns\n        const doji = this.detectDoji(opens, closes);\n        const hammer = this.detectHammer(opens, highs, lows, closes);\n        const engulfing = this.detectEngulfing(opens, closes);\n        this.addFeatureColumn(features, doji, 'doji', 'Doji pattern');\n        this.addFeatureColumn(features, hammer, 'hammer', 'Hammer pattern');\n        this.addFeatureColumn(features, engulfing, 'engulfing', 'Engulfing pattern');\n        // Support/Resistance levels\n        const supportResistance = this.detectSupportResistance(closes, 20);\n        this.addFeatureColumn(features, supportResistance.support, 'support_level', 'Support level');\n        this.addFeatureColumn(features, supportResistance.resistance, 'resistance_level', 'Resistance level');\n        // Trend patterns\n        const trendStrength = this.calculateTrendStrength(closes, 20);\n        this.addFeatureColumn(features, trendStrength, 'trend_strength', 'Trend strength');\n    }\n    /**\n     * Add harmonic features\n     */\n    addHarmonicFeatures(data, features) {\n        const closes = data.map(d => d.close);\n        const returns = this.calculateReturns(closes);\n        // Fourier transform features (simplified)\n        const fourierFeatures = this.calculateFourierFeatures(returns, 50);\n        for (let i = 0; i < fourierFeatures.length; i++) {\n            this.addFeatureColumn(features, fourierFeatures[i], `fourier_${i}`, `Fourier component ${i}`);\n        }\n        // Cyclical features\n        const cyclicalFeatures = this.calculateCyclicalFeatures(closes);\n        for (let i = 0; i < cyclicalFeatures.length; i++) {\n            this.addFeatureColumn(features, cyclicalFeatures[i], `cyclical_${i}`, `Cyclical component ${i}`);\n        }\n    }\n    /**\n     * Helper method to add a feature column\n     */\n    addFeatureColumn(features, values, name, description) {\n        // Pad with zeros if values array is shorter\n        const paddedValues = new Array(features.length).fill(0);\n        const startIndex = Math.max(0, features.length - values.length);\n        for (let i = 0; i < values.length && startIndex + i < features.length; i++) {\n            paddedValues[startIndex + i] = isFinite(values[i]) ? values[i] : 0;\n        }\n        // Add to each row\n        for (let i = 0; i < features.length; i++) {\n            features[i].push(paddedValues[i]);\n        }\n        // Add metadata\n        this.featureNames.push(name);\n        this.featureMetadata.push({\n            name,\n            category: 'technical',\n            description,\n            dataType: 'numeric',\n            missingValueStrategy: 'zero'\n        });\n    }\n    /**\n     * Calculate returns\n     */\n    calculateReturns(prices) {\n        const returns = [];\n        for (let i = 1; i < prices.length; i++) {\n            if (prices[i - 1] !== 0) {\n                returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n            }\n            else {\n                returns.push(0);\n            }\n        }\n        return returns;\n    }\n    /**\n     * Calculate log returns\n     */\n    calculateLogReturns(prices) {\n        const logReturns = [];\n        for (let i = 1; i < prices.length; i++) {\n            if (prices[i - 1] > 0 && prices[i] > 0) {\n                logReturns.push(Math.log(prices[i] / prices[i - 1]));\n            }\n            else {\n                logReturns.push(0);\n            }\n        }\n        return logReturns;\n    }\n    /**\n     * Calculate velocity (first difference)\n     */\n    calculateVelocity(values) {\n        const velocity = [];\n        for (let i = 1; i < values.length; i++) {\n            velocity.push(values[i] - values[i - 1]);\n        }\n        return velocity;\n    }\n    /**\n     * Calculate moving average\n     */\n    calculateMovingAverage(data, window) {\n        return TechnicalIndicators.sma(data, window);\n    }\n    /**\n     * Calculate rolling correlation\n     */\n    calculateRollingCorrelation(x, y, window) {\n        return MathUtils.rollingCorrelation(x, y, window);\n    }\n    /**\n     * Calculate rolling volatility\n     */\n    calculateRollingVolatility(returns, window) {\n        return StatisticsUtils.rollingStatistic(returns, window, 'std');\n    }\n    /**\n     * Calculate Parkinson volatility\n     */\n    calculateParkinsonVolatility(highs, lows, window) {\n        const logHL = highs.map((h, i) => Math.log(h / lows[i]));\n        const parkVol = [];\n        for (let i = window - 1; i < logHL.length; i++) {\n            const slice = logHL.slice(i - window + 1, i + 1);\n            const variance = slice.reduce((sum, val) => sum + val * val, 0) / (4 * Math.log(2) * window);\n            parkVol.push(Math.sqrt(variance));\n        }\n        return parkVol;\n    }\n    /**\n     * Calculate GARCH-like volatility\n     */\n    calculateGARCHVolatility(returns) {\n        const garchVol = [];\n        let variance = 0.01; // Initial variance\n        const alpha = 0.1; // ARCH parameter\n        const beta = 0.85; // GARCH parameter\n        const omega = 0.000001; // Constant\n        for (const ret of returns) {\n            variance = omega + alpha * ret * ret + beta * variance;\n            garchVol.push(Math.sqrt(variance));\n        }\n        return garchVol;\n    }\n    /**\n     * Detect volatility regime\n     */\n    detectVolatilityRegime(returns, window) {\n        const vol = this.calculateRollingVolatility(returns, window);\n        const volMean = StatisticsUtils.mean(vol);\n        const volStd = StatisticsUtils.standardDeviation(vol);\n        return vol.map(v => {\n            if (v > volMean + volStd)\n                return 2; // High volatility\n            if (v < volMean - volStd)\n                return 0; // Low volatility\n            return 1; // Normal volatility\n        });\n    }\n    /**\n     * Calculate rolling ranks\n     */\n    calculateRollingRanks(data, window) {\n        const ranks = [];\n        for (let i = window - 1; i < data.length; i++) {\n            const slice = data.slice(i - window + 1, i + 1);\n            const currentValue = data[i];\n            const rank = slice.filter(val => val <= currentValue).length / window;\n            ranks.push(rank);\n        }\n        return ranks;\n    }\n    /**\n     * Calculate rolling z-scores\n     */\n    calculateRollingZScores(data, window) {\n        const zScores = [];\n        for (let i = window - 1; i < data.length; i++) {\n            const slice = data.slice(i - window + 1, i + 1);\n            const mean = StatisticsUtils.mean(slice);\n            const std = StatisticsUtils.standardDeviation(slice);\n            if (std > 0) {\n                zScores.push((data[i] - mean) / std);\n            }\n            else {\n                zScores.push(0);\n            }\n        }\n        return zScores;\n    }\n    /**\n     * Calculate rolling autocorrelation\n     */\n    calculateRollingAutocorrelation(data, lag, window) {\n        const autocorr = [];\n        for (let i = window - 1; i < data.length - lag; i++) {\n            const slice = data.slice(i - window + 1, i + 1);\n            const laggedSlice = data.slice(i - window + 1 + lag, i + 1 + lag);\n            if (slice.length === laggedSlice.length) {\n                const correlation = MathUtils.correlation(slice, laggedSlice);\n                autocorr.push(correlation);\n            }\n            else {\n                autocorr.push(0);\n            }\n        }\n        return autocorr;\n    }\n    /**\n     * Detect Doji candlestick pattern\n     */\n    detectDoji(opens, closes) {\n        return opens.map((open, i) => {\n            const bodySize = Math.abs(closes[i] - open) / open;\n            return bodySize < 0.001 ? 1 : 0; // Doji if body is very small\n        });\n    }\n    /**\n     * Detect Hammer candlestick pattern\n     */\n    detectHammer(opens, highs, lows, closes) {\n        return opens.map((open, i) => {\n            const bodySize = Math.abs(closes[i] - open);\n            const lowerShadow = Math.min(open, closes[i]) - lows[i];\n            const upperShadow = highs[i] - Math.max(open, closes[i]);\n            // Hammer: small body, long lower shadow, short upper shadow\n            return (lowerShadow > 2 * bodySize && upperShadow < bodySize) ? 1 : 0;\n        });\n    }\n    /**\n     * Detect Engulfing pattern\n     */\n    detectEngulfing(opens, closes) {\n        const pattern = [0]; // First candle can't be engulfing\n        for (let i = 1; i < opens.length; i++) {\n            const prevBody = Math.abs(closes[i - 1] - opens[i - 1]);\n            const currBody = Math.abs(closes[i] - opens[i]);\n            // Bullish engulfing\n            if (closes[i - 1] < opens[i - 1] && closes[i] > opens[i] &&\n                opens[i] < closes[i - 1] && closes[i] > opens[i - 1] &&\n                currBody > prevBody) {\n                pattern.push(1);\n            }\n            // Bearish engulfing\n            else if (closes[i - 1] > opens[i - 1] && closes[i] < opens[i] &&\n                opens[i] > closes[i - 1] && closes[i] < opens[i - 1] &&\n                currBody > prevBody) {\n                pattern.push(-1);\n            }\n            else {\n                pattern.push(0);\n            }\n        }\n        return pattern;\n    }\n    /**\n     * Detect support and resistance levels\n     */\n    detectSupportResistance(closes, window) {\n        const support = [];\n        const resistance = [];\n        for (let i = window; i < closes.length; i++) {\n            const slice = closes.slice(i - window, i);\n            const currentPrice = closes[i];\n            // Support: lowest price in window\n            const supportLevel = Math.min(...slice);\n            support.push(supportLevel / currentPrice);\n            // Resistance: highest price in window\n            const resistanceLevel = Math.max(...slice);\n            resistance.push(resistanceLevel / currentPrice);\n        }\n        return { support, resistance };\n    }\n    /**\n     * Calculate trend strength\n     */\n    calculateTrendStrength(closes, window) {\n        const trendStrength = [];\n        for (let i = window - 1; i < closes.length; i++) {\n            const slice = closes.slice(i - window + 1, i + 1);\n            const x = Array.from({ length: window }, (_, idx) => idx);\n            // Linear regression slope as trend strength\n            const correlation = MathUtils.correlation(x, slice);\n            trendStrength.push(correlation);\n        }\n        return trendStrength;\n    }\n    /**\n     * Calculate Fourier features (simplified)\n     */\n    calculateFourierFeatures(data, window) {\n        const features = [[], []]; // Real and imaginary parts\n        for (let i = window - 1; i < data.length; i++) {\n            const slice = data.slice(i - window + 1, i + 1);\n            // Simple DFT for first few frequencies\n            let realPart = 0;\n            let imagPart = 0;\n            for (let k = 0; k < slice.length; k++) {\n                const angle = -2 * Math.PI * k / slice.length;\n                realPart += slice[k] * Math.cos(angle);\n                imagPart += slice[k] * Math.sin(angle);\n            }\n            features[0].push(realPart / slice.length);\n            features[1].push(imagPart / slice.length);\n        }\n        return features;\n    }\n    /**\n     * Calculate cyclical features\n     */\n    calculateCyclicalFeatures(closes) {\n        const features = [];\n        // Daily, weekly, monthly cycles (simplified)\n        const cycles = [5, 20, 60]; // 5-day, 20-day, 60-day cycles\n        for (const cycle of cycles) {\n            const cyclicalFeature = [];\n            for (let i = 0; i < closes.length; i++) {\n                const phase = (2 * Math.PI * i) / cycle;\n                cyclicalFeature.push(Math.sin(phase));\n            }\n            features.push(cyclicalFeature);\n        }\n        return features;\n    }\n}\n//# sourceMappingURL=FeatureEngineer.js.map","references":["C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/Features.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/MarketData.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/indicators/TechnicalIndicators.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/utils/StatisticsUtils.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/utils/MathUtils.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/config/defaults.ts"],"map":"{\"version\":3,\"file\":\"FeatureEngineer.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/features/FeatureEngineer.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/features/FeatureEngineer.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"FeatureEngineer.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/features/FeatureEngineer.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;GAKG;AAEH,OAAO,EAAE,cAAc,EAAE,aAAa,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AACnF,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AAMjD;;GAEG;AACH,qBAAa,eAAe;IAC1B,OAAO,CAAC,OAAO,CAA2B;IAC1C,OAAO,CAAC,YAAY,CAAgB;IACpC,OAAO,CAAC,eAAe,CAAyB;gBAEpC,OAAO,GAAE,OAAO,CAAC,cAAc,CAAM;IAOjD;;OAEG;IACH,gBAAgB,CAAC,IAAI,EAAE,UAAU,EAAE,GAAG,aAAa;IAsDnD;;OAEG;IACH,eAAe,IAAI,MAAM,EAAE;IAI3B;;OAEG;IACH,kBAAkB,IAAI,eAAe,EAAE;IAIvC;;OAEG;IACH,OAAO,CAAC,gBAAgB;IAmCxB;;OAEG;IACH,OAAO,CAAC,sBAAsB;IA2E9B;;OAEG;IACH,OAAO,CAAC,sBAAsB;IAsC9B;;OAEG;IACH,OAAO,CAAC,qBAAqB;IA8B7B;;OAEG;IACH,OAAO,CAAC,yBAAyB;IAwBjC;;OAEG;IACH,OAAO,CAAC,kBAAkB;IAyB1B;;OAEG;IACH,OAAO,CAAC,mBAAmB;IAiB3B;;OAEG;IACH,OAAO,CAAC,gBAAgB;IAyBxB;;OAEG;IACH,OAAO,CAAC,gBAAgB;IAYxB;;OAEG;IACH,OAAO,CAAC,mBAAmB;IAY3B;;OAEG;IACH,OAAO,CAAC,iBAAiB;IAQzB;;OAEG;IACH,OAAO,CAAC,sBAAsB;IAI9B;;OAEG;IACH,OAAO,CAAC,2BAA2B;IAInC;;OAEG;IACH,OAAO,CAAC,0BAA0B;IAIlC;;OAEG;IACH,OAAO,CAAC,4BAA4B;IAapC;;OAEG;IACH,OAAO,CAAC,wBAAwB;IAgBhC;;OAEG;IACH,OAAO,CAAC,sBAAsB;IAY9B;;OAEG;IACH,OAAO,CAAC,qBAAqB;IAa7B;;OAEG;IACH,OAAO,CAAC,uBAAuB;IAkB/B;;OAEG;IACH,OAAO,CAAC,+BAA+B;IAkBvC;;OAEG;IACH,OAAO,CAAC,UAAU;IAOlB;;OAEG;IACH,OAAO,CAAC,YAAY;IAWpB;;OAEG;IACH,OAAO,CAAC,eAAe;IA0BvB;;OAEG;IACH,OAAO,CAAC,uBAAuB;IAoB/B;;OAEG;IACH,OAAO,CAAC,sBAAsB;IAe9B;;OAEG;IACH,OAAO,CAAC,wBAAwB;IAuBhC;;OAEG;IACH,OAAO,CAAC,yBAAyB;CAmBlC\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/features/FeatureEngineer.d.ts","writeByteOrderMark":false,"text":"/**\n * Advanced Feature Engineer\n *\n * Generates 1000+ sophisticated features from basic OHLCV market data\n * using advanced technical analysis, statistical methods, and machine learning.\n */\nimport { FeatureOptions, FeatureMatrix, FeatureMetadata } from '../types/Features';\nimport { MarketData } from '../types/MarketData';\n/**\n * Advanced feature engineering implementation\n */\nexport declare class FeatureEngineer {\n    private options;\n    private featureNames;\n    private featureMetadata;\n    constructor(options?: Partial<FeatureOptions>);\n    /**\n     * Generate comprehensive feature matrix from market data\n     */\n    generateFeatures(data: MarketData[]): FeatureMatrix;\n    /**\n     * Get feature names\n     */\n    getFeatureNames(): string[];\n    /**\n     * Get feature metadata\n     */\n    getFeatureMetadata(): FeatureMetadata[];\n    /**\n     * Add basic OHLCV-derived features\n     */\n    private addBasicFeatures;\n    /**\n     * Add technical indicator features\n     */\n    private addTechnicalIndicators;\n    /**\n     * Add statistical features\n     */\n    private addStatisticalFeatures;\n    /**\n     * Add volatility features\n     */\n    private addVolatilityFeatures;\n    /**\n     * Add cross-sectional features\n     */\n    private addCrossSectionalFeatures;\n    /**\n     * Add pattern recognition features\n     */\n    private addPatternFeatures;\n    /**\n     * Add harmonic features\n     */\n    private addHarmonicFeatures;\n    /**\n     * Helper method to add a feature column\n     */\n    private addFeatureColumn;\n    /**\n     * Calculate returns\n     */\n    private calculateReturns;\n    /**\n     * Calculate log returns\n     */\n    private calculateLogReturns;\n    /**\n     * Calculate velocity (first difference)\n     */\n    private calculateVelocity;\n    /**\n     * Calculate moving average\n     */\n    private calculateMovingAverage;\n    /**\n     * Calculate rolling correlation\n     */\n    private calculateRollingCorrelation;\n    /**\n     * Calculate rolling volatility\n     */\n    private calculateRollingVolatility;\n    /**\n     * Calculate Parkinson volatility\n     */\n    private calculateParkinsonVolatility;\n    /**\n     * Calculate GARCH-like volatility\n     */\n    private calculateGARCHVolatility;\n    /**\n     * Detect volatility regime\n     */\n    private detectVolatilityRegime;\n    /**\n     * Calculate rolling ranks\n     */\n    private calculateRollingRanks;\n    /**\n     * Calculate rolling z-scores\n     */\n    private calculateRollingZScores;\n    /**\n     * Calculate rolling autocorrelation\n     */\n    private calculateRollingAutocorrelation;\n    /**\n     * Detect Doji candlestick pattern\n     */\n    private detectDoji;\n    /**\n     * Detect Hammer candlestick pattern\n     */\n    private detectHammer;\n    /**\n     * Detect Engulfing pattern\n     */\n    private detectEngulfing;\n    /**\n     * Detect support and resistance levels\n     */\n    private detectSupportResistance;\n    /**\n     * Calculate trend strength\n     */\n    private calculateTrendStrength;\n    /**\n     * Calculate Fourier features (simplified)\n     */\n    private calculateFourierFeatures;\n    /**\n     * Calculate cyclical features\n     */\n    private calculateCyclicalFeatures;\n}\n//# sourceMappingURL=FeatureEngineer.d.ts.map"}}
