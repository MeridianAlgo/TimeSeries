{"code":"/**\n * Mathematical Utilities\n *\n * Core mathematical functions and utilities for financial calculations.\n */\n/**\n * Mathematical utility functions\n */\nexport class MathUtils {\n    /**\n     * Calculate the natural logarithm with safety checks\n     */\n    static safeLog(value) {\n        if (value <= 0) {\n            throw new Error(`Cannot calculate log of non-positive value: ${value}`);\n        }\n        return Math.log(value);\n    }\n    /**\n     * Calculate square root with safety checks\n     */\n    static safeSqrt(value) {\n        if (value < 0) {\n            throw new Error(`Cannot calculate square root of negative value: ${value}`);\n        }\n        return Math.sqrt(value);\n    }\n    /**\n     * Calculate percentage change between two values\n     */\n    static percentageChange(oldValue, newValue) {\n        if (oldValue === 0) {\n            return newValue === 0 ? 0 : Infinity;\n        }\n        return (newValue - oldValue) / Math.abs(oldValue);\n    }\n    /**\n     * Calculate log returns\n     */\n    static logReturn(price1, price2) {\n        if (price1 <= 0 || price2 <= 0) {\n            throw new Error('Prices must be positive for log return calculation');\n        }\n        return Math.log(price2 / price1);\n    }\n    /**\n     * Calculate simple returns\n     */\n    static simpleReturn(price1, price2) {\n        if (price1 === 0) {\n            throw new Error('Initial price cannot be zero for simple return calculation');\n        }\n        return (price2 - price1) / price1;\n    }\n    /**\n     * Calculate compound annual growth rate (CAGR)\n     */\n    static cagr(beginValue, endValue, periods) {\n        if (beginValue <= 0 || endValue <= 0) {\n            throw new Error('Values must be positive for CAGR calculation');\n        }\n        if (periods <= 0) {\n            throw new Error('Periods must be positive for CAGR calculation');\n        }\n        return Math.pow(endValue / beginValue, 1 / periods) - 1;\n    }\n    /**\n     * Calculate annualized return\n     */\n    static annualizeReturn(totalReturn, periods, periodsPerYear = 252) {\n        return Math.pow(1 + totalReturn, periodsPerYear / periods) - 1;\n    }\n    /**\n     * Calculate annualized volatility\n     */\n    static annualizeVolatility(volatility, periodsPerYear = 252) {\n        return volatility * Math.sqrt(periodsPerYear);\n    }\n    /**\n     * Linear interpolation\n     */\n    static linearInterpolate(x0, y0, x1, y1, x) {\n        if (x1 === x0) {\n            return y0;\n        }\n        return y0 + (y1 - y0) * (x - x0) / (x1 - x0);\n    }\n    /**\n     * Clamp value between min and max\n     */\n    static clamp(value, min, max) {\n        return Math.min(Math.max(value, min), max);\n    }\n    /**\n     * Check if number is approximately equal (within tolerance)\n     */\n    static isApproximatelyEqual(a, b, tolerance = 1e-10) {\n        return Math.abs(a - b) < tolerance;\n    }\n    /**\n     * Round to specified decimal places\n     */\n    static roundTo(value, decimals) {\n        const factor = Math.pow(10, decimals);\n        return Math.round(value * factor) / factor;\n    }\n    /**\n     * Calculate factorial\n     */\n    static factorial(n) {\n        if (n < 0 || !Number.isInteger(n)) {\n            throw new Error('Factorial is only defined for non-negative integers');\n        }\n        if (n === 0 || n === 1)\n            return 1;\n        let result = 1;\n        for (let i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n    /**\n     * Calculate combination (n choose k)\n     */\n    static combination(n, k) {\n        if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\n            throw new Error('Invalid parameters for combination calculation');\n        }\n        if (k === 0 || k === n)\n            return 1;\n        // Use the more efficient formula: C(n,k) = n! / (k! * (n-k)!)\n        // But calculate it iteratively to avoid large factorials\n        let result = 1;\n        for (let i = 0; i < k; i++) {\n            result = result * (n - i) / (i + 1);\n        }\n        return Math.round(result);\n    }\n    /**\n     * Calculate permutation (n P k)\n     */\n    static permutation(n, k) {\n        if (k > n || k < 0 || !Number.isInteger(n) || !Number.isInteger(k)) {\n            throw new Error('Invalid parameters for permutation calculation');\n        }\n        let result = 1;\n        for (let i = 0; i < k; i++) {\n            result *= (n - i);\n        }\n        return result;\n    }\n    /**\n     * Calculate greatest common divisor\n     */\n    static gcd(a, b) {\n        a = Math.abs(Math.floor(a));\n        b = Math.abs(Math.floor(b));\n        while (b !== 0) {\n            const temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n    /**\n     * Calculate least common multiple\n     */\n    static lcm(a, b) {\n        return Math.abs(a * b) / this.gcd(a, b);\n    }\n    /**\n     * Generate array of numbers from start to end with step\n     */\n    static range(start, end, step = 1) {\n        const result = [];\n        if (step > 0) {\n            for (let i = start; i < end; i += step) {\n                result.push(i);\n            }\n        }\n        else if (step < 0) {\n            for (let i = start; i > end; i += step) {\n                result.push(i);\n            }\n        }\n        return result;\n    }\n    /**\n     * Generate linearly spaced array\n     */\n    static linspace(start, end, num) {\n        if (num <= 0) {\n            throw new Error('Number of points must be positive');\n        }\n        if (num === 1) {\n            return [start];\n        }\n        const result = [];\n        const step = (end - start) / (num - 1);\n        for (let i = 0; i < num; i++) {\n            result.push(start + i * step);\n        }\n        return result;\n    }\n    /**\n     * Generate logarithmically spaced array\n     */\n    static logspace(start, end, num, base = 10) {\n        const linearPoints = this.linspace(start, end, num);\n        return linearPoints.map(x => Math.pow(base, x));\n    }\n    /**\n     * Calculate moving average\n     */\n    static movingAverage(data, window) {\n        if (window <= 0 || window > data.length) {\n            throw new Error('Invalid window size for moving average');\n        }\n        const result = [];\n        for (let i = window - 1; i < data.length; i++) {\n            const sum = data.slice(i - window + 1, i + 1).reduce((a, b) => a + b, 0);\n            result.push(sum / window);\n        }\n        return result;\n    }\n    /**\n     * Calculate exponential moving average\n     */\n    static exponentialMovingAverage(data, alpha) {\n        if (alpha <= 0 || alpha > 1) {\n            throw new Error('Alpha must be between 0 and 1 for EMA calculation');\n        }\n        const result = [];\n        let ema = data[0];\n        result.push(ema);\n        for (let i = 1; i < data.length; i++) {\n            ema = alpha * data[i] + (1 - alpha) * ema;\n            result.push(ema);\n        }\n        return result;\n    }\n    /**\n     * Calculate weighted moving average\n     */\n    static weightedMovingAverage(data, weights) {\n        if (weights.length === 0) {\n            throw new Error('Weights array cannot be empty');\n        }\n        const window = weights.length;\n        const weightSum = weights.reduce((a, b) => a + b, 0);\n        if (Math.abs(weightSum) < 1e-10) {\n            throw new Error('Sum of weights cannot be zero');\n        }\n        const result = [];\n        for (let i = window - 1; i < data.length; i++) {\n            let weightedSum = 0;\n            for (let j = 0; j < window; j++) {\n                weightedSum += data[i - window + 1 + j] * weights[j];\n            }\n            result.push(weightedSum / weightSum);\n        }\n        return result;\n    }\n    /**\n     * Calculate rolling correlation\n     */\n    static rollingCorrelation(x, y, window) {\n        if (x.length !== y.length) {\n            throw new Error('Arrays must have the same length for correlation calculation');\n        }\n        if (window <= 1 || window > x.length) {\n            throw new Error('Invalid window size for rolling correlation');\n        }\n        const result = [];\n        for (let i = window - 1; i < x.length; i++) {\n            const xWindow = x.slice(i - window + 1, i + 1);\n            const yWindow = y.slice(i - window + 1, i + 1);\n            const correlation = this.correlation(xWindow, yWindow);\n            result.push(correlation);\n        }\n        return result;\n    }\n    /**\n     * Calculate Pearson correlation coefficient\n     */\n    static correlation(x, y) {\n        if (x.length !== y.length || x.length === 0) {\n            throw new Error('Arrays must have the same non-zero length for correlation calculation');\n        }\n        const n = x.length;\n        const sumX = x.reduce((a, b) => a + b, 0);\n        const sumY = y.reduce((a, b) => a + b, 0);\n        const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n        const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\n        const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);\n        const numerator = n * sumXY - sumX * sumY;\n        const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));\n        if (Math.abs(denominator) < 1e-10) {\n            return 0; // No correlation when denominator is zero\n        }\n        return numerator / denominator;\n    }\n    /**\n     * Calculate covariance\n     */\n    static covariance(x, y) {\n        if (x.length !== y.length || x.length === 0) {\n            throw new Error('Arrays must have the same non-zero length for covariance calculation');\n        }\n        const n = x.length;\n        const meanX = x.reduce((a, b) => a + b, 0) / n;\n        const meanY = y.reduce((a, b) => a + b, 0) / n;\n        let covar = 0;\n        for (let i = 0; i < n; i++) {\n            covar += (x[i] - meanX) * (y[i] - meanY);\n        }\n        return covar / (n - 1);\n    }\n    /**\n     * Calculate beta coefficient\n     */\n    static beta(returns, marketReturns) {\n        const covar = this.covariance(returns, marketReturns);\n        const marketVariance = this.variance(marketReturns);\n        if (Math.abs(marketVariance) < 1e-10) {\n            throw new Error('Market variance is zero, cannot calculate beta');\n        }\n        return covar / marketVariance;\n    }\n    /**\n     * Calculate variance\n     */\n    static variance(data) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate variance of empty array');\n        }\n        const mean = data.reduce((a, b) => a + b, 0) / data.length;\n        const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\n        return squaredDiffs.reduce((a, b) => a + b, 0) / (data.length - 1);\n    }\n    /**\n     * Normalize array to [0, 1] range\n     */\n    static normalize(data) {\n        if (data.length === 0) {\n            return [];\n        }\n        const min = Math.min(...data);\n        const max = Math.max(...data);\n        const range = max - min;\n        if (range === 0) {\n            return data.map(() => 0);\n        }\n        return data.map(x => (x - min) / range);\n    }\n    /**\n     * Standardize array (z-score normalization)\n     */\n    static standardize(data) {\n        if (data.length === 0) {\n            return [];\n        }\n        const mean = data.reduce((a, b) => a + b, 0) / data.length;\n        const std = Math.sqrt(this.variance(data));\n        if (std === 0) {\n            return data.map(() => 0);\n        }\n        return data.map(x => (x - mean) / std);\n    }\n}\n//# sourceMappingURL=MathUtils.js.map","references":[],"map":"{\"version\":3,\"file\":\"MathUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/MathUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/MathUtils.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"MathUtils.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/MathUtils.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/MathUtils.d.ts","writeByteOrderMark":false,"text":"/**\n * Mathematical Utilities\n *\n * Core mathematical functions and utilities for financial calculations.\n */\n/**\n * Mathematical utility functions\n */\nexport declare class MathUtils {\n    /**\n     * Calculate the natural logarithm with safety checks\n     */\n    static safeLog(value: number): number;\n    /**\n     * Calculate square root with safety checks\n     */\n    static safeSqrt(value: number): number;\n    /**\n     * Calculate percentage change between two values\n     */\n    static percentageChange(oldValue: number, newValue: number): number;\n    /**\n     * Calculate log returns\n     */\n    static logReturn(price1: number, price2: number): number;\n    /**\n     * Calculate simple returns\n     */\n    static simpleReturn(price1: number, price2: number): number;\n    /**\n     * Calculate compound annual growth rate (CAGR)\n     */\n    static cagr(beginValue: number, endValue: number, periods: number): number;\n    /**\n     * Calculate annualized return\n     */\n    static annualizeReturn(totalReturn: number, periods: number, periodsPerYear?: number): number;\n    /**\n     * Calculate annualized volatility\n     */\n    static annualizeVolatility(volatility: number, periodsPerYear?: number): number;\n    /**\n     * Linear interpolation\n     */\n    static linearInterpolate(x0: number, y0: number, x1: number, y1: number, x: number): number;\n    /**\n     * Clamp value between min and max\n     */\n    static clamp(value: number, min: number, max: number): number;\n    /**\n     * Check if number is approximately equal (within tolerance)\n     */\n    static isApproximatelyEqual(a: number, b: number, tolerance?: number): boolean;\n    /**\n     * Round to specified decimal places\n     */\n    static roundTo(value: number, decimals: number): number;\n    /**\n     * Calculate factorial\n     */\n    static factorial(n: number): number;\n    /**\n     * Calculate combination (n choose k)\n     */\n    static combination(n: number, k: number): number;\n    /**\n     * Calculate permutation (n P k)\n     */\n    static permutation(n: number, k: number): number;\n    /**\n     * Calculate greatest common divisor\n     */\n    static gcd(a: number, b: number): number;\n    /**\n     * Calculate least common multiple\n     */\n    static lcm(a: number, b: number): number;\n    /**\n     * Generate array of numbers from start to end with step\n     */\n    static range(start: number, end: number, step?: number): number[];\n    /**\n     * Generate linearly spaced array\n     */\n    static linspace(start: number, end: number, num: number): number[];\n    /**\n     * Generate logarithmically spaced array\n     */\n    static logspace(start: number, end: number, num: number, base?: number): number[];\n    /**\n     * Calculate moving average\n     */\n    static movingAverage(data: number[], window: number): number[];\n    /**\n     * Calculate exponential moving average\n     */\n    static exponentialMovingAverage(data: number[], alpha: number): number[];\n    /**\n     * Calculate weighted moving average\n     */\n    static weightedMovingAverage(data: number[], weights: number[]): number[];\n    /**\n     * Calculate rolling correlation\n     */\n    static rollingCorrelation(x: number[], y: number[], window: number): number[];\n    /**\n     * Calculate Pearson correlation coefficient\n     */\n    static correlation(x: number[], y: number[]): number;\n    /**\n     * Calculate covariance\n     */\n    static covariance(x: number[], y: number[]): number;\n    /**\n     * Calculate beta coefficient\n     */\n    static beta(returns: number[], marketReturns: number[]): number;\n    /**\n     * Calculate variance\n     */\n    static variance(data: number[]): number;\n    /**\n     * Normalize array to [0, 1] range\n     */\n    static normalize(data: number[]): number[];\n    /**\n     * Standardize array (z-score normalization)\n     */\n    static standardize(data: number[]): number[];\n}\n//# sourceMappingURL=MathUtils.d.ts.map"}}
