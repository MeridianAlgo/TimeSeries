{"code":"/**\n * Technical Indicators\n *\n * Comprehensive collection of technical analysis indicators for financial markets.\n */\nimport { MathUtils } from '../utils/MathUtils';\nimport { StatisticsUtils } from '../utils/StatisticsUtils';\n/**\n * Technical indicator calculations\n */\nexport class TechnicalIndicators {\n    /**\n     * Simple Moving Average (SMA)\n     */\n    static sma(data, period) {\n        if (period <= 0 || period > data.length) {\n            throw new Error('Invalid period for SMA calculation');\n        }\n        return MathUtils.movingAverage(data, period);\n    }\n    /**\n     * Exponential Moving Average (EMA)\n     */\n    static ema(data, period) {\n        if (period <= 0) {\n            throw new Error('Period must be positive for EMA calculation');\n        }\n        const alpha = 2 / (period + 1);\n        return MathUtils.exponentialMovingAverage(data, alpha);\n    }\n    /**\n     * Weighted Moving Average (WMA)\n     */\n    static wma(data, period) {\n        if (period <= 0 || period > data.length) {\n            throw new Error('Invalid period for WMA calculation');\n        }\n        const weights = Array.from({ length: period }, (_, i) => i + 1);\n        return MathUtils.weightedMovingAverage(data, weights);\n    }\n    /**\n     * Relative Strength Index (RSI)\n     */\n    static rsi(data, period = 14) {\n        if (period <= 0 || data.length < period + 1) {\n            throw new Error('Insufficient data or invalid period for RSI calculation');\n        }\n        const changes = [];\n        for (let i = 1; i < data.length; i++) {\n            changes.push(data[i] - data[i - 1]);\n        }\n        const gains = changes.map(change => Math.max(change, 0));\n        const losses = changes.map(change => Math.max(-change, 0));\n        const avgGains = this.sma(gains, period);\n        const avgLosses = this.sma(losses, period);\n        const rsiValues = [];\n        for (let i = 0; i < avgGains.length; i++) {\n            if (avgLosses[i] === 0) {\n                rsiValues.push(100);\n            }\n            else {\n                const rs = avgGains[i] / avgLosses[i];\n                rsiValues.push(100 - (100 / (1 + rs)));\n            }\n        }\n        return rsiValues;\n    }\n    /**\n     * Moving Average Convergence Divergence (MACD)\n     */\n    static macd(data, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n        if (fastPeriod >= slowPeriod) {\n            throw new Error('Fast period must be less than slow period for MACD');\n        }\n        const fastEMA = this.ema(data, fastPeriod);\n        const slowEMA = this.ema(data, slowPeriod);\n        // Align arrays (slowEMA is shorter)\n        const startIndex = slowPeriod - fastPeriod;\n        const alignedFastEMA = fastEMA.slice(startIndex);\n        const macdLine = alignedFastEMA.map((fast, i) => fast - slowEMA[i]);\n        const signalLine = this.ema(macdLine, signalPeriod);\n        // Align MACD line with signal line\n        const alignedMACDLine = macdLine.slice(macdLine.length - signalLine.length);\n        const histogram = alignedMACDLine.map((macd, i) => macd - signalLine[i]);\n        return {\n            macd: alignedMACDLine,\n            signal: signalLine,\n            histogram\n        };\n    }\n    /**\n     * Bollinger Bands\n     */\n    static bollingerBands(data, period = 20, multiplier = 2) {\n        if (period <= 0 || period > data.length) {\n            throw new Error('Invalid period for Bollinger Bands calculation');\n        }\n        const smaValues = this.sma(data, period);\n        const upper = [];\n        const lower = [];\n        const bandwidth = [];\n        const percentB = [];\n        for (let i = 0; i < smaValues.length; i++) {\n            const dataSlice = data.slice(i, i + period);\n            const std = StatisticsUtils.standardDeviation(dataSlice);\n            const upperBand = smaValues[i] + multiplier * std;\n            const lowerBand = smaValues[i] - multiplier * std;\n            upper.push(upperBand);\n            lower.push(lowerBand);\n            bandwidth.push((upperBand - lowerBand) / smaValues[i]);\n            const currentPrice = data[i + period - 1];\n            percentB.push((currentPrice - lowerBand) / (upperBand - lowerBand));\n        }\n        return {\n            upper,\n            middle: smaValues,\n            lower,\n            bandwidth,\n            percentB\n        };\n    }\n    /**\n     * Stochastic Oscillator\n     */\n    static stochastic(high, low, close, kPeriod = 14, dPeriod = 3) {\n        if (high.length !== low.length || low.length !== close.length) {\n            throw new Error('High, low, and close arrays must have the same length');\n        }\n        const k = [];\n        for (let i = kPeriod - 1; i < close.length; i++) {\n            const highestHigh = Math.max(...high.slice(i - kPeriod + 1, i + 1));\n            const lowestLow = Math.min(...low.slice(i - kPeriod + 1, i + 1));\n            if (highestHigh === lowestLow) {\n                k.push(50); // Avoid division by zero\n            }\n            else {\n                k.push(((close[i] - lowestLow) / (highestHigh - lowestLow)) * 100);\n            }\n        }\n        const d = this.sma(k, dPeriod);\n        return {\n            k: k.slice(k.length - d.length), // Align with D values\n            d\n        };\n    }\n    /**\n     * Williams %R\n     */\n    static williamsR(high, low, close, period = 14) {\n        if (high.length !== low.length || low.length !== close.length) {\n            throw new Error('High, low, and close arrays must have the same length');\n        }\n        const williamsR = [];\n        for (let i = period - 1; i < close.length; i++) {\n            const highestHigh = Math.max(...high.slice(i - period + 1, i + 1));\n            const lowestLow = Math.min(...low.slice(i - period + 1, i + 1));\n            if (highestHigh === lowestLow) {\n                williamsR.push(-50); // Avoid division by zero\n            }\n            else {\n                williamsR.push(((highestHigh - close[i]) / (highestHigh - lowestLow)) * -100);\n            }\n        }\n        return williamsR;\n    }\n    /**\n     * Commodity Channel Index (CCI)\n     */\n    static cci(high, low, close, period = 20) {\n        if (high.length !== low.length || low.length !== close.length) {\n            throw new Error('High, low, and close arrays must have the same length');\n        }\n        // Calculate Typical Price\n        const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\n        const cci = [];\n        for (let i = period - 1; i < typicalPrice.length; i++) {\n            const tpSlice = typicalPrice.slice(i - period + 1, i + 1);\n            const smaTP = StatisticsUtils.mean(tpSlice);\n            // Calculate Mean Deviation\n            const meanDeviation = tpSlice.reduce((sum, tp) => sum + Math.abs(tp - smaTP), 0) / period;\n            if (meanDeviation === 0) {\n                cci.push(0);\n            }\n            else {\n                cci.push((typicalPrice[i] - smaTP) / (0.015 * meanDeviation));\n            }\n        }\n        return cci;\n    }\n    /**\n     * Average True Range (ATR)\n     */\n    static atr(high, low, close, period = 14) {\n        if (high.length !== low.length || low.length !== close.length) {\n            throw new Error('High, low, and close arrays must have the same length');\n        }\n        const trueRanges = [];\n        for (let i = 1; i < high.length; i++) {\n            const tr1 = high[i] - low[i];\n            const tr2 = Math.abs(high[i] - close[i - 1]);\n            const tr3 = Math.abs(low[i] - close[i - 1]);\n            trueRanges.push(Math.max(tr1, tr2, tr3));\n        }\n        return this.sma(trueRanges, period);\n    }\n    /**\n     * Average Directional Index (ADX)\n     */\n    static adx(high, low, close, period = 14) {\n        if (high.length !== low.length || low.length !== close.length) {\n            throw new Error('High, low, and close arrays must have the same length');\n        }\n        const plusDM = [];\n        const minusDM = [];\n        const trueRanges = [];\n        for (let i = 1; i < high.length; i++) {\n            const highDiff = high[i] - high[i - 1];\n            const lowDiff = low[i - 1] - low[i];\n            plusDM.push(highDiff > lowDiff && highDiff > 0 ? highDiff : 0);\n            minusDM.push(lowDiff > highDiff && lowDiff > 0 ? lowDiff : 0);\n            const tr1 = high[i] - low[i];\n            const tr2 = Math.abs(high[i] - close[i - 1]);\n            const tr3 = Math.abs(low[i] - close[i - 1]);\n            trueRanges.push(Math.max(tr1, tr2, tr3));\n        }\n        const smoothedPlusDM = this.sma(plusDM, period);\n        const smoothedMinusDM = this.sma(minusDM, period);\n        const smoothedTR = this.sma(trueRanges, period);\n        const plusDI = smoothedPlusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\n        const minusDI = smoothedMinusDM.map((dm, i) => (dm / smoothedTR[i]) * 100);\n        const dx = plusDI.map((plus, i) => {\n            const sum = plus + minusDI[i];\n            return sum === 0 ? 0 : (Math.abs(plus - minusDI[i]) / sum) * 100;\n        });\n        const adx = this.sma(dx, period);\n        return {\n            adx,\n            plusDI: plusDI.slice(plusDI.length - adx.length),\n            minusDI: minusDI.slice(minusDI.length - adx.length)\n        };\n    }\n    /**\n     * Money Flow Index (MFI)\n     */\n    static mfi(high, low, close, volume, period = 14) {\n        if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\n            throw new Error('All arrays must have the same length');\n        }\n        const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\n        const rawMoneyFlow = typicalPrice.map((tp, i) => tp * volume[i]);\n        const mfi = [];\n        for (let i = period; i < typicalPrice.length; i++) {\n            let positiveFlow = 0;\n            let negativeFlow = 0;\n            for (let j = i - period + 1; j <= i; j++) {\n                if (typicalPrice[j] > typicalPrice[j - 1]) {\n                    positiveFlow += rawMoneyFlow[j];\n                }\n                else if (typicalPrice[j] < typicalPrice[j - 1]) {\n                    negativeFlow += rawMoneyFlow[j];\n                }\n            }\n            if (negativeFlow === 0) {\n                mfi.push(100);\n            }\n            else {\n                const moneyRatio = positiveFlow / negativeFlow;\n                mfi.push(100 - (100 / (1 + moneyRatio)));\n            }\n        }\n        return mfi;\n    }\n    /**\n     * On-Balance Volume (OBV)\n     */\n    static obv(close, volume) {\n        if (close.length !== volume.length) {\n            throw new Error('Close and volume arrays must have the same length');\n        }\n        const obv = [volume[0]];\n        for (let i = 1; i < close.length; i++) {\n            if (close[i] > close[i - 1]) {\n                obv.push(obv[i - 1] + volume[i]);\n            }\n            else if (close[i] < close[i - 1]) {\n                obv.push(obv[i - 1] - volume[i]);\n            }\n            else {\n                obv.push(obv[i - 1]);\n            }\n        }\n        return obv;\n    }\n    /**\n     * Volume Weighted Average Price (VWAP)\n     */\n    static vwap(high, low, close, volume) {\n        if (high.length !== low.length || low.length !== close.length || close.length !== volume.length) {\n            throw new Error('All arrays must have the same length');\n        }\n        const typicalPrice = high.map((h, i) => (h + low[i] + close[i]) / 3);\n        const vwap = [];\n        let cumulativeTPV = 0; // Cumulative Typical Price * Volume\n        let cumulativeVolume = 0;\n        for (let i = 0; i < typicalPrice.length; i++) {\n            cumulativeTPV += typicalPrice[i] * volume[i];\n            cumulativeVolume += volume[i];\n            vwap.push(cumulativeVolume === 0 ? typicalPrice[i] : cumulativeTPV / cumulativeVolume);\n        }\n        return vwap;\n    }\n    /**\n     * Momentum\n     */\n    static momentum(data, period = 10) {\n        if (period <= 0 || period >= data.length) {\n            throw new Error('Invalid period for momentum calculation');\n        }\n        const momentum = [];\n        for (let i = period; i < data.length; i++) {\n            momentum.push(data[i] - data[i - period]);\n        }\n        return momentum;\n    }\n    /**\n     * Rate of Change (ROC)\n     */\n    static roc(data, period = 10) {\n        if (period <= 0 || period >= data.length) {\n            throw new Error('Invalid period for ROC calculation');\n        }\n        const roc = [];\n        for (let i = period; i < data.length; i++) {\n            if (data[i - period] === 0) {\n                roc.push(0);\n            }\n            else {\n                roc.push(((data[i] - data[i - period]) / data[i - period]) * 100);\n            }\n        }\n        return roc;\n    }\n    /**\n     * Standard Deviation\n     */\n    static standardDeviation(data, period) {\n        if (period <= 0 || period > data.length) {\n            throw new Error('Invalid period for standard deviation calculation');\n        }\n        return StatisticsUtils.rollingStatistic(data, period, 'std');\n    }\n    /**\n     * Variance\n     */\n    static variance(data, period) {\n        if (period <= 0 || period > data.length) {\n            throw new Error('Invalid period for variance calculation');\n        }\n        return StatisticsUtils.rollingStatistic(data, period, 'var');\n    }\n    /**\n     * Linear Regression Slope\n     */\n    static linearRegressionSlope(data, period) {\n        if (period <= 1 || period > data.length) {\n            throw new Error('Invalid period for linear regression slope calculation');\n        }\n        const slopes = [];\n        for (let i = period - 1; i < data.length; i++) {\n            const y = data.slice(i - period + 1, i + 1);\n            const x = Array.from({ length: period }, (_, idx) => idx);\n            const n = period;\n            const sumX = x.reduce((sum, val) => sum + val, 0);\n            const sumY = y.reduce((sum, val) => sum + val, 0);\n            const sumXY = x.reduce((sum, val, idx) => sum + val * y[idx], 0);\n            const sumX2 = x.reduce((sum, val) => sum + val * val, 0);\n            const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n            slopes.push(slope);\n        }\n        return slopes;\n    }\n    /**\n     * Pivot Points (Standard)\n     */\n    static pivotPoints(high, low, close) {\n        const pivot = (high + low + close) / 3;\n        return {\n            pivot,\n            r1: 2 * pivot - low,\n            r2: pivot + (high - low),\n            r3: high + 2 * (pivot - low),\n            s1: 2 * pivot - high,\n            s2: pivot - (high - low),\n            s3: low - 2 * (high - pivot)\n        };\n    }\n    /**\n     * Helper method to extract prices from MarketData array\n     */\n    static extractPrices(data, priceType) {\n        return data.map(item => item[priceType]);\n    }\n    /**\n     * Helper method to extract OHLCV arrays from MarketData\n     */\n    static extractOHLCV(data) {\n        return {\n            open: data.map(item => item.open),\n            high: data.map(item => item.high),\n            low: data.map(item => item.low),\n            close: data.map(item => item.close),\n            volume: data.map(item => item.volume)\n        };\n    }\n}\n//# sourceMappingURL=TechnicalIndicators.js.map","references":["C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/MarketData.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/types/Features.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/utils/MathUtils.ts","C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/src/utils/StatisticsUtils.ts"],"map":"{\"version\":3,\"file\":\"TechnicalIndicators.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/indicators/TechnicalIndicators.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/indicators/TechnicalIndicators.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"TechnicalIndicators.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/indicators/TechnicalIndicators.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG;AAEH,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAIvF;;GAEG;AACH,qBAAa,mBAAmB;IAC9B;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IAQpD;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IASpD;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IASpD;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IA6BzD;;OAEG;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,UAAU,GAAE,MAAW,EAAE,UAAU,GAAE,MAAW,EAAE,YAAY,GAAE,MAAU,GAAG,UAAU;IA0BnH;;OAEG;IACH,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,EAAE,UAAU,GAAE,MAAU,GAAG,oBAAoB;IAmCxG;;OAEG;IACH,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,OAAO,GAAE,MAAW,EAAE,OAAO,GAAE,MAAU,GAAG,gBAAgB;IA0B9H;;OAEG;IACH,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IAqB/F;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IA2BzF;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IAkBzF;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG;QAAE,GAAG,EAAE,MAAM,EAAE,CAAC;QAAC,MAAM,EAAE,MAAM,EAAE,CAAC;QAAC,OAAO,EAAE,MAAM,EAAE,CAAA;KAAE;IA2CvI;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IAiC3G;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE;IAoBvD;;OAEG;IACH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,EAAE;IAqBvF;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IAc9D;;OAEG;IACH,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,GAAE,MAAW,GAAG,MAAM,EAAE;IAkBzD;;OAEG;IACH,MAAM,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IAQlE;;OAEG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IAQzD;;OAEG;IACH,MAAM,CAAC,qBAAqB,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,EAAE;IAwBtE;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,GAAG;QAC5D,KAAK,EAAE,MAAM,CAAC;QACd,EAAE,EAAE,MAAM,CAAC;QACX,EAAE,EAAE,MAAM,CAAC;QACX,EAAE,EAAE,MAAM,CAAC;QACX,EAAE,EAAE,MAAM,CAAC;QACX,EAAE,EAAE,MAAM,CAAC;QACX,EAAE,EAAE,MAAM,CAAC;KACZ;IAcD;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,SAAS,EAAE,MAAM,GAAG,MAAM,GAAG,KAAK,GAAG,OAAO,GAAG,QAAQ,GAAG,MAAM,EAAE;IAI3G;;OAEG;IACH,MAAM,CAAC,YAAY,CAAC,IAAI,EAAE,UAAU,EAAE,GAAG;QACvC,IAAI,EAAE,MAAM,EAAE,CAAC;QACf,IAAI,EAAE,MAAM,EAAE,CAAC;QACf,GAAG,EAAE,MAAM,EAAE,CAAC;QACd,KAAK,EAAE,MAAM,EAAE,CAAC;QAChB,MAAM,EAAE,MAAM,EAAE,CAAC;KAClB;CASF\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/indicators/TechnicalIndicators.d.ts","writeByteOrderMark":false,"text":"/**\n * Technical Indicators\n *\n * Comprehensive collection of technical analysis indicators for financial markets.\n */\nimport { MarketData } from '../types/MarketData';\nimport { MACDResult, BollingerBandsResult, StochasticResult } from '../types/Features';\n/**\n * Technical indicator calculations\n */\nexport declare class TechnicalIndicators {\n    /**\n     * Simple Moving Average (SMA)\n     */\n    static sma(data: number[], period: number): number[];\n    /**\n     * Exponential Moving Average (EMA)\n     */\n    static ema(data: number[], period: number): number[];\n    /**\n     * Weighted Moving Average (WMA)\n     */\n    static wma(data: number[], period: number): number[];\n    /**\n     * Relative Strength Index (RSI)\n     */\n    static rsi(data: number[], period?: number): number[];\n    /**\n     * Moving Average Convergence Divergence (MACD)\n     */\n    static macd(data: number[], fastPeriod?: number, slowPeriod?: number, signalPeriod?: number): MACDResult;\n    /**\n     * Bollinger Bands\n     */\n    static bollingerBands(data: number[], period?: number, multiplier?: number): BollingerBandsResult;\n    /**\n     * Stochastic Oscillator\n     */\n    static stochastic(high: number[], low: number[], close: number[], kPeriod?: number, dPeriod?: number): StochasticResult;\n    /**\n     * Williams %R\n     */\n    static williamsR(high: number[], low: number[], close: number[], period?: number): number[];\n    /**\n     * Commodity Channel Index (CCI)\n     */\n    static cci(high: number[], low: number[], close: number[], period?: number): number[];\n    /**\n     * Average True Range (ATR)\n     */\n    static atr(high: number[], low: number[], close: number[], period?: number): number[];\n    /**\n     * Average Directional Index (ADX)\n     */\n    static adx(high: number[], low: number[], close: number[], period?: number): {\n        adx: number[];\n        plusDI: number[];\n        minusDI: number[];\n    };\n    /**\n     * Money Flow Index (MFI)\n     */\n    static mfi(high: number[], low: number[], close: number[], volume: number[], period?: number): number[];\n    /**\n     * On-Balance Volume (OBV)\n     */\n    static obv(close: number[], volume: number[]): number[];\n    /**\n     * Volume Weighted Average Price (VWAP)\n     */\n    static vwap(high: number[], low: number[], close: number[], volume: number[]): number[];\n    /**\n     * Momentum\n     */\n    static momentum(data: number[], period?: number): number[];\n    /**\n     * Rate of Change (ROC)\n     */\n    static roc(data: number[], period?: number): number[];\n    /**\n     * Standard Deviation\n     */\n    static standardDeviation(data: number[], period: number): number[];\n    /**\n     * Variance\n     */\n    static variance(data: number[], period: number): number[];\n    /**\n     * Linear Regression Slope\n     */\n    static linearRegressionSlope(data: number[], period: number): number[];\n    /**\n     * Pivot Points (Standard)\n     */\n    static pivotPoints(high: number, low: number, close: number): {\n        pivot: number;\n        r1: number;\n        r2: number;\n        r3: number;\n        s1: number;\n        s2: number;\n        s3: number;\n    };\n    /**\n     * Helper method to extract prices from MarketData array\n     */\n    static extractPrices(data: MarketData[], priceType: 'open' | 'high' | 'low' | 'close' | 'volume'): number[];\n    /**\n     * Helper method to extract OHLCV arrays from MarketData\n     */\n    static extractOHLCV(data: MarketData[]): {\n        open: number[];\n        high: number[];\n        low: number[];\n        close: number[];\n        volume: number[];\n    };\n}\n//# sourceMappingURL=TechnicalIndicators.d.ts.map"}}
