{"code":"/**\n * Market Data Types\n *\n * Core data structures for market data representation and processing.\n */\nexport {};\n//# sourceMappingURL=MarketData.js.map","references":[],"map":"{\"version\":3,\"file\":\"MarketData.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/MarketData.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/MarketData.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"MarketData.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/MarketData.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/MarketData.d.ts","writeByteOrderMark":false,"text":"/**\n * Market Data Types\n *\n * Core data structures for market data representation and processing.\n */\n/**\n * Basic market data structure representing OHLCV data\n */\nexport interface MarketData {\n    /** Timestamp of the data point */\n    timestamp: Date;\n    /** Trading symbol (e.g., 'AAPL', 'BTC-USD') */\n    symbol: string;\n    /** Opening price */\n    open: number;\n    /** Highest price during the period */\n    high: number;\n    /** Lowest price during the period */\n    low: number;\n    /** Closing price */\n    close: number;\n    /** Trading volume */\n    volume: number;\n    /** Volume-weighted average price (optional) */\n    vwap?: number;\n    /** Number of trades (optional) */\n    trades?: number;\n}\n/**\n * Extended market data with additional fields for advanced analysis\n */\nexport interface ExtendedMarketData extends MarketData {\n    /** Bid price */\n    bid?: number;\n    /** Ask price */\n    ask?: number;\n    /** Bid size */\n    bidSize?: number;\n    /** Ask size */\n    askSize?: number;\n    /** Open interest (for derivatives) */\n    openInterest?: number;\n    /** Funding rate (for perpetual contracts) */\n    fundingRate?: number;\n}\n/**\n * Tick data for high-frequency analysis\n */\nexport interface TickData {\n    /** Timestamp of the tick */\n    timestamp: Date;\n    /** Trading symbol */\n    symbol: string;\n    /** Price of the trade */\n    price: number;\n    /** Size of the trade */\n    size: number;\n    /** Side of the trade ('buy' or 'sell') */\n    side: 'buy' | 'sell';\n    /** Trade ID */\n    tradeId?: string;\n}\n/**\n * Order book data structure\n */\nexport interface OrderBookLevel {\n    /** Price level */\n    price: number;\n    /** Size at this level */\n    size: number;\n    /** Number of orders at this level */\n    count?: number;\n}\nexport interface OrderBook {\n    /** Timestamp of the order book snapshot */\n    timestamp: Date;\n    /** Trading symbol */\n    symbol: string;\n    /** Bid levels (sorted by price descending) */\n    bids: OrderBookLevel[];\n    /** Ask levels (sorted by price ascending) */\n    asks: OrderBookLevel[];\n    /** Sequence number for ordering */\n    sequence?: number;\n}\n/**\n * Data quality metrics\n */\nexport interface DataQuality {\n    /** Completeness score (0-1) */\n    completeness: number;\n    /** Accuracy score (0-1) */\n    accuracy: number;\n    /** Consistency score (0-1) */\n    consistency: number;\n    /** Timeliness score (0-1) */\n    timeliness: number;\n    /** Overall quality score (0-1) */\n    overall: number;\n    /** Issues found during validation */\n    issues: string[];\n}\n/**\n * Data source configuration\n */\nexport interface DataSource {\n    /** Name of the data source */\n    name: string;\n    /** Type of data source */\n    type: 'rest' | 'websocket' | 'file' | 'database';\n    /** Connection URL or path */\n    url: string;\n    /** Authentication credentials */\n    credentials?: {\n        apiKey?: string;\n        secret?: string;\n        token?: string;\n    };\n    /** Rate limiting configuration */\n    rateLimit?: {\n        requests: number;\n        period: number;\n    };\n    /** Retry configuration */\n    retry?: {\n        attempts: number;\n        delay: number;\n        backoff: 'linear' | 'exponential';\n    };\n}\n/**\n * Data validation result\n */\nexport interface ValidationResult {\n    /** Whether the data is valid */\n    isValid: boolean;\n    /** Validation errors */\n    errors: ValidationError[];\n    /** Validation warnings */\n    warnings: ValidationWarning[];\n    /** Data quality metrics */\n    quality?: DataQuality;\n}\nexport interface ValidationError {\n    /** Error code */\n    code: string;\n    /** Error message */\n    message: string;\n    /** Field that caused the error */\n    field?: string;\n    /** Value that caused the error */\n    value?: unknown;\n    /** Severity level */\n    severity: 'low' | 'medium' | 'high' | 'critical';\n}\nexport interface ValidationWarning {\n    /** Warning code */\n    code: string;\n    /** Warning message */\n    message: string;\n    /** Field that caused the warning */\n    field?: string;\n    /** Value that caused the warning */\n    value?: unknown;\n}\n/**\n * Time series data structure\n */\nexport interface TimeSeries<T = number> {\n    /** Timestamps */\n    timestamps: Date[];\n    /** Values */\n    values: T[];\n    /** Metadata */\n    metadata?: {\n        symbol?: string;\n        interval?: string;\n        source?: string;\n    };\n}\n/**\n * Multi-asset data structure\n */\nexport interface MultiAssetData {\n    /** Asset symbols */\n    symbols: string[];\n    /** Market data for each asset */\n    data: Map<string, MarketData[]>;\n    /** Correlation matrix */\n    correlations?: number[][];\n    /** Covariance matrix */\n    covariances?: number[][];\n}\n/**\n * Data aggregation configuration\n */\nexport interface AggregationConfig {\n    /** Aggregation method */\n    method: 'ohlc' | 'vwap' | 'mean' | 'median' | 'sum';\n    /** Time interval for aggregation */\n    interval: string;\n    /** Timezone for aggregation */\n    timezone?: string;\n    /** Whether to include incomplete periods */\n    includeIncomplete?: boolean;\n}\n//# sourceMappingURL=MarketData.d.ts.map"}}
