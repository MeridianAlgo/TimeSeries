{"code":"/**\n * Prediction Types\n *\n * Type definitions for machine learning prediction models and results.\n */\nexport {};\n//# sourceMappingURL=Prediction.js.map","references":[],"map":"{\"version\":3,\"file\":\"Prediction.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/Prediction.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;GAIG\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/Prediction.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"Prediction.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types/Prediction.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/types/Prediction.d.ts","writeByteOrderMark":false,"text":"/**\n * Prediction Types\n *\n * Type definitions for machine learning prediction models and results.\n */\n/**\n * Configuration options for ultra-precision predictor\n */\nexport interface PredictorOptions {\n    /** Target error rate (e.g., 0.01 for 1% error) */\n    targetErrorRate: number;\n    /** Number of models in the ensemble */\n    ensembleSize: number;\n    /** Target number of features to generate */\n    featureCount: number;\n    /** Ratio of data to use for training (rest for validation) */\n    trainingRatio: number;\n    /** Number of cross-validation folds */\n    crossValidationFolds: number;\n    /** Enable automatic hyperparameter tuning */\n    hyperparameterTuning: boolean;\n    /** Enable parallel processing */\n    parallelProcessing: boolean;\n    /** Enable feature caching */\n    cacheFeatures: boolean;\n    /** Enable incremental learning */\n    incrementalLearning: boolean;\n    /** Update frequency for real-time models */\n    updateFrequency: 'tick' | 'batch' | 'realtime';\n    /** Number of periods to predict ahead */\n    predictionHorizon: number;\n    /** Minimum confidence threshold for predictions */\n    confidenceThreshold: number;\n}\n/**\n * Prediction result with confidence and metadata\n */\nexport interface PredictionResult {\n    /** Predicted value */\n    value: number;\n    /** Confidence score (0-1) */\n    confidence: number;\n    /** Timestamp of prediction */\n    timestamp: Date;\n    /** Input features used for prediction */\n    features: number[];\n    /** Model version used */\n    modelVersion: string;\n    /** Additional metadata */\n    metadata?: {\n        /** Feature importance scores */\n        featureImportance?: number[];\n        /** Individual model predictions (for ensemble) */\n        modelPredictions?: number[];\n        /** Prediction interval bounds */\n        bounds?: {\n            lower: number;\n            upper: number;\n        };\n    };\n}\n/**\n * Batch prediction results\n */\nexport interface BatchPredictionResult {\n    /** Array of predictions */\n    predictions: PredictionResult[];\n    /** Overall batch statistics */\n    statistics: {\n        /** Mean prediction value */\n        mean: number;\n        /** Standard deviation of predictions */\n        std: number;\n        /** Minimum prediction value */\n        min: number;\n        /** Maximum prediction value */\n        max: number;\n        /** Average confidence */\n        avgConfidence: number;\n    };\n    /** Processing time in milliseconds */\n    processingTime: number;\n}\n/**\n * Model performance metrics\n */\nexport interface ModelMetrics {\n    /** Mean Absolute Error */\n    mae: number;\n    /** Mean Squared Error */\n    mse: number;\n    /** Root Mean Squared Error */\n    rmse: number;\n    /** R-squared coefficient */\n    r2: number;\n    /** Directional accuracy (percentage of correct direction predictions) */\n    directionalAccuracy: number;\n    /** Number of samples used for evaluation */\n    sampleCount: number;\n    /** Additional custom metrics */\n    custom?: Record<string, number>;\n}\n/**\n * Training data structure for machine learning models\n */\nexport interface TrainingData {\n    /** Timestamp of the data point */\n    timestamp: Date;\n    /** Trading symbol */\n    symbol: string;\n    /** Opening price */\n    open: number;\n    /** Highest price during the period */\n    high: number;\n    /** Lowest price during the period */\n    low: number;\n    /** Closing price */\n    close: number;\n    /** Trading volume */\n    volume: number;\n    /** Pre-computed features for this data point */\n    features?: number[];\n    /** Target value for supervised learning */\n    target?: number;\n    /** Additional metadata */\n    metadata?: Record<string, unknown>;\n}\n/**\n * Training results and statistics\n */\nexport interface TrainingResults {\n    /** Training performance metrics */\n    trainingMetrics: ModelMetrics;\n    /** Validation performance metrics */\n    validationMetrics: ModelMetrics;\n    /** Training duration in milliseconds */\n    trainingTime: number;\n    /** Number of features used */\n    featureCount: number;\n    /** Feature importance scores */\n    featureImportance: number[];\n    /** Cross-validation results */\n    crossValidation?: {\n        /** Mean CV score */\n        meanScore: number;\n        /** Standard deviation of CV scores */\n        stdScore: number;\n        /** Individual fold scores */\n        foldScores: number[];\n    };\n    /** Hyperparameter optimization results */\n    hyperparameterOptimization?: {\n        /** Best parameters found */\n        bestParams: Record<string, unknown>;\n        /** Best score achieved */\n        bestScore: number;\n        /** Number of trials performed */\n        trials: number;\n    };\n}\n/**\n * Model configuration for individual algorithms\n */\nexport interface ModelConfig {\n    /** Model type */\n    type: 'randomForest' | 'neuralNetwork' | 'svm' | 'gradientBoosting' | 'linear';\n    /** Model-specific parameters */\n    parameters: Record<string, unknown>;\n    /** Weight in ensemble (if applicable) */\n    weight?: number;\n    /** Whether this model is enabled */\n    enabled: boolean;\n}\n/**\n * Ensemble configuration\n */\nexport interface EnsembleConfig {\n    /** Individual model configurations */\n    models: ModelConfig[];\n    /** Ensemble combination method */\n    combinationMethod: 'average' | 'weighted' | 'stacking' | 'voting';\n    /** Meta-learner configuration (for stacking) */\n    metaLearner?: ModelConfig;\n    /** Dynamic weight adjustment */\n    dynamicWeights: boolean;\n}\n/**\n * Feature importance information\n */\nexport interface FeatureImportance {\n    /** Feature index */\n    index: number;\n    /** Feature name */\n    name: string;\n    /** Importance score */\n    importance: number;\n    /** Rank among all features */\n    rank: number;\n    /** Feature category */\n    category?: string;\n}\n/**\n * Model serialization format\n */\nexport interface SerializedModel {\n    /** Model version */\n    version: string;\n    /** Model type */\n    type: string;\n    /** Serialized model data */\n    data: string;\n    /** Model metadata */\n    metadata: {\n        /** Training timestamp */\n        trainedAt: string;\n        /** Training data size */\n        trainingSize: number;\n        /** Feature names */\n        featureNames: string[];\n        /** Performance metrics */\n        metrics: ModelMetrics;\n    };\n    /** Model configuration */\n    config: PredictorOptions;\n}\n/**\n * Real-time prediction configuration\n */\nexport interface RealtimePredictionConfig {\n    /** Update interval in milliseconds */\n    updateInterval: number;\n    /** Buffer size for streaming data */\n    bufferSize: number;\n    /** Minimum data points required for prediction */\n    minDataPoints: number;\n    /** Enable automatic model retraining */\n    autoRetrain: boolean;\n    /** Retraining trigger conditions */\n    retrainTriggers: {\n        /** Retrain when accuracy drops below threshold */\n        accuracyThreshold?: number;\n        /** Retrain after specified time interval */\n        timeInterval?: number;\n        /** Retrain after specified number of predictions */\n        predictionCount?: number;\n    };\n}\n/**\n * Prediction monitoring and alerting\n */\nexport interface PredictionMonitoring {\n    /** Enable monitoring */\n    enabled: boolean;\n    /** Metrics to monitor */\n    metrics: string[];\n    /** Alert thresholds */\n    thresholds: Record<string, number>;\n    /** Alert callback function */\n    onAlert?: (alert: PredictionAlert) => void;\n}\nexport interface PredictionAlert {\n    /** Alert type */\n    type: 'accuracy' | 'confidence' | 'latency' | 'error';\n    /** Alert severity */\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    /** Alert message */\n    message: string;\n    /** Metric value that triggered the alert */\n    value: number;\n    /** Threshold that was exceeded */\n    threshold: number;\n    /** Timestamp of the alert */\n    timestamp: Date;\n}\n/**\n * Model comparison results\n */\nexport interface ModelComparison {\n    /** Models being compared */\n    models: string[];\n    /** Comparison metrics */\n    metrics: Record<string, number[]>;\n    /** Statistical significance tests */\n    significance?: Record<string, {\n        pValue: number;\n        isSignificant: boolean;\n    }>;\n    /** Recommended model */\n    recommendation: string;\n}\n//# sourceMappingURL=Prediction.d.ts.map"}}
