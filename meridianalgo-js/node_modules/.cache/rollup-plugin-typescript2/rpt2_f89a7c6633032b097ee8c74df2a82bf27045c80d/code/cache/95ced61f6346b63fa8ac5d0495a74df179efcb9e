{"code":"/**\n * Statistical Utilities\n *\n * Advanced statistical functions for financial analysis and risk management.\n */\n/**\n * Statistical utility functions\n */\nexport class StatisticsUtils {\n    /**\n     * Calculate mean (average)\n     */\n    static mean(data) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate mean of empty array');\n        }\n        return data.reduce((sum, value) => sum + value, 0) / data.length;\n    }\n    /**\n     * Calculate median\n     */\n    static median(data) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate median of empty array');\n        }\n        const sorted = [...data].sort((a, b) => a - b);\n        const mid = Math.floor(sorted.length / 2);\n        if (sorted.length % 2 === 0) {\n            return (sorted[mid - 1] + sorted[mid]) / 2;\n        }\n        else {\n            return sorted[mid];\n        }\n    }\n    /**\n     * Calculate mode (most frequent value)\n     */\n    static mode(data) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate mode of empty array');\n        }\n        const frequency = new Map();\n        let maxFreq = 0;\n        for (const value of data) {\n            const freq = (frequency.get(value) || 0) + 1;\n            frequency.set(value, freq);\n            maxFreq = Math.max(maxFreq, freq);\n        }\n        const modes = [];\n        for (const [value, freq] of frequency) {\n            if (freq === maxFreq) {\n                modes.push(value);\n            }\n        }\n        return modes;\n    }\n    /**\n     * Calculate standard deviation\n     */\n    static standardDeviation(data, sample = true) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate standard deviation of empty array');\n        }\n        if (sample && data.length === 1) {\n            throw new Error('Cannot calculate sample standard deviation with only one data point');\n        }\n        const mean = this.mean(data);\n        const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\n        const variance = squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\n        return Math.sqrt(variance);\n    }\n    /**\n     * Calculate variance\n     */\n    static variance(data, sample = true) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate variance of empty array');\n        }\n        if (sample && data.length === 1) {\n            throw new Error('Cannot calculate sample variance with only one data point');\n        }\n        const mean = this.mean(data);\n        const squaredDiffs = data.map(x => Math.pow(x - mean, 2));\n        return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / (sample ? data.length - 1 : data.length);\n    }\n    /**\n     * Calculate skewness (measure of asymmetry)\n     */\n    static skewness(data) {\n        if (data.length < 3) {\n            throw new Error('Need at least 3 data points to calculate skewness');\n        }\n        const mean = this.mean(data);\n        const std = this.standardDeviation(data);\n        const n = data.length;\n        if (std === 0) {\n            return 0;\n        }\n        const cubedDeviations = data.map(x => Math.pow((x - mean) / std, 3));\n        const sum = cubedDeviations.reduce((a, b) => a + b, 0);\n        return (n / ((n - 1) * (n - 2))) * sum;\n    }\n    /**\n     * Calculate kurtosis (measure of tail heaviness)\n     */\n    static kurtosis(data, excess = true) {\n        if (data.length < 4) {\n            throw new Error('Need at least 4 data points to calculate kurtosis');\n        }\n        const mean = this.mean(data);\n        const std = this.standardDeviation(data);\n        const n = data.length;\n        if (std === 0) {\n            return excess ? -3 : 0;\n        }\n        const fourthMoments = data.map(x => Math.pow((x - mean) / std, 4));\n        const sum = fourthMoments.reduce((a, b) => a + b, 0);\n        const kurtosisValue = (n * (n + 1) / ((n - 1) * (n - 2) * (n - 3))) * sum -\n            (3 * Math.pow(n - 1, 2) / ((n - 2) * (n - 3)));\n        return excess ? kurtosisValue : kurtosisValue + 3;\n    }\n    /**\n     * Calculate quantile (percentile)\n     */\n    static quantile(data, q) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate quantile of empty array');\n        }\n        if (q < 0 || q > 1) {\n            throw new Error('Quantile must be between 0 and 1');\n        }\n        const sorted = [...data].sort((a, b) => a - b);\n        const index = q * (sorted.length - 1);\n        if (Number.isInteger(index)) {\n            return sorted[index];\n        }\n        else {\n            const lower = Math.floor(index);\n            const upper = Math.ceil(index);\n            const weight = index - lower;\n            return sorted[lower] * (1 - weight) + sorted[upper] * weight;\n        }\n    }\n    /**\n     * Calculate interquartile range (IQR)\n     */\n    static interquartileRange(data) {\n        const q1 = this.quantile(data, 0.25);\n        const q3 = this.quantile(data, 0.75);\n        return q3 - q1;\n    }\n    /**\n     * Detect outliers using IQR method\n     */\n    static detectOutliers(data, multiplier = 1.5) {\n        const q1 = this.quantile(data, 0.25);\n        const q3 = this.quantile(data, 0.75);\n        const iqr = q3 - q1;\n        const lowerBound = q1 - multiplier * iqr;\n        const upperBound = q3 + multiplier * iqr;\n        const outliers = [];\n        const indices = [];\n        data.forEach((value, index) => {\n            if (value < lowerBound || value > upperBound) {\n                outliers.push(value);\n                indices.push(index);\n            }\n        });\n        return { outliers, indices };\n    }\n    /**\n     * Calculate z-scores\n     */\n    static zScores(data) {\n        const mean = this.mean(data);\n        const std = this.standardDeviation(data);\n        if (std === 0) {\n            return data.map(() => 0);\n        }\n        return data.map(x => (x - mean) / std);\n    }\n    /**\n     * Calculate rolling statistics\n     */\n    static rollingStatistic(data, window, statistic) {\n        if (window <= 0 || window > data.length) {\n            throw new Error('Invalid window size');\n        }\n        const result = [];\n        for (let i = window - 1; i < data.length; i++) {\n            const windowData = data.slice(i - window + 1, i + 1);\n            switch (statistic) {\n                case 'mean':\n                    result.push(this.mean(windowData));\n                    break;\n                case 'std':\n                    result.push(this.standardDeviation(windowData));\n                    break;\n                case 'var':\n                    result.push(this.variance(windowData));\n                    break;\n                case 'min':\n                    result.push(Math.min(...windowData));\n                    break;\n                case 'max':\n                    result.push(Math.max(...windowData));\n                    break;\n                case 'median':\n                    result.push(this.median(windowData));\n                    break;\n                case 'skewness':\n                    result.push(windowData.length >= 3 ? this.skewness(windowData) : 0);\n                    break;\n                case 'kurtosis':\n                    result.push(windowData.length >= 4 ? this.kurtosis(windowData) : 0);\n                    break;\n                default:\n                    throw new Error(`Unknown statistic: ${statistic}`);\n            }\n        }\n        return result;\n    }\n    /**\n     * Calculate Value at Risk (VaR)\n     */\n    static valueAtRisk(returns, confidenceLevel = 0.95) {\n        if (confidenceLevel <= 0 || confidenceLevel >= 1) {\n            throw new Error('Confidence level must be between 0 and 1');\n        }\n        return -this.quantile(returns, 1 - confidenceLevel);\n    }\n    /**\n     * Calculate Expected Shortfall (Conditional VaR)\n     */\n    static expectedShortfall(returns, confidenceLevel = 0.95) {\n        const varValue = this.valueAtRisk(returns, confidenceLevel);\n        const tailReturns = returns.filter(r => r <= -varValue);\n        if (tailReturns.length === 0) {\n            return varValue;\n        }\n        return -this.mean(tailReturns);\n    }\n    /**\n     * Calculate maximum drawdown\n     */\n    static maxDrawdown(cumulativeReturns) {\n        if (cumulativeReturns.length === 0) {\n            throw new Error('Cannot calculate max drawdown of empty array');\n        }\n        let peak = cumulativeReturns[0];\n        let maxDrawdown = 0;\n        let peakIndex = 0;\n        let troughIndex = 0;\n        for (let i = 1; i < cumulativeReturns.length; i++) {\n            if (cumulativeReturns[i] > peak) {\n                peak = cumulativeReturns[i];\n                peakIndex = i;\n            }\n            const drawdown = (peak - cumulativeReturns[i]) / peak;\n            if (drawdown > maxDrawdown) {\n                maxDrawdown = drawdown;\n                troughIndex = i;\n            }\n        }\n        return {\n            maxDrawdown,\n            peak: peakIndex,\n            trough: troughIndex\n        };\n    }\n    /**\n     * Calculate Sharpe ratio\n     */\n    static sharpeRatio(returns, riskFreeRate = 0) {\n        const excessReturns = returns.map(r => r - riskFreeRate);\n        const meanExcessReturn = this.mean(excessReturns);\n        const std = this.standardDeviation(excessReturns);\n        if (std === 0) {\n            return meanExcessReturn > 0 ? Infinity : (meanExcessReturn < 0 ? -Infinity : 0);\n        }\n        return meanExcessReturn / std;\n    }\n    /**\n     * Calculate Sortino ratio\n     */\n    static sortinoRatio(returns, riskFreeRate = 0, targetReturn = 0) {\n        const excessReturns = returns.map(r => r - riskFreeRate);\n        const meanExcessReturn = this.mean(excessReturns);\n        const downsideReturns = returns.filter(r => r < targetReturn);\n        if (downsideReturns.length === 0) {\n            return meanExcessReturn > 0 ? Infinity : 0;\n        }\n        const downsideDeviation = Math.sqrt(downsideReturns.reduce((sum, r) => sum + Math.pow(r - targetReturn, 2), 0) / downsideReturns.length);\n        if (downsideDeviation === 0) {\n            return meanExcessReturn > 0 ? Infinity : 0;\n        }\n        return meanExcessReturn / downsideDeviation;\n    }\n    /**\n     * Calculate Calmar ratio\n     */\n    static calmarRatio(returns) {\n        const cumulativeReturns = this.cumulativeSum(returns);\n        const totalReturn = cumulativeReturns[cumulativeReturns.length - 1];\n        const { maxDrawdown } = this.maxDrawdown(cumulativeReturns);\n        if (maxDrawdown === 0) {\n            return totalReturn > 0 ? Infinity : 0;\n        }\n        return totalReturn / maxDrawdown;\n    }\n    /**\n     * Calculate cumulative sum\n     */\n    static cumulativeSum(data) {\n        const result = [];\n        let sum = 0;\n        for (const value of data) {\n            sum += value;\n            result.push(sum);\n        }\n        return result;\n    }\n    /**\n     * Calculate cumulative product\n     */\n    static cumulativeProduct(data) {\n        const result = [];\n        let product = 1;\n        for (const value of data) {\n            product *= (1 + value);\n            result.push(product - 1);\n        }\n        return result;\n    }\n    /**\n     * Calculate sum\n     */\n    static sum(data) {\n        return data.reduce((sum, value) => sum + value, 0);\n    }\n    /**\n     * Calculate product\n     */\n    static product(data) {\n        return data.reduce((product, value) => product * value, 1);\n    }\n    /**\n     * Calculate range (max - min)\n     */\n    static range(data) {\n        if (data.length === 0) {\n            throw new Error('Cannot calculate range of empty array');\n        }\n        return Math.max(...data) - Math.min(...data);\n    }\n    /**\n     * Calculate coefficient of variation\n     */\n    static coefficientOfVariation(data) {\n        const mean = this.mean(data);\n        const std = this.standardDeviation(data);\n        if (mean === 0) {\n            throw new Error('Cannot calculate coefficient of variation when mean is zero');\n        }\n        return std / Math.abs(mean);\n    }\n    /**\n     * Perform Jarque-Bera test for normality\n     */\n    static jarqueBeraTest(data) {\n        if (data.length < 4) {\n            throw new Error('Need at least 4 data points for Jarque-Bera test');\n        }\n        const n = data.length;\n        const skew = this.skewness(data);\n        const kurt = this.kurtosis(data, true); // excess kurtosis\n        const jb = (n / 6) * (Math.pow(skew, 2) + Math.pow(kurt, 2) / 4);\n        // Approximate p-value using chi-square distribution with 2 degrees of freedom\n        // This is a simplified approximation\n        const pValue = 1 - this.chiSquareCDF(jb, 2);\n        return {\n            statistic: jb,\n            pValue,\n            isNormal: pValue > 0.05 // 5% significance level\n        };\n    }\n    /**\n     * Approximate chi-square CDF (simplified implementation)\n     */\n    static chiSquareCDF(x, df) {\n        if (x <= 0)\n            return 0;\n        if (df === 2) {\n            return 1 - Math.exp(-x / 2);\n        }\n        // For other degrees of freedom, use a simple approximation\n        // In a production environment, you'd want a more accurate implementation\n        return Math.min(1, x / (2 * df));\n    }\n    /**\n     * Calculate autocorrelation at given lag\n     */\n    static autocorrelation(data, lag) {\n        if (lag >= data.length || lag < 0) {\n            throw new Error('Invalid lag for autocorrelation calculation');\n        }\n        const n = data.length - lag;\n        const x1 = data.slice(0, n);\n        const x2 = data.slice(lag, lag + n);\n        const mean1 = this.mean(x1);\n        const mean2 = this.mean(x2);\n        let numerator = 0;\n        let denominator1 = 0;\n        let denominator2 = 0;\n        for (let i = 0; i < n; i++) {\n            const diff1 = x1[i] - mean1;\n            const diff2 = x2[i] - mean2;\n            numerator += diff1 * diff2;\n            denominator1 += diff1 * diff1;\n            denominator2 += diff2 * diff2;\n        }\n        const denominator = Math.sqrt(denominator1 * denominator2);\n        if (denominator === 0) {\n            return 0;\n        }\n        return numerator / denominator;\n    }\n    /**\n     * Calculate multiple autocorrelations\n     */\n    static autocorrelationFunction(data, maxLag) {\n        const result = [];\n        for (let lag = 0; lag <= maxLag; lag++) {\n            if (lag === 0) {\n                result.push(1); // Autocorrelation at lag 0 is always 1\n            }\n            else {\n                result.push(this.autocorrelation(data, lag));\n            }\n        }\n        return result;\n    }\n}\n//# sourceMappingURL=StatisticsUtils.js.map","references":[],"map":"{\"version\":3,\"file\":\"StatisticsUtils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/StatisticsUtils.ts\"],\"names\":[],\"mappings\":\"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\"}","dtsmap":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/StatisticsUtils.d.ts.map","writeByteOrderMark":false,"text":"{\"version\":3,\"file\":\"StatisticsUtils.d.ts\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/StatisticsUtils.ts\"],\"names\":[],\"mappings\":\"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\"}"},"dts":{"name":"C:/Users/Ishaan/OneDrive/Desktop/MeridianLearning/meridianalgo-js/node_modules/.cache/rollup-plugin-typescript2/placeholder/utils/StatisticsUtils.d.ts","writeByteOrderMark":false,"text":"/**\n * Statistical Utilities\n *\n * Advanced statistical functions for financial analysis and risk management.\n */\n/**\n * Statistical utility functions\n */\nexport declare class StatisticsUtils {\n    /**\n     * Calculate mean (average)\n     */\n    static mean(data: number[]): number;\n    /**\n     * Calculate median\n     */\n    static median(data: number[]): number;\n    /**\n     * Calculate mode (most frequent value)\n     */\n    static mode(data: number[]): number[];\n    /**\n     * Calculate standard deviation\n     */\n    static standardDeviation(data: number[], sample?: boolean): number;\n    /**\n     * Calculate variance\n     */\n    static variance(data: number[], sample?: boolean): number;\n    /**\n     * Calculate skewness (measure of asymmetry)\n     */\n    static skewness(data: number[]): number;\n    /**\n     * Calculate kurtosis (measure of tail heaviness)\n     */\n    static kurtosis(data: number[], excess?: boolean): number;\n    /**\n     * Calculate quantile (percentile)\n     */\n    static quantile(data: number[], q: number): number;\n    /**\n     * Calculate interquartile range (IQR)\n     */\n    static interquartileRange(data: number[]): number;\n    /**\n     * Detect outliers using IQR method\n     */\n    static detectOutliers(data: number[], multiplier?: number): {\n        outliers: number[];\n        indices: number[];\n    };\n    /**\n     * Calculate z-scores\n     */\n    static zScores(data: number[]): number[];\n    /**\n     * Calculate rolling statistics\n     */\n    static rollingStatistic(data: number[], window: number, statistic: 'mean' | 'std' | 'var' | 'min' | 'max' | 'median' | 'skewness' | 'kurtosis'): number[];\n    /**\n     * Calculate Value at Risk (VaR)\n     */\n    static valueAtRisk(returns: number[], confidenceLevel?: number): number;\n    /**\n     * Calculate Expected Shortfall (Conditional VaR)\n     */\n    static expectedShortfall(returns: number[], confidenceLevel?: number): number;\n    /**\n     * Calculate maximum drawdown\n     */\n    static maxDrawdown(cumulativeReturns: number[]): {\n        maxDrawdown: number;\n        peak: number;\n        trough: number;\n    };\n    /**\n     * Calculate Sharpe ratio\n     */\n    static sharpeRatio(returns: number[], riskFreeRate?: number): number;\n    /**\n     * Calculate Sortino ratio\n     */\n    static sortinoRatio(returns: number[], riskFreeRate?: number, targetReturn?: number): number;\n    /**\n     * Calculate Calmar ratio\n     */\n    static calmarRatio(returns: number[]): number;\n    /**\n     * Calculate cumulative sum\n     */\n    static cumulativeSum(data: number[]): number[];\n    /**\n     * Calculate cumulative product\n     */\n    static cumulativeProduct(data: number[]): number[];\n    /**\n     * Calculate sum\n     */\n    static sum(data: number[]): number;\n    /**\n     * Calculate product\n     */\n    static product(data: number[]): number;\n    /**\n     * Calculate range (max - min)\n     */\n    static range(data: number[]): number;\n    /**\n     * Calculate coefficient of variation\n     */\n    static coefficientOfVariation(data: number[]): number;\n    /**\n     * Perform Jarque-Bera test for normality\n     */\n    static jarqueBeraTest(data: number[]): {\n        statistic: number;\n        pValue: number;\n        isNormal: boolean;\n    };\n    /**\n     * Approximate chi-square CDF (simplified implementation)\n     */\n    private static chiSquareCDF;\n    /**\n     * Calculate autocorrelation at given lag\n     */\n    static autocorrelation(data: number[], lag: number): number;\n    /**\n     * Calculate multiple autocorrelations\n     */\n    static autocorrelationFunction(data: number[], maxLag: number): number[];\n}\n//# sourceMappingURL=StatisticsUtils.d.ts.map"}}
